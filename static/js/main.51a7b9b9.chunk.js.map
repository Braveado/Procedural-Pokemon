{"version":3,"sources":["context/TeamBuilderContext.js","assets/logo.png","components/Navbar.js","containers/Home.js","components/pokemon/PokemonType.js","components/pokemon/PokemonStats.js","components/pokemon/PokemonSprite.js","components/pokemon/Pokemon.js","components/pokemon/PokemonOptions.js","components/moves/MoveCategory.js","components/moves/Move.js","components/pokemon/SelectedPokemon.js","components/moves/Moveset.js","components/moves/MovesetOptions.js","components/abilities/Ability.js","components/abilities/AbilityOptions.js","components/items/Item.js","components/items/ItemOptions.js","containers/TeamBuilder.js","containers/About.js","App.js","reportWebVitals.js","index.js"],"names":["TeamBuilderContext","React","createContext","Navbar","className","to","src","logo","alt","width","style","minWidth","exact","activeClassName","Home","PokemonType","type","getColor","PokemonStats","stats","getStatName","stat","getStatColor","getStatWidth","total","map","s","i","base_stat","length","PokemonSprite","pokemon","assign","opacity","onClick","is_legendary","is_mythical","shiny","sprites","front_shiny","front_default","height","Pokemon","context","useContext","selectPokemon","selected","name","replace","types","t","weight","gender_rate","PokemonOptions","options","id","selectionsMade","pokemons","selectionsNeeded","p","MoveCategory","category","Move","move","moveset","selectMove","damage_class","pp","power","accuracy","effect_entries","e","short_effect","effect_chance","priority","stopPropagation","href","l","toUpperCase","target","rel","SelectedPokemon","assignable","selectedPokemon","pokemonOptions","filter","assignedPokemon","find","ability","item","assignPokemon","Moveset","index","moves","m","MovesetOptions","movesets","sm","forEach","selectedMoves","Ability","effect","language","getEffects","AbilityOptions","abilities","a","Item","default","ItemOptions","items","it","TeamBuilder","loading","randomRolls","movesetOptions","abilityOptions","itemOptions","generating","generateOptions","clearChoices","exportTeam","generationProgress","About","App","apiUrl","pokemonFilter","moveFilter","abilityFilter","abilityAllow","itemFilter","itemAllow","useState","setLoading","pokemonList","setPokemonList","moveList","setMoveList","abilityList","setAbilityList","itemList","setItemList","setGenerating","setPokemonOptions","setMovesetOptions","setAbilityOptions","setItemOptions","setSelectionsMade","sectionsCompleted","setSectionsCompleted","getPokemonOptions","getMovesetOptions","getAbilityOptions","getItemOptions","setToast","success","shinyIndex","Math","round","random","getNewPokemon","axios","get","species","url","data","push","getTotalStats","currentPokemons","newPokemon","finalPokemon","floor","initialPokemon","evolution_chain","evolutions","evoChain","evoData","chain","numberOfEvolutions","nextSpecies","lastSpecies","evolves_to","hasOwnProperty","finalEvolution","Array","isArray","finalSpecies","varieties","v","split","some","keyword","includes","checkDuplicatedName","useEffect","cancel","pokemonResults","moveResults","abilityResults","itemResults","results","fetchData","getNewMoveset","newMoveset","status","statusMoves","FindKeywords","getNewAbility","currentAbilities","newAbility","getNewItem","currentItems","newItem","currentObjects","newObjectName","co","string","separator","allow","found","upperCaseWords","checkSectionCompleted","useCallback","val","sCompleted","change","warning","Object","values","every","pSelected","msAssigned","aAssigned","iAssigned","mSelected","mSelectedAmount","ms","msSelected","capitalizeWords","text","word","substring","join","title","content","toast","custom","dismiss","visible","error","Provider","value","msOptions","basename","path","exportText","navigator","clipboard","textArea","document","createElement","body","appendChild","focus","select","execCommand","err","removeChild","fallbackCopyTextToClipboard","writeText","then","copyTextToClipboard","position","reverseOrder","gutter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.51a7b9b9.chunk.js","sourcesContent":["import React from 'react';\r\n \r\nconst TeamBuilderContext = React.createContext(null);\r\n \r\nexport { TeamBuilderContext };","export default __webpack_public_path__ + \"static/media/logo.2c482028.png\";","import React from 'react';\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport logo from '../assets/logo.png';\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <>                        \r\n            <div className=\"flex justify-between items-center min-h-max w-full xs:px-0 sm:px-12 md:px-24 lg:px-48 xl:px-60 bg-white transition duration-150 ease-in-out\" >\r\n                <Link to='/'\r\n                    className=\"inline-flex items-center justify-center h-16 px-4\">\r\n                    <img src={logo} alt=\"logo\" width=\"150px\" style={{minWidth: '150px'}} />\r\n                </Link>            \r\n                <div className=\"flex justify-center h-16\">\r\n                    <NavLink exact to='/'\r\n                        className=\"inline-flex items-center justify-center h-full w-24 px-4 border-b-4 border-transparent hover:bg-gray-300 transition duration-150 ease-in-out\"\r\n                        activeClassName=\"bg-gray-300 border-gray-600\">\r\n                        <p>Home</p>\r\n                    </NavLink>\r\n                    <NavLink to='/builder' \r\n                        className=\"inline-flex items-center justify-center h-full w-32 px-4 border-b-4 border-transparent hover:bg-gray-300 transition duration-150 ease-in-out\"\r\n                        activeClassName=\"bg-gray-300 border-gray-600\">\r\n                        <p>Team Builder</p>\r\n                    </NavLink>\r\n                    <NavLink to='/about'\r\n                        className=\"inline-flex items-center justify-center h-full w-24 px-4 border-b-4 border-transparent hover:bg-gray-300 transition duration-150 ease-in-out\"\r\n                        activeClassName=\"bg-gray-300 border-gray-600\">\r\n                        <p>About</p>\r\n                    </NavLink>                \r\n                </div>\r\n            </div>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React from 'react'\r\n\r\nexport default function Home() {\r\n    return (\r\n        <div>\r\n            Home\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function PokemonType({type}) {\r\n    const getColor = () => {\r\n        switch(type) {\r\n            case 'normal': return 'bg-normal';\r\n            case 'fire': return 'bg-fire';\r\n            case 'water': return 'bg-water';\r\n            case 'grass': return 'bg-grass';\r\n            case 'electric': return 'bg-electric';\r\n            case 'ice': return 'bg-ice';\r\n            case 'fighting': return 'bg-fighting';\r\n            case 'poison': return 'bg-poison';\r\n            case 'ground': return 'bg-ground';\r\n            case 'flying': return 'bg-flying';\r\n            case 'psychic': return 'bg-psychic';\r\n            case 'bug': return 'bg-bug';\r\n            case 'rock': return 'bg-rock';\r\n            case 'ghost': return 'bg-ghost';\r\n            case 'dark': return 'bg-dark';\r\n            case 'dragon': return 'bg-dragon';\r\n            case 'steel': return 'bg-steel';\r\n            case 'fairy': return 'bg-fairy';\r\n            default: return '';\r\n        }\r\n    }\r\n\r\n    return (\r\n        <p className={`flex items-center justify-center w-16 capitalize text-sm px-1.5 py-0.5 rounded-md text-white font-semibold ${getColor()}`}>\r\n            {type}\r\n        </p>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function PokemonStats({stats}) {\r\n    const getStatName = (stat) => {\r\n        switch (stat) {\r\n            case 0: return 'HP';\r\n            case 1: return 'Atk';\r\n            case 2: return 'Def';\r\n            case 3: return 'SA';\r\n            case 4: return 'SD';\r\n            case 5: return 'Spe';\r\n            case 6: return 'Total';\r\n            default: break;\r\n        }\r\n    }\r\n\r\n    const getStatColor = (stat) => {\r\n        switch (stat) {\r\n            case 0: return 'bg-red-400';\r\n            case 1: return 'bg-yellow-500';\r\n            case 2: return 'bg-yellow-300';\r\n            case 3: return 'bg-blue-400';\r\n            case 4: return 'bg-green-400';\r\n            case 5: return 'bg-purple-400';\r\n            case 6: return 'bg-gray-300';\r\n            default: break;\r\n        }\r\n    }\r\n\r\n    const getStatWidth = (stat, total = false) => {        \r\n        if(stat <= 24 || (total && stat <= 240))\r\n            return 'w-2/12';\r\n        else if(stat <= 36 || (total && stat <= 280))\r\n            return 'w-3/12';\r\n        else if(stat <= 48 || (total && stat <= 320))\r\n            return 'w-4/12';\r\n        else if(stat <= 60 || (total && stat <= 360))\r\n            return 'w-5/12';\r\n        else if(stat <= 72 || (total && stat <= 400))\r\n            return 'w-6/12';\r\n        else if(stat <= 84 || (total && stat <= 440))\r\n            return 'w-7/12';\r\n        else if(stat <= 96 || (total && stat <= 480))\r\n            return 'w-8/12';\r\n        else if(stat <= 108 || (total && stat <= 520))\r\n            return 'w-9/12';\r\n        else if(stat <= 120 || (total && stat <= 560))\r\n            return 'w-10/12';\r\n        else if(stat <= 132 || (total && stat <= 600))\r\n            return 'w-11/12';\r\n        else\r\n            return 'w-full';            \r\n    }    \r\n\r\n    return (\r\n        <div className=\"flex flex-col justify-center items-start w-full text-sm\">\r\n            {stats.map((s, i) => {\r\n                return (\r\n                    <div key={i} className=\"flex w-full\">\r\n                        <div className=\"flex w-1/2\">\r\n                            <p className=\"w-10\">{getStatName(i)}:</p>\r\n                            <p>{s.base_stat}</p>                                        \r\n                        </div>\r\n                        <div className=\"flex w-1/2\">\r\n                            <div className={`flex ${getStatColor(i)} rounded-md my-1 ${getStatWidth(s.base_stat, (i === stats.length - 1))}`}/>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })}                            \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {GiSparkles} from 'react-icons/gi';\r\n\r\nexport default function PokemonSprite({pokemon, assign, opacity}) {\r\n    const getRarity = () => {\r\n        if(pokemon.is_legendary)\r\n            return \"bg-yellow-100 border-2 border-yellow-200 ring ring-yellow-100 animate-pulse\"\r\n        else if(pokemon.is_mythical)\r\n            return \"bg-purple-100 border-2 border-purple-200 ring ring-purple-100 animate-pulse\"\r\n        else if(pokemon.stats[6].base_stat >= 600)\r\n            return \"bg-blue-100 border-2 border-blue-200 ring ring-blue-100 animate-pulse\"\r\n        else\r\n            return 'animate-none'\r\n    }\r\n\r\n    return (                 \r\n        <div onClick={assign} \r\n            className={`relative w-24 h-24 ${opacity ? 'opacity-20' : ''} transition duration-150 ease-in-out`}>\r\n            <span className={`absolute w-24 h-24 absolute rounded-full opacity-100 ${getRarity()}`} />\r\n            {pokemon.shiny ? <GiSparkles className={`absolute right-0 w-24 h-24 absolute opacity-100 text-yellow-200 animate-pulse`} /> : null}\r\n            <img \r\n                src={pokemon.shiny ? pokemon.sprites.front_shiny : pokemon.sprites.front_default} alt=\"\" width=\"96px\" height=\"96px\"\r\n                className=\"absolute animate-wiggle\"\r\n            />            \r\n        </div>        \r\n    )\r\n}\r\n","import React from 'react'\r\nimport { TeamBuilderContext } from '../../context/TeamBuilderContext';\r\nimport PokemonType from './PokemonType';\r\nimport PokemonStats from './PokemonStats';\r\nimport PokemonSprite from './PokemonSprite';\r\nimport { FaGenderless } from 'react-icons/fa';\r\nimport { CgGenderMale, CgGenderFemale } from 'react-icons/cg';\r\n\r\nexport default function Pokemon({pokemon}) {\r\n    const context = React.useContext(TeamBuilderContext);\r\n\r\n    const getGenders = () => {\r\n        if(pokemon.gender_rate < 0)\r\n            return <FaGenderless />\r\n        else if (pokemon.gender_rate === 0)\r\n            return <CgGenderMale />\r\n        else if (pokemon.gender_rate === 8)\r\n            return <CgGenderFemale />\r\n        else \r\n            return <span className=\"flex\"><CgGenderMale /><CgGenderFemale /></span>\r\n    }    \r\n\r\n    return (\r\n        <div onClick={() => context.selectPokemon(pokemon)} \r\n            className={`animate-enter cursor-pointer flex flex-col gap-2 justify-start items-center bg-white rounded-md p-2 w-48 h-auto border-2 border-gray-200 hover:bg-gray-200 transition duration-150 ease-in-out\r\n            ${pokemon.selected ? 'bg-green-100 border-green-200 ring ring-green-100' : ''}`}>                        \r\n\r\n            <PokemonSprite pokemon={pokemon} />            \r\n\r\n            <div className=\"capitalize text-center\">{pokemon.name.replace(/-/g, \" \")} {pokemon.shiny ? 'Lv60' : 'Lv50'}</div>\r\n            <div className=\"flex justify-center items-center gap-2\">\r\n                {pokemon.types.map((t, i) => {\r\n                    return (                                    \r\n                        <PokemonType key={i} type={t.type.name} />\r\n                    )\r\n                })}                           \r\n            </div>\r\n            <PokemonStats stats={pokemon.stats}/> \r\n            <div className=\"flex w-full justify-between items-center text-xs\">\r\n                <p>{pokemon.height/10}m</p>\r\n                <p>{pokemon.weight/10}kg</p>\r\n                <p className=\"text-base\">{getGenders()}</p>\r\n            </div>                       \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { TeamBuilderContext } from '../../context/TeamBuilderContext';\r\nimport Pokemon from './Pokemon';\r\n\r\nexport default function PokemonOptions({ options }) {\r\n    const context = React.useContext(TeamBuilderContext);\r\n    \r\n    const setOptions = () => {\r\n        if (options.length) {\r\n            return (\r\n                options.map(p => (\r\n                    <Pokemon key={p.id} pokemon={p} />\r\n                ))\r\n            );\r\n        } else {\r\n            return (                \r\n                <div className=\"p-4 text-gray-300\">\r\n                    Empty\r\n                </div>            \r\n            );\r\n        }\r\n    }\r\n\r\n    // Render.\r\n    return (\r\n        <div id=\"pokemons\" className=\"flex flex-col w-full\">\r\n            <div className=\"flex justify-between items-center gap-4 text-center\">\r\n                <span className=\"flex gap-4 items-center\">\r\n                    <p className=\"text-lg\">Pokemon Options</p>\r\n                    <p className=\"text-base text-gray-300\">Select pokemons for your team.</p>\r\n                </span>\r\n                <p className=\"text-lg\">{context.selectionsMade.pokemons}/{context.selectionsNeeded.pokemons} Pokemons Selected</p>\r\n            </div>            \r\n            <div className={`flex flex-wrap justify-center items-start gap-4 p-4 w-full border-2 rounded-md border-gray-200 transition duration-150 ease-in-out\r\n                ${context.selectionsMade.pokemons >= context.selectionsNeeded.pokemons ? 'border-green-200 ring ring-green-100' : ''}`}>\r\n                {setOptions()}\r\n            </div>\r\n        </div>\r\n    );    \r\n}\r\n","import React from 'react'\r\n\r\nexport default function MoveCategory({category}) {\r\n    const getColor = () => {\r\n        switch(category){\r\n            case 'physical': return 'bg-red-600';\r\n            case 'special': return 'bg-blue-600';\r\n            case 'status': return 'bg-gray-400';\r\n            default: break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <p className={`flex items-center justify-center w-16 capitalize text-sm px-1.5 py-0.5 rounded-md text-white font-semibold ${getColor()}`}>\r\n            {category}\r\n        </p>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { TeamBuilderContext } from '../../context/TeamBuilderContext';\r\nimport PokemonType from '../pokemon/PokemonType';\r\nimport MoveCategory from './MoveCategory';\r\n\r\nexport default function Move({move, moveset}) {\r\n    const context = React.useContext(TeamBuilderContext);\r\n\r\n    const getEffects = () => {\r\n        if(move.effect_entries.length > 0) {\r\n            return move.effect_entries.map((e, i) => {\r\n                return (\r\n                    <p key={i} className=\"text-center\">\r\n                        {e.short_effect.replace('$effect_chance', move.effect_chance)} {move.priority !== 0 ? 'Priority '+move.priority : ''}\r\n                    </p>\r\n                )\r\n            })\r\n        }\r\n        else {\r\n            return (\r\n                <p className=\"text-center flex flex-col\">\r\n                    No available effect entries from PokeAPI.\r\n                    <a onClick={(e) => e.stopPropagation()} href={`https://bulbapedia.bulbagarden.net/wiki/${move.name.replace(/-/g, \" \").replace(/\\b\\w/g, l => l.toUpperCase()).replace(/ /g, \"_\")}_(move)`} target=\"_blank\" rel=\"noreferrer\"\r\n                        className=\"text-blue-400 hover:text-blue-500\">\r\n                        Check the move in Bulbapedia.\r\n                    </a>\r\n                </p>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div onClick={() => context.selectMove(move, moveset)}\r\n            className={`cursor-pointer flex flex-col gap-2 justify-start items-center bg-white rounded-md p-2 w-full h-auto border-2 border-gray-200 hover:bg-gray-200 transition duration-150 ease-in-out \r\n            ${move.selected ? 'bg-green-100 border-green-200 ring ring-green-100' : ''}`}>            \r\n            <div className=\"flex justify-between items-center w-full gap-2\">\r\n                <p className=\"capitalize\">{move.name.replace(/-/g, \" \")}</p>\r\n                <div className=\"flex justify-center gap-2\">\r\n                    <PokemonType type={move.type.name} />\r\n                    {move.damage_class ? <MoveCategory category={move.damage_class.name} /> : ''}\r\n                </div>                                \r\n            </div>\r\n            <div className=\"flex w-full gap-2 justify-between text-sm\">\r\n                <p>PP: {move.pp}</p>\r\n                <p>Pwr: {move.power ? move.power : '-'}</p>\r\n                <p>Acc: {move.accuracy ? move.accuracy : '-'}</p>                \r\n            </div>\r\n            <div className=\"flex flex-col justify-start items-center text-sm w-full\">\r\n                {getEffects()}\r\n            </div>\r\n            {/* <div className=\"flex justify-center items-center text-xs w-full gap-2\">\r\n                {move.priority !== 0 ? 'Priority: '+move.priority : ''}\r\n                {move.meta && move.meta.crit_rate !== 0 ? 'CR: '+move.meta.crit_rate : ''}\r\n            </div> */}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { TeamBuilderContext } from '../../context/TeamBuilderContext';\r\nimport PokemonSprite from './PokemonSprite'\r\n\r\nexport default function SelectedPokemon({ assignable }) {\r\n    const context = React.useContext(TeamBuilderContext);   \r\n    const selectedPokemon = context.pokemonOptions.filter(p => p.selected);      \r\n\r\n    const getAssigned = () => {\r\n        if(assignable.moveset != null)            \r\n            return selectedPokemon.find(p => p.moveset === assignable.moveset)\r\n        else if(assignable.ability != null)            \r\n            return selectedPokemon.find(p => p.ability === assignable.ability)\r\n        else if(assignable.item != null)            \r\n            return selectedPokemon.find(p => p.item === assignable.item)\r\n        else\r\n            return null;\r\n    }\r\n    let assignedPokemon = getAssigned();\r\n\r\n    const getAssignedOutside = (pokemon) => {\r\n        if(assignable.moveset != null)\r\n            return pokemon.moveset !== null;\r\n        else if (assignable.ability != null)\r\n            return pokemon.ability !== null;\r\n        else if (assignable.item != null)\r\n            return pokemon.item !== null;\r\n        else\r\n            return null;\r\n    }\r\n\r\n    const getSelectedPokemons = () => {        \r\n        if(selectedPokemon.length > 0 && !assignedPokemon) {\r\n            return selectedPokemon.map((p, i) => {\r\n                return (\r\n                    <PokemonSprite key={i} pokemon={p} assign={() => context.assignPokemon(p, assignable)}\r\n                        opacity={(assignedPokemon && p.name !== assignedPokemon.name) ||\r\n                        (!assignedPokemon && getAssignedOutside(p))}\r\n                    />\r\n                )\r\n            })            \r\n        }\r\n        else if(selectedPokemon.length > 0 && assignedPokemon) {\r\n            return <PokemonSprite pokemon={assignedPokemon} assign={() => context.assignPokemon(assignedPokemon, assignable)} />            \r\n        }\r\n        else {\r\n            return (\r\n                <div className=\"p-4 text-gray-300\">\r\n                    No selected pokemon\r\n                </div> \r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={`cursor-pointer flex flex-wrap gap-2 justify-center items-center bg-white rounded-md p-2 w-full h-auto border-2 border-gray-200 hover:bg-gray-200 transition duration-150 ease-in-out \r\n            ${assignedPokemon ? 'bg-green-100 border-green-200 ring ring-green-100' : ''}`}>\r\n            {getSelectedPokemons()}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { TeamBuilderContext } from '../../context/TeamBuilderContext';\r\nimport Move from './Move';\r\nimport SelectedPokemon from '../pokemon/SelectedPokemon';\r\n\r\nexport default function Moveset({ moveset, index }) {\r\n    const context = React.useContext(TeamBuilderContext);\r\n\r\n    const setMoves = () => {\r\n        if (moveset.length) {\r\n            return (\r\n                moveset.map(m => (\r\n                    <Move moveset={index} key={m.id} move={m} />\r\n                ))\r\n            );\r\n        } else {\r\n            return (                \r\n                <div className=\"p-4 text-gray-300\">\r\n                    Empty\r\n                </div>            \r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"animate-enter flex flex-col justify-start items-end\">\r\n            <div className=\"flex w-full justify-end items-center\">\r\n                {/* <p className=\"text-base\">{!context.pokemonOptions.find(p => p.moveset === index) ? 'No ' : ''}Pokemon Assigned</p> */}\r\n                <p className=\"text-base\">{context.selectionsMade.moves[index]}/{context.selectionsNeeded.moves} Moves Selected</p>\r\n            </div>\r\n            <div className={`flex flex-col gap-2 justify-start items-center rounded-md p-2 w-96 h-auto border-2 border-gray-200 transition duration-150 ease-in-out \r\n                ${context.selectionsMade.moves[index] >= context.selectionsNeeded.moves &&\r\n                context.pokemonOptions.find(p => p.moveset === index) ? 'border-green-200 ring ring-green-100' : ''}`}>\r\n                <SelectedPokemon assignable={{moveset: index}} />\r\n                {setMoves()}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { TeamBuilderContext } from '../../context/TeamBuilderContext';\r\nimport Moveset from './Moveset';\r\n\r\nexport default function MovesetOptions({ options }) {\r\n    const context = React.useContext(TeamBuilderContext);\r\n\r\n    const selectedMoves  = () => {\r\n        let sm = 0;        \r\n        context.selectionsMade.moves.forEach(m => {\r\n            sm = sm + m\r\n        });\r\n        return sm;\r\n    }\r\n\r\n    const setOptions = () => {\r\n        if (options.length) {\r\n            return (\r\n                options.map((m, i) => (\r\n                    <Moveset key={i} index={i} moveset={m} />\r\n                ))\r\n            );\r\n        } else {\r\n            return (                \r\n                <div className=\"p-4 text-gray-300\">\r\n                    Empty\r\n                </div>            \r\n            );\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div id=\"movesets\" className=\"flex flex-col w-full\">\r\n            <div className=\"flex justify-between items-center gap-4 text-center\">\r\n                <span className=\"flex gap-4 items-center\">\r\n                    <p className=\"text-lg\">Moveset Options</p>\r\n                    <p className=\"text-base text-gray-300\">Assign your selected pokemons to a moveset and select their moves.</p>\r\n                </span>\r\n                <span className=\"flex gap-4 items-center\">\r\n                    <p className=\"text-lg\">{context.selectionsMade.movesets}/{context.selectionsNeeded.movesets} Pokemons Assigned</p>\r\n                    {/* <p className=\"text-lg\">{selectedMoves()}/{context.selectionsNeeded.movesets * context.selectionsNeeded.moves} Moves Selected</p> */}\r\n                </span>\r\n            </div>            \r\n            <div className={`flex flex-wrap justify-center items-start gap-4 p-4 w-full border-2 rounded-md border-gray-200 transition duration-150 ease-in-out\r\n                ${context.selectionsMade.movesets >= context.selectionsNeeded.movesets && \r\n                selectedMoves() >= context.selectionsNeeded.movesets * context.selectionsNeeded.moves ? 'border-green-200 ring ring-green-100' : ''}`}>\r\n                {setOptions()}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { TeamBuilderContext } from '../../context/TeamBuilderContext';\r\nimport SelectedPokemon from '../pokemon/SelectedPokemon';\r\n\r\nexport default function Ability({ability, index}) {\r\n    const context = React.useContext(TeamBuilderContext);\r\n    const selected = context.pokemonOptions.find(p => p.ability === index);\r\n\r\n    const getEffects = () => {\r\n        const effect = ability.effect_entries.find(e => e.language.name === 'en');\r\n        if(effect) {            \r\n            return (\r\n                <p className=\"text-center\">\r\n                    {effect.short_effect}\r\n                </p>\r\n            )            \r\n        }\r\n        else {\r\n            return (\r\n                <p className=\"text-center flex flex-col\">\r\n                    No available effect entries from PokeAPI.\r\n                    <a onClick={(e) => e.stopPropagation()} href={`https://bulbapedia.bulbagarden.net/wiki/${ability.name.replace(/-/g, \" \").replace(/\\b\\w/g, l => l.toUpperCase()).replace(/ /g, \"_\")}_(Ability)`} target=\"_blank\" rel=\"noreferrer\"\r\n                        className=\"text-blue-400 hover:text-blue-500\">\r\n                        Check the ability in Bulbapedia.\r\n                    </a>\r\n                </p>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"animate-enter flex flex-col justify-start items-end\">\r\n            {/* <div className=\"flex w-full justify-start items-center\">\r\n                <p className=\"text-base\">{!selected ? 'No ' : ''}Pokemon Assigned</p>\r\n            </div> */}\r\n            <div className={`flex flex-col gap-2 justify-start items-center rounded-md p-2 w-96 h-auto border-2 border-gray-200 transition duration-150 ease-in-out  \r\n                ${selected ? 'border-green-200 ring ring-green-100' : ''}`}>            \r\n                <SelectedPokemon assignable={{ability: index}} />\r\n                <div className={`flex flex-col gap-2 justify-start items-center bg-white rounded-md p-2 w-full h-auto border-2 border-gray-200 transition duration-150 ease-in-out \r\n                    ${selected ? 'bg-green-100 border-green-200 ring ring-green-100' : ''}`}>\r\n                    <div className=\"flex justify-center items-center w-full gap-2\">\r\n                        <p className=\"capitalize\">{ability.name.replace(/-/g, \" \")}</p>                \r\n                    </div>            \r\n                    <div className=\"flex flex-col justify-start items-center text-sm w-full\">\r\n                        {getEffects()}\r\n                    </div>            \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { TeamBuilderContext } from '../../context/TeamBuilderContext';\r\nimport Ability from './Ability';\r\n\r\nexport default function AbilityOptions({options}) {\r\n    const context = React.useContext(TeamBuilderContext);\r\n\r\n    const setOptions = () => {\r\n        if (options.length) {\r\n            return (\r\n                options.map((a, i) => (\r\n                    <Ability key={i} index={i} ability={a} />\r\n                ))                \r\n            );\r\n        } else {\r\n            return (                \r\n                <div className=\"p-4 text-gray-300\">\r\n                    Empty\r\n                </div>            \r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div id=\"abilities\" className=\"flex flex-col w-full\">\r\n            <div className=\"flex justify-between items-center gap-4 text-center\">\r\n                <span className=\"flex gap-4 items-center\">\r\n                    <p className=\"text-lg\">Ability Options</p>\r\n                    <p className=\"text-base text-gray-300\">Assign your selected pokemons to an ability.</p>\r\n                </span>\r\n                <span className=\"flex gap-4 items-center\">\r\n                    <p className=\"text-lg\">{context.selectionsMade.abilities}/{context.selectionsNeeded.abilities} Pokemons Assigned</p>                    \r\n                </span>\r\n            </div>            \r\n            <div className={`flex flex-wrap justify-center items-start gap-4 p-4 w-full border-2 rounded-md border-gray-200 transition duration-150 ease-in-out\r\n                ${context.selectionsMade.abilities >= context.selectionsNeeded.abilities ? 'border-green-200 ring ring-green-100' : ''}`}>\r\n                {setOptions()}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { TeamBuilderContext } from '../../context/TeamBuilderContext';\r\nimport SelectedPokemon from '../pokemon/SelectedPokemon';\r\n\r\nexport default function Item({item, index}) {\r\n    const context = React.useContext(TeamBuilderContext);\r\n    const selected = context.pokemonOptions.find(p => p.item === index);\r\n\r\n    const getEffects = () => {\r\n        const effect = item.effect_entries.find(e => e.language.name === 'en');\r\n        if(effect) {            \r\n            return (\r\n                <p className=\"text-center\">\r\n                    {effect.short_effect}\r\n                    {/* {effect.short_effect.split(\".\").filter(e => {\r\n                            return!e.includes(\"Breeding:\") && !e.includes(\"Traded on\") && !e.includes(\"Held by\")\r\n                        }).map(e => {\r\n                            return e.replace(\" Gen V: Also removes\", \",\").replace(\"Held: \", \"\");\r\n                        })} */}                    \r\n                </p>\r\n            )            \r\n        }\r\n        else {\r\n            return (\r\n                <p className=\"text-center flex flex-col\">\r\n                    No available effect entries from PokeAPI.\r\n                    {/* <a onClick={(e) => e.stopPropagation()} href={`https://bulbapedia.bulbagarden.net/wiki/${ability.name.replace(/-/g, \" \").replace(/\\b\\w/g, l => l.toUpperCase()).replace(/ /g, \"_\")}_(Ability)`} target=\"_blank\" rel=\"noreferrer\"\r\n                        className=\"text-blue-400 hover:text-blue-500\">\r\n                        Check the item in Bulbapedia.\r\n                    </a> */}\r\n                </p>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"animate-enter flex flex-col justify-start items-end\">\r\n            {/* <div className=\"flex w-full justify-start items-center\">\r\n                <p className=\"text-base\">{!selected ? 'No ' : ''}Pokemon Assigned</p>\r\n            </div> */}\r\n            <div className={`flex flex-col gap-2 justify-start items-center rounded-md p-2 w-96 h-auto border-2 border-gray-200 transition duration-150 ease-in-out  \r\n                ${selected ? 'border-green-200 ring ring-green-100' : ''}`}>            \r\n                <SelectedPokemon assignable={{item: index}} />\r\n                <div className={`flex flex-col gap-2 justify-start items-center bg-white rounded-md p-2 w-full h-auto border-2 border-gray-200 transition duration-150 ease-in-out \r\n                    ${selected ? 'bg-green-100 border-green-200 ring ring-green-100' : ''}`}>                    \r\n                    <div className=\"flex justify-center items-center w-full gap-2\">\r\n                        <img src={item.sprites.default} alt=\"\" width=\"30px\" height=\"30px\"/>\r\n                        <p className=\"capitalize\">{item.name.replace(/-/g, \" \")}</p>                \r\n                    </div>            \r\n                    <div className=\"flex flex-col justify-start items-center text-sm w-full\">\r\n                        {getEffects()}\r\n                    </div>            \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { TeamBuilderContext } from '../../context/TeamBuilderContext';\r\nimport Item from './Item';\r\n\r\nexport default function ItemOptions({options}) {\r\n    const context = React.useContext(TeamBuilderContext);\r\n\r\n    const setOptions = () => {\r\n        if (options.length) {\r\n            return (\r\n                options.map((it, i) => (\r\n                    <Item key={i} index={i} item={it} />\r\n                ))                \r\n            );\r\n        } else {\r\n            return (                \r\n                <div className=\"p-4 text-gray-300\">\r\n                    Empty\r\n                </div>            \r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div id=\"items\" className=\"flex flex-col w-full\">\r\n            <div className=\"flex justify-between items-center gap-4 text-center\">\r\n                <span className=\"flex gap-4 items-center\">\r\n                    <p className=\"text-lg\">Item Options</p>\r\n                    <p className=\"text-base text-gray-300\">Assign your selected pokemons to an item.</p>\r\n                </span>\r\n                <span className=\"flex gap-4 items-center\">\r\n                    <p className=\"text-lg\">{context.selectionsMade.items}/{context.selectionsNeeded.items} Pokemons Assigned</p>                    \r\n                </span>\r\n            </div>            \r\n            <div className={`flex flex-wrap justify-center items-start gap-4 p-4 w-full border-2 rounded-md border-gray-200 transition duration-150 ease-in-out\r\n                ${context.selectionsMade.items >= context.selectionsNeeded.items ? 'border-green-200 ring ring-green-100' : ''}`}>\r\n                {setOptions()}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport PokemonOptions from '../components/pokemon/PokemonOptions';\r\nimport MovesetOptions from '../components/moves/MovesetOptions';\r\nimport AbilityOptions from '../components/abilities/AbilityOptions';\r\nimport ItemOptions from '../components/items/ItemOptions';\r\nimport { BiLoaderAlt, BiExport } from 'react-icons/bi';\r\n\r\nexport default function TeamBuilder({\r\n    loading, randomRolls, pokemonOptions, movesetOptions, abilityOptions, itemOptions, generating, generateOptions, clearChoices, exportTeam\r\n    }) {   \r\n\r\n    const getControls = () => {\r\n        if(loading || generating){\r\n            return (                \r\n                <p className=\"flex gap-4 items-center justify-center text-lg p-4 border-2 border-transparent\">\r\n                    <BiLoaderAlt className=\"animate-spin text-2xl\" />\r\n                    {loading ? 'Fetching data from PokeAPI' : (generating ? generationProgress() : 'Generate Options')}\r\n                </p>                \r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <>\r\n                    <button type=\"button\" onClick={() => clearChoices()}\r\n                        className=\"animate-enter flex items-center justify-center p-4 rounded-md bg-white hover:bg-gray-200 border-2 border-gray-200 w-48 transition duration-150 ease-in-out\">\r\n                        Clear Choices\r\n                    </button>\r\n                    <button type=\"button\" onClick={() => generateOptions()}\r\n                        className=\"animate-enter flex items-center justify-center p-4 rounded-md bg-white border-2 border-gray-200 w-48 hover:bg-gray-200 transition duration-150 ease-in-out\">\r\n                        Generate Options\r\n                    </button>\r\n                    <button type=\"button\" onClick={() => exportTeam()}\r\n                        className=\"animate-enter relative flex items-center justify-center p-4 rounded-md bg-white hover:bg-gray-200 border-2 border-gray-200 w-48 transition duration-150 ease-in-out\">\r\n                        Export Team\r\n                        {/* <div className=\"absolute right-2 rounded-full bg-green-100 p-1 text-2xl\"><BiExport className=\"text-green-300\" /></div> */}\r\n                    </button>\r\n                </>\r\n            )\r\n        }        \r\n    }\r\n    \r\n    const generationProgress = () => {\r\n        if(pokemonOptions.length < randomRolls.pokemons)\r\n            return `Generating Pokemons (${pokemonOptions.length}/${randomRolls.pokemons})`;   \r\n        else if(movesetOptions.length < randomRolls.movesets)\r\n            return `Generating Movesets (${movesetOptions.length}/${randomRolls.movesets})`;\r\n        else if(abilityOptions.length < randomRolls.abilities)\r\n            return `Generating Abilities (${abilityOptions.length}/${randomRolls.abilities})`;\r\n        else if(itemOptions.length < randomRolls.items)\r\n            return `Generating Items (${itemOptions.length}/${randomRolls.items})`;\r\n        else\r\n            return 'Done!';\r\n    }    \r\n\r\n    return (           \r\n        <div className=\"flex flex-col gap-8 justify-start items-center p-8 w-full\">  \r\n            <div id=\"controls\" className=\"flex flex-col w-full\">\r\n                <div className=\"flex justify-start items-center gap-4 text-center\">                    \r\n                    <p className=\"text-lg\">Controls</p>\r\n                    <p className=\"text-base text-gray-300\">Actions for building your team.</p>\r\n                </div>            \r\n                <div className=\"flex flex-col justify-start items-center gap-4 p-4 w-full border-2 rounded-md border-gray-200\">\r\n                    <div className=\"flex flex-wrap justify-center items-center gap-4\">\r\n                        {getControls()}\r\n                    </div>                                                                       \r\n                </div>                                                            \r\n            </div>\r\n            <PokemonOptions options={pokemonOptions} />\r\n            <MovesetOptions options={movesetOptions} />  \r\n            <AbilityOptions options={abilityOptions} />   \r\n            <ItemOptions options={itemOptions} />        \r\n\r\n        </div>                    \r\n    )\r\n}","import React from 'react'\r\n\r\nexport default function About() {\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React, {useState, useEffect, useCallback} from 'react';\r\nimport axios from 'axios';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport toast, { Toaster } from 'react-hot-toast';\r\nimport { TeamBuilderContext } from './context/TeamBuilderContext';\r\nimport Navbar from './components/Navbar';\r\nimport Home from './containers/Home';\r\nimport TeamBuilder from './containers/TeamBuilder';\r\nimport About from './containers/About';\r\n\r\nexport default function App() {\r\n  // Constants.\r\n  const apiUrl = 'https://pokeapi.co/api/v2/';\r\n  const pokemonCount = 898;\r\n  const moveCount = 826;\r\n  const abilityCount = 267;\r\n  const itemCount = 115;\r\n  const itemOffset = 189;\r\n  const randomRolls = {\r\n    pokemons: 9,\r\n    movesets: 6,\r\n    moves: 6,\r\n    abilities: 9,\r\n    items: 9\r\n  };\r\n\r\n  // Filters\r\n  const pokemonFilter = [ // Exclude pokemons with this keywords.\r\n    // Legendaries: forms above 720 total stats.\r\n    'eternamax', 'primal', 'ultra',\r\n    // General: forms as strong as legendaries, weaker than a fully evolved pokemon.\r\n    'mega', 'gmax', 'eternal', 'ash', 'solo',\r\n    // Others.\r\n    'totem'\r\n  ];\r\n  const moveFilter = [ // Exclude moves with this keywords.\r\n    // General: max and z moves.\r\n    'max', 'physical', 'special',\r\n    // Specific z moves.\r\n    'catastropika', 'moonsault', 'raid', '000', 'sparksurfer', 'evoboost', 'pancake', 'genesis', 'operetta', 'stormshards',\r\n    'forever', 'soulblaze', 'guardian', 'sunraze', 'moonraze', 'burns', 'stealing'\r\n  ];\r\n  const moveStatusLimit = 3; // Max number of status moves in a moveset.\r\n  const abilityFilter = [ // Exclude abilities with this keywords.\r\n    // Unusable abilities.\r\n    'run', 'stance', 'sweet', 'one', 'telepathy', 'harvest', 'honey', 'forecast', 'battle', 'rks',\r\n    'gulp', 'receiver', 'gift', 'zen', 'aroma', 'illuminate', 'klutz', 'construct', 'face', 'hunger',\r\n    'alchemy', 'battery', 'ball', 'plus', 'minus', 'shields', 'star', 'schooling', 'truant'\r\n  ];\r\n  const abilityAllow = [ // Include abilities with this keywords even when excluded by filter.    \r\n    'armor', \r\n  ];\r\n  const itemFilter = [ // Exclude items with this keywords.\r\n    // Group items.\r\n    'power', 'deep', 'scale', 'scarf', 'ball', 'powder', 'orb',\r\n    // Specific items.\r\n    'heat', 'smooth', 'icy', 'damp', 'protector', 'clay', 'destiny', 'punch', 'stick', 'reaper',\r\n    'luck', 'egg', 'pure', 'coin', 'everstone', 'disc', 'magmarizer', 'electirizer', 'macho', 'exp',\r\n    'cleanse', 'grip', 'sludge', 'thick', 'dew', 'soothe', 'grade', 'sticky'\r\n  ];\r\n  const itemAllow = [ // Include items with this keywords even when excluded by filter.    \r\n    'herb', 'choice', 'bright', 'silver', 'life'\r\n  ];\r\n\r\n  // State.\r\n  const [loading, setLoading] = useState(true);\r\n  const [pokemonList, setPokemonList] = useState([]);\r\n  const [moveList, setMoveList] = useState([]);\r\n  const [abilityList, setAbilityList] = useState([]);  \r\n  const [itemList, setItemList] = useState([]);  \r\n  const [generating, setGenerating] = useState(false);\r\n  const [pokemonOptions, setPokemonOptions] = useState([]);\r\n  const [movesetOptions, setMovesetOptions] = useState([]);\r\n  const [abilityOptions, setAbilityOptions] = useState([]);\r\n  const [itemOptions, setItemOptions] = useState([]);\r\n  const [selectionsNeeded] = useState({\r\n    pokemons: 6,    \r\n    movesets: 6,\r\n    moves: 4,\r\n    abilities: 6,\r\n    items: 6\r\n  });\r\n  const [selectionsMade, setSelectionsMade] = useState({\r\n    pokemons: 0,\r\n    movesets: 0,\r\n    moves: [0, 0, 0, 0, 0, 0],\r\n    abilities: 0,\r\n    items: 0\r\n  });\r\n  const [sectionsCompleted, setSectionsCompleted] = useState({\r\n    pokemons: false,\r\n    movesets: false,\r\n    moves: false,\r\n    abilities: false,\r\n    items: false\r\n  });\r\n\r\n  // Fetch lists from api on mount.\r\n  useEffect (() => {\r\n    let cancel = false;\r\n    setLoading(true);  \r\n\r\n    async function fetchData() {      \r\n      const pokemonResults = await axios.get(`${apiUrl}pokemon?limit=${pokemonCount}`);\r\n      const moveResults = await axios.get(`${apiUrl}move?limit=${moveCount}`);\r\n      const abilityResults = await axios.get(`${apiUrl}ability?limit=${abilityCount}`);\r\n      const itemResults = await axios.get(`${apiUrl}item?limit=${itemCount}&offset=${itemOffset}`);\r\n      if(!cancel) {\r\n        setPokemonList(pokemonResults.data.results);\r\n        setMoveList(moveResults.data.results);\r\n        setAbilityList(abilityResults.data.results);\r\n        setItemList(itemResults.data.results);\r\n        setLoading(false);              \r\n      }\r\n    };\r\n    fetchData();\r\n    \r\n    return () => cancel = true;\r\n  }, []);\r\n\r\n  // Get a new set of options.\r\n  async function generateOptions() {\r\n    setGenerating(true);\r\n    setPokemonOptions([]);\r\n    setMovesetOptions([]); \r\n    setAbilityOptions([]);\r\n    setItemOptions([]);\r\n\r\n    await getPokemonOptions();\r\n    await getMovesetOptions();\r\n    await getAbilityOptions();\r\n    await getItemOptions();\r\n\r\n    setGenerating(false);   \r\n    setToast('Controls', 'Options generated, build your team!', {success: true});\r\n  }\r\n\r\n  // Get a set of pokemon options.  \r\n  async function getPokemonOptions() {    \r\n    if(pokemonList.length) { \r\n      let pokemons = [];                           \r\n      let shinyIndex = Math.round((Math.random()*100 / 12.5));\r\n\r\n      for (let index = 0; index < randomRolls.pokemons; index++) {\r\n        const pokemon = await getNewPokemon(pokemons)\r\n        const species = await axios.get(pokemon.species.url);\r\n        pokemon.gender_rate = species.data.gender_rate;\r\n        pokemon.is_mythical = species.data.is_mythical;\r\n        pokemon.is_legendary = species.data.is_legendary;        \r\n        pokemon.stats.push({name: 'total', base_stat: getTotalStats(pokemon.stats)});\r\n        pokemon.shiny = (index === shinyIndex);\r\n        pokemon.selected = false;\r\n        pokemon.moveset = null;\r\n        pokemon.ability = null;\r\n        pokemon.item = null;\r\n\r\n        pokemons.push(pokemon);\r\n        setPokemonOptions([...pokemons]); \r\n      }                 \r\n    }   \r\n  }\r\n\r\n  // Get a new pokemon option.\r\n  async function getNewPokemon(currentPokemons) {    \r\n    let newPokemon = '';\r\n    let finalPokemon = '';\r\n\r\n    do {                \r\n        let pokemon = pokemonList[Math.floor(Math.random()*pokemonList.length)];\r\n        //console.log('initial: '+pokemon.name);\r\n\r\n        const initialPokemon = await axios.get(`${apiUrl}pokemon/${pokemon.name}`);\r\n        const species = await axios.get(initialPokemon.data.species.url);\r\n        const evolutions = await axios.get(species.data.evolution_chain.url);\r\n        \r\n        // Get an array of evolutions.\r\n        let evoChain = [];\r\n        let evoData = evolutions.data.chain;\r\n        do {                        \r\n            // Current.\r\n            evoChain.push(evoData.species.name);            \r\n            let numberOfEvolutions = evoData['evolves_to'].length;  \r\n                                  \r\n            // Branching evolutions.\r\n            if(numberOfEvolutions > 1) {\r\n              let nextSpecies = [];\r\n              let lastSpecies = [];\r\n              for (let i = 0; i < numberOfEvolutions; i++) {                  \r\n                nextSpecies.push(evoData.evolves_to[i].species.name);\r\n                \r\n                // Branch continuation.\r\n                if(evoData.evolves_to[i].hasOwnProperty('evolves_to') && evoData.evolves_to[i].evolves_to.length > 0)\r\n                  lastSpecies.push(evoData.evolves_to[i].evolves_to[0].species.name);\r\n              }\r\n              evoChain.push(nextSpecies);\r\n\r\n              if(lastSpecies.length > 0)\r\n              evoChain.push(lastSpecies);\r\n              \r\n              // Stop the chain, all branching evolutions are symmetrical.\r\n              evoData = null;\r\n            }\r\n            else {                \r\n              // Evolution.\r\n              evoData = evoData['evolves_to'][0];\r\n            }\r\n                      \r\n        } while (!!evoData && evoData.hasOwnProperty('evolves_to')); \r\n        //console.log('evolutions: '+evoChain);       \r\n        \r\n        // Get the/a final evolution.\r\n        let finalEvolution = evoChain[evoChain.length - 1];\r\n        if(Array.isArray(finalEvolution)){\r\n          finalEvolution = finalEvolution[Math.floor(Math.random()*finalEvolution.length)];        \r\n        }\r\n        //console.log('final evolution: '+finalEvolution);\r\n\r\n        // Get the varieties for the final evolution.\r\n        const finalSpecies = await axios.get(`${apiUrl}pokemon-species/${finalEvolution}`);\r\n        let varieties = [];\r\n        finalSpecies.data.varieties.forEach((v, i) => {\r\n          varieties.push(finalSpecies.data.varieties[i].pokemon.name)\r\n        });                \r\n        //console.log('final evolution varieties: '+varieties);\r\n\r\n        // Filter varieties for more balance.\r\n        varieties = varieties.filter(v => {          \r\n          return !v.split('-').some(keyword => pokemonFilter.includes(keyword))\r\n        });\r\n        //console.log('filtered varieties: '+varieties);        \r\n\r\n        // Get the final pokemon from the varieties.\r\n        finalPokemon = varieties[Math.floor(Math.random()*varieties.length)];\r\n        //console.log('final pokemon: '+finalPokemon);\r\n\r\n    } while (checkDuplicatedName(currentPokemons, finalPokemon))    \r\n    newPokemon = await axios.get(`${apiUrl}pokemon/${finalPokemon}`);\r\n    return newPokemon.data\r\n  };    \r\n\r\n  // Get total stats for a pokemon.\r\n  const getTotalStats = (stats) => {\r\n    let total = 0;\r\n    stats.forEach(s => {\r\n        total = total + s.base_stat; \r\n    });        \r\n    return total;\r\n  }   \r\n\r\n  // Get a set of moveset options.  \r\n  async function getMovesetOptions() {    \r\n    if(moveList.length) {           \r\n      let movesets = [];            \r\n\r\n      for (let index = 0; index < randomRolls.movesets; index++) {\r\n        const moveset = await getNewMoveset()\r\n        movesets.push(moveset);\r\n        setMovesetOptions([...movesets]); \r\n      }                 \r\n    }   \r\n  }\r\n\r\n  // Get a new moveset option.\r\n  async function getNewMoveset() {    \r\n    let newMoveset = [];\r\n    let move = '';\r\n    let status = false;\r\n    let statusMoves = 0;    \r\n    \r\n    for (let index = 0; index < randomRolls.moves; index++) {            \r\n      do{        \r\n        move = moveList[Math.floor(Math.random()*moveList.length)];\r\n        move = await axios.get(`${apiUrl}move/${move.name}`);\r\n        status = move.data.damage_class && move.data.damage_class.name === 'status';        \r\n      } while (checkDuplicatedName(newMoveset, move.data.name) || FindKeywords(move.data.name, '-', moveFilter) ||\r\n              (status && statusMoves >= moveStatusLimit))\r\n      move.data.selected = false;\r\n      newMoveset.push(move.data);      \r\n      if(status){\r\n        statusMoves = statusMoves + 1;\r\n        status = false;\r\n      }\r\n      //console.log(move.data.name);\r\n      //console.log(statusMoves);\r\n    }\r\n    //console.log('----- done -----');\r\n    return newMoveset;\r\n  }\r\n\r\n  // Get a set of ability options.\r\n  async function getAbilityOptions() {\r\n    if(abilityList.length) {           \r\n      let abilities = [];            \r\n\r\n      for (let index = 0; index < randomRolls.abilities; index++) {\r\n        const ability = await getNewAbility(abilities);\r\n        abilities.push(ability);\r\n        setAbilityOptions([...abilities]); \r\n      }                 \r\n    }\r\n  }\r\n\r\n  // Get a new ability option.\r\n  async function getNewAbility(currentAbilities) {    \r\n    let newAbility = '';       \r\n   \r\n    do{        \r\n      let ability = abilityList[Math.floor(Math.random()*abilityList.length)];      \r\n      newAbility = await axios.get(`${apiUrl}ability/${ability.name}`);            \r\n    } while (checkDuplicatedName(currentAbilities, newAbility.data.name) || FindKeywords(newAbility.data.name, '-', abilityFilter, abilityAllow))\r\n    //console.log(newAbility.data.name);\r\n\r\n    return newAbility.data;\r\n  }\r\n\r\n  // Get a set of item options.\r\n  async function getItemOptions() {\r\n    if(itemList.length) {           \r\n      let items = [];            \r\n\r\n      for (let index = 0; index < randomRolls.items; index++) {\r\n        const item = await getNewItem(items);\r\n        items.push(item);\r\n        setItemOptions([...items]); \r\n      }                 \r\n    }\r\n  }\r\n\r\n  // Get a new ability option.\r\n  async function getNewItem(currentItems) {    \r\n    let newItem = '';       \r\n   \r\n    do{        \r\n      let item = itemList[Math.floor(Math.random()*itemList.length)];      \r\n      newItem = await axios.get(`${apiUrl}item/${item.name}`);            \r\n    } while (checkDuplicatedName(currentItems, newItem.data.name) || FindKeywords(newItem.data.name, '-', itemFilter, itemAllow))\r\n    //console.log(newItem.data.name);\r\n\r\n    return newItem.data;\r\n  }\r\n\r\n  // Check for duplicate names in an array of objects.\r\n  const checkDuplicatedName = (currentObjects, newObjectName) => {\r\n    return currentObjects.find(co => co.name === newObjectName)\r\n  }\r\n\r\n  // Filter.\r\n  const FindKeywords = (string, separator, filter, allow) => {\r\n    let found = false;\r\n    found = string.split(separator).some(keyword => filter.includes(keyword))\r\n    if(found && allow)\r\n      found = !string.split(separator).some(keyword => allow.includes(keyword))\r\n    return found;\r\n  }\r\n\r\n  // Select a pokemon.\r\n  const selectPokemon = (pokemon) => {\r\n    let change = false;\r\n    let options = pokemonOptions;\r\n    options = options.map(p => {\r\n      if(p.name === pokemon.name){\r\n        if(p.selected) {      \r\n          p.selected = false;\r\n          p.moveset = null;\r\n          p.ability = null;\r\n          p.item = null;          \r\n          change = true;\r\n        }\r\n        else if(!p.selected && selectionsMade.pokemons < selectionsNeeded.pokemons) {\r\n          p.selected = true;\r\n          change = true;\r\n        }\r\n        else {\r\n          setToast('Pokemon Options', `Only ${selectionsNeeded.pokemons} pokemons can be selected.`, {warning: true});\r\n        }\r\n      }\r\n      return p;\r\n    })\r\n    if(change){\r\n      setPokemonOptions(options); \r\n    }\r\n  }   \r\n\r\n  // Select a move.\r\n  const selectMove = (move, moveset) => {  \r\n    let change = false;  \r\n    let msOptions = movesetOptions;    \r\n    msOptions[moveset] = msOptions[moveset].map(m => {\r\n      if(m.name === move.name){\r\n        if(m.selected){      \r\n          m.selected = false;\r\n          change = true;\r\n        }\r\n        else if(!m.selected && selectionsMade.moves[moveset] < selectionsNeeded.moves){\r\n          m.selected = true;\r\n          change = true;\r\n        }\r\n        else {\r\n          setToast('Moveset Options', `Only ${selectionsNeeded.moves} moves can be selected in a moveset.`, {warning: true});\r\n        }\r\n      }\r\n      return m;\r\n    });\r\n    if(change){\r\n      setMovesetOptions([...msOptions]);\r\n    }\r\n  }\r\n\r\n  // Assign a pokemon to a moveset, ability or item.\r\n  const assignPokemon = (pokemon, assignable) => {\r\n    let change = false;\r\n    let pokemons = pokemonOptions;\r\n    pokemons = pokemons.map(p => {\r\n      if(p.name === pokemon.name){\r\n        if(assignable.moveset != null){\r\n          if(p.moveset !== assignable.moveset)\r\n            p.moveset = assignable.moveset;\r\n          else\r\n            p.moveset = null;\r\n          change = true;\r\n        }\r\n        else if(assignable.ability != null){\r\n          if(p.ability !== assignable.ability)\r\n            p.ability = assignable.ability;\r\n          else\r\n            p.ability = null;\r\n          change = true;\r\n        }\r\n        else if(assignable.item != null){\r\n          if(p.item !== assignable.item)\r\n            p.item = assignable.item;\r\n          else\r\n            p.item = null;\r\n          change = true;\r\n        }\r\n      }\r\n      else{\r\n        if(assignable.moveset != null){\r\n          if(p.moveset === assignable.moveset) {\r\n            p.moveset = null;\r\n            change = true;\r\n            setToast('Moveset Options',\r\n            `Assigned ${upperCaseWords(pokemon.name)} instead of ${upperCaseWords(p.name)} to moveset ${assignable.moveset+1}.`,\r\n            {warning: true});\r\n          }\r\n        }\r\n        if(assignable.ability != null){\r\n          if(p.ability === assignable.ability) {\r\n            p.ability = null;\r\n            change = true;\r\n            setToast('Ability Options',\r\n            `Assigned ${upperCaseWords(pokemon.name)} instead of ${upperCaseWords(p.name)} to ability ${upperCaseWords(abilityOptions[assignable.ability].name)}.`,\r\n            {warning: true});\r\n          }\r\n        }\r\n        if(assignable.item != null){\r\n          if(p.item === assignable.item) {\r\n            p.item = null;\r\n            change = true;\r\n            setToast('Item Options',\r\n            `Assigned ${upperCaseWords(pokemon.name)} instead of ${upperCaseWords(p.name)} to item ${upperCaseWords(itemOptions[assignable.item].name)}.`,\r\n            {warning: true});\r\n          }\r\n        }\r\n      }\r\n      return p;\r\n    })\r\n    if(change){   \r\n      setPokemonOptions(pokemons);\r\n    }\r\n  }  \r\n\r\n  const upperCaseWords = (string) => {\r\n    return string.replace(/\\b\\w/g, l => l.toUpperCase())\r\n  }\r\n\r\n  // Clear all selections and assignments.\r\n  const clearChoices = () => {\r\n    const choicesMade = Object.values(selectionsMade).some(val => Array.isArray(val) ? val.some(i => i) : val);\r\n    if(choicesMade){\r\n      let options = pokemonOptions;\r\n      options = options.map(p => {      \r\n        p.selected = false;\r\n        p.moveset = null;\r\n        p.ability = null;\r\n        p.item = null;                  \r\n        return p;\r\n      });\r\n      setPokemonOptions(options);\r\n \r\n      let msOptions = movesetOptions;    \r\n      msOptions.forEach(ms => {\r\n        ms = ms.map(m => {   \r\n          m.selected = false;\r\n          return m;\r\n        });\r\n      });          \r\n      setMovesetOptions([...msOptions]);\r\n\r\n      setToast('Controls', 'Choices cleared, start again!', {success: true});\r\n    }\r\n    else {\r\n      setToast('Controls', 'There are no choices to clear.', {warning: true});\r\n    }\r\n  }\r\n\r\n  // Manage completed sections.\r\n  const checkSectionCompleted = useCallback((string, val) => {\r\n    let sCompleted = sectionsCompleted;\r\n    let change = false;\r\n    switch(string){\r\n      case 'pokemons':\r\n        if(!sCompleted.pokemons && val >= selectionsNeeded.pokemons){\r\n          sCompleted.pokemons = true;\r\n          change = true;\r\n          setToast('Pokemon Options', `All ${selectionsNeeded.pokemons} pokemons have been selected.`, {success: true});\r\n        }\r\n        else if(sCompleted.pokemons && val < selectionsNeeded.pokemons){\r\n          sCompleted.pokemons = false;\r\n          change = true;\r\n          setToast('Pokemon Options', `There must be ${selectionsNeeded.pokemons} pokemons selected.`, {warning: true});\r\n        }\r\n        break;\r\n      case 'movesets':\r\n        if(!sCompleted.movesets && val >= selectionsNeeded.movesets){\r\n          sCompleted.movesets = true;\r\n          change = true;\r\n          setToast('Moveset Options', `All ${selectionsNeeded.movesets} pokemons have been assigned to a moveset.`, {success: true});\r\n        }\r\n        else if(sCompleted.movesets && val < selectionsNeeded.movesets){\r\n          sCompleted.movesets = false;\r\n          change = true;\r\n          setToast('Moveset Options', `There must be ${selectionsNeeded.movesets} pokemons assigned to a moveset.`, {warning: true});\r\n        }\r\n        break;\r\n      case 'moves':\r\n        if(!sCompleted.moves && val >= selectionsNeeded.movesets * selectionsNeeded.moves){\r\n          sCompleted.moves = true;\r\n          change = true;\r\n          setToast('Moveset Options', `All ${selectionsNeeded.movesets * selectionsNeeded.moves} moves have been selected.`, {success: true});    \r\n        }\r\n        else if(sCompleted.moves && val < selectionsNeeded.movesets * selectionsNeeded.moves){\r\n          sCompleted.moves = false;\r\n          change = true;\r\n          setToast('Moveset Options', `There must be ${selectionsNeeded.movesets * selectionsNeeded.moves} moves selected.`, {warning: true});    \r\n        }\r\n        break;\r\n      case 'abilities':\r\n        if(!sCompleted.abilities && val >= selectionsNeeded.abilities){\r\n          sCompleted.abilities = true;\r\n          change = true;\r\n          setToast('Ability Options', `All ${selectionsNeeded.abilities} pokemons have been assigned to an ability.`, {success: true});\r\n        }\r\n        else if(sCompleted.abilities && val < selectionsNeeded.abilities){\r\n          sCompleted.abilities = false;\r\n          change = true;\r\n          setToast('Ability Options', `There must be ${selectionsNeeded.abilities} pokemons assigned to an ability.`, {warning: true});\r\n        }\r\n        break;\r\n      case 'items':\r\n        if(!sCompleted.items && val >= selectionsNeeded.items){\r\n          sCompleted.items = true;\r\n          change = true;\r\n          setToast('Item Options', `All ${selectionsNeeded.items} pokemons have been assigned to an item.`, {success: true});\r\n        }\r\n        else if(sCompleted.items && val < selectionsNeeded.items){\r\n          sCompleted.items = false;\r\n          change = true;\r\n          setToast('Item Options', `There must be ${selectionsNeeded.items} pokemons assigned to an item.`, {warning: true});\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    if(change){\r\n      setSectionsCompleted(sCompleted);\r\n      if(Object.values(sCompleted).every(val => val))\r\n        setToast('Team Builder', `Team completely built, export your team!`, {success: true});\r\n    }\r\n  }, [sectionsCompleted, selectionsNeeded]);\r\n\r\n  // Respond to changes in slections/assignments for pokemon, movesets, abilities and items.\r\n  useEffect (() => {\r\n    let pSelected = 0;\r\n    let msAssigned = 0;    \r\n    let aAssigned = 0;\r\n    let iAssigned = 0;\r\n\r\n    pokemonOptions.forEach(p => {\r\n      if(p.selected)\r\n        pSelected = pSelected + 1;\r\n      if(p.moveset != null)\r\n        msAssigned = msAssigned + 1;\r\n      if(p.ability != null)\r\n        aAssigned = aAssigned + 1;\r\n      if(p.item != null)\r\n        iAssigned = iAssigned + 1;\r\n    });    \r\n    \r\n    checkSectionCompleted('pokemons', pSelected);\r\n    checkSectionCompleted('movesets', msAssigned);\r\n    checkSectionCompleted('abilities', aAssigned);\r\n    checkSectionCompleted('items', iAssigned);\r\n\r\n    setSelectionsMade(s => { return {\r\n      ...s,\r\n      pokemons: pSelected,\r\n      movesets: msAssigned,\r\n      abilities: aAssigned,\r\n      items: iAssigned\r\n    }});\r\n  }, [pokemonOptions, checkSectionCompleted]); \r\n\r\n  // Respond to changes in selections for moves.\r\n  useEffect (() => {\r\n    let mSelected = [];\r\n    let mSelectedAmount = 0;\r\n\r\n    movesetOptions.forEach(ms => {\r\n      let msSelected = ms.filter(m => m.selected).length;\r\n      mSelected.push(msSelected);\r\n      mSelectedAmount = mSelectedAmount + msSelected;\r\n    });\r\n\r\n    checkSectionCompleted('moves', mSelectedAmount);\r\n\r\n    setSelectionsMade(s => {return {...s, moves: mSelected}});\r\n  }, [movesetOptions, checkSectionCompleted]);  \r\n\r\n  // Create an export of the team.\r\n  const exportTeam = () => {\r\n    if(Object.values(sectionsCompleted).every(val => val)) {\r\n      let exportText = \"\";         \r\n      pokemonOptions.forEach(p => {\r\n        if(p.selected){\r\n          let moveset = movesetOptions[p.moveset].filter(m => m.selected).map(m => {return m.name});\r\n          exportText += capitalizeWords(p.name, \"-\");\r\n          exportText += \" @ \" + capitalizeWords(itemOptions[p.item].name, \"-\");\r\n          exportText += \"\\r\\nAbility: \" + capitalizeWords(abilityOptions[p.ability].name, \"-\");\r\n          exportText += \"\\r\\n\" + (p.shiny ? \"Level: 60\\r\\nShiny: Yes\" : \"Level: 50\");\r\n          exportText += \"\\r\\n- \" + capitalizeWords(moveset[0], \"-\");\r\n          exportText += \"\\r\\n- \" + capitalizeWords(moveset[1], \"-\");\r\n          exportText += \"\\r\\n- \" + capitalizeWords(moveset[2], \"-\");\r\n          exportText += \"\\r\\n- \" + capitalizeWords(moveset[3], \"-\");    \r\n          exportText += \"\\r\\n\\r\\n\";                             \r\n        }\r\n      });\r\n      copyTextToClipboard(exportText);      \r\n    }\r\n    else {\r\n      setToast('Controls', 'The team is not completely built!', {warning: true});      \r\n    }\r\n  }\r\n\r\n  const capitalizeWords = (text, separator) => {\r\n    return text.split(separator).map((word) => {return word[0].toUpperCase() + word.substring(1)}).join(\" \");\r\n  }\r\n\r\n  // Copy the exported team t clipboard.\r\n  function fallbackCopyTextToClipboard(text) {\r\n    var textArea = document.createElement(\"textarea\");\r\n    textArea.value = text;\r\n    document.body.appendChild(textArea);\r\n    textArea.focus();\r\n    textArea.select();  \r\n    try {\r\n      var successful = document.execCommand(\"copy\");\r\n      if(successful)\r\n        setToast('Controls', 'Team copied to clipboard!', {success: true});      \r\n      else\r\n        setToast('Controls', 'Error copying the team to clipboard!', {error: true});\r\n    } catch (err) {\r\n      setToast('Controls', 'Unable to copy the team to clipboard!', {error: true});\r\n    }  \r\n    document.body.removeChild(textArea);\r\n  }\r\n  function copyTextToClipboard(text) {\r\n    if (!navigator.clipboard) {\r\n      fallbackCopyTextToClipboard(text);\r\n      return;\r\n    }\r\n    navigator.clipboard.writeText(text).then(\r\n      function() {\r\n        setToast('Controls', 'Team copied to clipboard!', {success: true});\r\n      },\r\n      function(err) {\r\n        setToast('Controls', 'Error copying the team to clipboard!', {error: true});\r\n      }\r\n    );\r\n  }\r\n\r\n  // Show a toast notification.\r\n  const setToast = (title, content, type) => {    \r\n    toast.custom((t) => (\r\n      <div onClick={() => toast.dismiss(t.id)}\r\n        className={`cursor-pointer max-w-md w-full flex flex-col gap-2 bg-white p-2 rounded-md pointer-events-auto flex border-2 border-gray-200 hover:bg-gray-200 transition duration-150 ease-in-out \r\n        ${t.visible ? 'animate-enter' : 'animate-leave'}\r\n        ${type.success ? 'bg-green-100 border-green-200 ring ring-green-100' : ''}\r\n        ${type.warning ? 'bg-yellow-100 border-yellow-200 ring ring-yellow-100' : ''}\r\n        ${type.error ? 'bg-red-200 border-red-300 ring ring-red-200' : ''}`}\r\n      >\r\n        <div className=\"flex justify-between items-center w-full\">\r\n          <p className=\"text-base capitalize\">{title}</p>\r\n          {/* <HiOutlineX className=\"cursor-pointer text-2xl hover:text-gray-600\" onClick={() => toast.dismiss(t.id)}/> */}\r\n        </div>          \r\n        <div className=\"flex text-sm\">\r\n          <p>{content}</p>\r\n        </div>\r\n      </div>\r\n    ));\r\n  }\r\n\r\n  // Render.\r\n  return (        \r\n    <TeamBuilderContext.Provider value={{\r\n      pokemonOptions: pokemonOptions,\r\n      selectionsNeeded: selectionsNeeded,\r\n      selectionsMade: selectionsMade,\r\n      selectPokemon: selectPokemon,\r\n      selectMove: selectMove,\r\n      assignPokemon: assignPokemon\r\n    }}>\r\n      <div className=\"bg-gray-100 min-h-screen\">\r\n        <Router basename=\"/React-Procedural-Pokemon\">           \r\n          <div className=\"flex flex-col\">\r\n            <Navbar />             \r\n            <Switch>          \r\n              <Route path=\"/about\">\r\n                <About />\r\n              </Route>\r\n              <Route path=\"/builder\">        \r\n                <TeamBuilder\r\n                  loading={loading}\r\n                  randomRolls={randomRolls}\r\n                  pokemonOptions={pokemonOptions}\r\n                  movesetOptions={movesetOptions}\r\n                  abilityOptions={abilityOptions}\r\n                  itemOptions={itemOptions}\r\n                  generating={generating}\r\n                  generateOptions={generateOptions}                \r\n                  clearChoices={clearChoices}\r\n                  exportTeam={exportTeam}\r\n                />\r\n              </Route>\r\n              <Route path=\"/\">\r\n                <Home />\r\n              </Route>          \r\n            </Switch>\r\n          </div> \r\n        </Router>      \r\n      </div>\r\n      <Toaster\r\n        position=\"bottom-right\"\r\n        reverseOrder={false}\r\n        gutter={8}\r\n      />\r\n    </TeamBuilderContext.Provider>\r\n  );\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}