{"version":3,"sources":["constants/api.js","constants/filters.js","constants/usability.js","constants/team.js","context/TeamBuilderContext.js","assets/logo.png","components/Sidebar.js","components/Footer.js","containers/Home.js","containers/Format.js","components/pokemon/PokemonType.js","constants/tooltips.js","components/pokemon/PokemonStats.js","components/pokemon/PokemonSprite.js","components/pokemon/Pokemon.js","components/pokemon/PokemonOptions.js","components/moves/MoveCategory.js","components/TooltipTags.js","components/moves/Move.js","components/pokemon/SelectedPokemon.js","components/moves/Moveset.js","components/moves/MovesetOptions.js","components/abilities/Ability.js","components/abilities/AbilityOptions.js","components/items/Item.js","components/items/ItemOptions.js","containers/TeamBuilder.js","containers/About.js","components/Tooltips.js","App.js","reportWebVitals.js","index.js"],"names":["url","topPokemonCountOffset","itemCountOffset","pokemonFilter","pokemonAllow","moveFilter","moveAllow","abilityFilter","abilityAllow","itemFilter","itemAllow","chargeMoves","bindMoves","drainMoves","terrainMoves","barrierMoves","orbMoves","punchMoves","multistrikeMoves","recoilMoves","biteMoves","pulseMoves","soundMoves","healMoves","contactMoves","consumableItemMoves","badItemMoves","badAbilityMoves","terrainAbilities","orbAbilities","consumableItemAbilities","consumableItems","plateItems","memoryItems","randomOptions","pokemons","movesets","moves","abilities","items","selectionsNeeded","topPokemonTotalStatsThreshold","statRanges","hp","general","total","TeamBuilderContext","React","createContext","Sidebar","location","useLocation","context","useContext","className","to","src","logo","alt","width","style","minWidth","exact","activeClassName","pathname","smooth","Object","values","sectionsCompleted","every","val","Footer","braveado","href","target","rel","pokeapi","Home","useEffect","document","title","showdown","id","Format","PokemonType","type","size","getColor","pokemon","effects","getStatName","stat","getStatColor","getStatPercentage","range","input","PokemonStats","stats","nature","statStep","getStatStep","statRange","statPercent","map","s","i","increased","name","decreased","length","pokemonTooltips","base_stat","marginTop","calculated_stat","ev","iv","PokemonSprite","assign","opacity","types","onClick","is_legendary","is_mythical","shiny","sprites","front_default","front_shiny","height","e","stopPropagation","species","replace","l","toUpperCase","highestStats","statIndex","percentage","t","Pokemon","selectPokemon","selected","level","gender","getGenders","weight","PokemonOptions","options","selectionsMade","p","MoveCategory","category","TooltipTags","effect","formattedEffect","toLowerCase","tooltipData","effectTooltips","forEach","data","key","includes","match","RegExp","push","d","split","getTooltips","Move","move","moveset","effect_entries","effect_chance","meta","crit_rate","priority","concat","formatEffect","find","language","short_effect","selectMove","damage_class","moveTooltips","pp","power","accuracy","SelectedPokemon","assignable","selectedPokemon","pokemonOptions","filter","assignedPokemon","ability","item","assignPokemon","Moveset","index","m","MovesetOptions","sm","selectedMoves","Ability","AbilityOptions","a","Item","join","default","ItemOptions","it","TeamBuilder","loading","movesetOptions","abilityOptions","itemOptions","generating","generateOptions","clearChoices","exportTeam","generationProgress","Tools","Tooltips","ReactTooltip","rebuild","formatTooltipData","header","content","c","delayShow","getContent","dataTip","App","useState","setLoading","pokemonList","setPokemonList","topPokemonList","setTopPokemonList","moveList","setMoveList","abilityList","setAbilityList","itemList","setItemList","typeList","setTypeList","natureList","setNatureList","setGenerating","generationStep","setGenerationStep","setPokemonOptions","setMovesetOptions","setAbilityOptions","setItemOptions","movesetsPerType","usableTypes","reverseOptions","optionsData","setOptionsData","setSelectionsMade","setSectionsCompleted","cancel","axios","get","api","pokemonResults","topPokemonResults","results","apply","moveResults","abilityResults","itemResults","typeResults","natureResults","fetchData","shinyIndex","Math","floor","random","team","topPokemon","checkTopPokemon","getNewPokemon","gender_rate","FindKeywords","increased_stat","decreased_stat","sort","b","getTotalStats","currentPokemons","newPokemon","finalPokemon","isTopPokemon","initialPokemon","evolution_chain","evolutions","evoChain","evoData","chain","numberOfEvolutions","nextSpecies","lastSpecies","evolves_to","hasOwnProperty","finalEvolution","Array","isArray","finalSpecies","varieties","v","filters","checkDuplicatedName","getPokemonOptions","getPokemonUsability","useCallback","getRandomPokemonType","exclude","getNewMoveset","newMoveset","status","statusMoves","usable","combo","getMovesetOptions","msPerType","msInType","ms","uTypes","getPokemonTypeUsability","getMovesetTypeUsability","getTypeFromEffect","keyword","getMovesetTypeUsabilityForItems","currentItems","itemsOfType","ci","mt","getSpecificOptionsUsabilityForItems","maxOptions","mo","getMoveMechanicUsability","mechanic","exactMoves","moveNames","usability","getAbilityMechanicUsability","exactAbilities","abilityNames","getReverseOption","getNewAbility","currentAbilities","newAbility","getAbilityOptions","rOptions","opt","itemType","getNewItem","newItem","getItemOptions","setToast","success","checkSectionCompleted","string","sCompleted","change","warning","pSelected","msAssigned","aAssigned","iAssigned","mSelected","mSelectedAmount","msSelected","getStatDisplay","currentObjects","newObjectName","co","separator","allow","found","some","capitalizeWords","text","word","substring","upperCaseWords","toast","custom","dismiss","visible","error","Provider","value","msOptions","basename","path","exportText","slice","navigator","clipboard","textArea","createElement","body","appendChild","focus","select","execCommand","err","removeChild","fallbackCopyTextToClipboard","writeText","then","copyTextToClipboard","position","reverseOrder","gutter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d7346a19.chunk.js","sourcesContent":["const url = 'https://pokeapi.co/api/v2/';\r\nconst pokemonCount = 898;\r\nconst topPokemonCountOffset = [\r\n    [8, 143], [9, 242], [3, 286], [16, 370], [3, 442], \r\n    [15, 479], [3, 632], [11, 637], [3, 703], [6, 715], \r\n    [1, 745], [2, 771], [11, 781], [3, 799], [3, 806],\r\n    [14, 884]\r\n];\r\nconst moveCount = 826;\r\nconst abilityCount = 267;\r\nconst itemCountOffset = [\r\n    [2, 111], [115, 189], [1, 441], [4, 256], [24, 581], \r\n    [2, 666], [9, 678], [1, 727], [1, 831], [23, 844]\r\n];\r\nconst typeCount = 18;\r\nconst natureCount = 25;\r\n\r\nexport {\r\n    url, \r\n    pokemonCount, topPokemonCountOffset,\r\n    moveCount, \r\n    abilityCount, \r\n    itemCountOffset,\r\n    typeCount, \r\n    natureCount\r\n}","// Pokemon\r\nconst pokemonFilter = [ // Exclude pokemons with this keywords.\r\n// Legendary forms above 720 total stats.\r\n'eternamax', 'primal', 'ultra',\r\n// General forms as strong as legendaries.\r\n'mega', 'gmax', 'eternal', 'ash',\r\n// Pokemons and forms below 360 total stats.\r\n'solo', 'shedinja', 'smeargle', 'ditto', 'delibird', 'luvdisc', 'unown', 'meltan',\r\n// Others.\r\n'totem', 'bond', 'zygarde', 'phione'\r\n];\r\nconst pokemonAllow = [ // Include pokemons with this keywords even when excluded by filter.\r\n// Zygarde forms\r\n'10', '50', 'complete'\r\n];\r\n\r\n// Moves\r\nconst moveFilter = [ // Exclude moves with this keywords.\r\n// General max and z moves.\r\n'max', 'physical', 'special',\r\n// Specific z moves.\r\n'catastropika', 'moonsault', 'raid', '000', 'sparksurfer', 'evoboost', 'pancake', 'genesis', 'operetta', 'stormshards',\r\n'forever', 'soulblaze', 'guardian', 'sunraze', 'moonraze', 'burns', 'stealing',\r\n// Unusable in format.\r\n'natural', 'stuff', 'teatime', 'happy', 'belch', 'return', 'frustration', 'gear', 'spotlight', 'helping', 'aromatic',\r\n'coaching', 'wide-guard', 'veevee', 'quash', 'magnetic', 'decorate', \r\n// No effect.\r\n'splash', 'celebrate', 'hands', 'struggle',    \r\n// BRANCH LOGIC. All accounted for.\r\n// Combo moves.\r\n//'stockpile', 'swallow', 'spit',     \r\n// Held items.\r\n//'techno', 'judgement',\r\n// Specific pokemons.\r\n//'hyperspace'\r\n// REVERSE BRANCH LOGIC. All accounted for.\r\n// Need lost or consumed held items to work.\r\n//'recycle',  \r\n];\r\nconst moveAllow = [ // Include moves with this keywords even when excluded by filter.\r\n'bug', 'grind', 'shift'\r\n];\r\n\r\n// Abilities\r\nconst abilityFilter = [ // Exclude abilities with this keywords.\r\n// Unusable in format.\r\n'illuminate', 'run', 'plus', 'minus', 'gluttony', 'honey', 'unnerve', 'healer', 'friend', 'harvest',\r\n'telepathy', 'star', 'cheek', 'battery', 'receiver', 'alchemy', 'ball', 'ripen', 'spot',\r\n'medicine', 'one', 'symbiosis',\r\n// Unusable with info.\r\n'anticipation', 'forewarn', 'frisk',\r\n// Filtered pokemon forms specific.\r\n'schooling',          \r\n// BRANCH LOGIC. All accounted for.\r\n// Pokemon forms specific.\r\n//'zen', 'stance', 'shields', 'bond', 'construct', 'face', 'hunger', 'gulp', \r\n// Move mechanic. \r\n// 'iron-fist', 'skill-link', 'reckless', 'strong-jaw', 'mega-launcher', 'liquid-voice', 'punk-rock', 'triage',\r\n// 'tough-claws', 'unseen-fist',    \r\n// Move type.\r\n// 'flash-fire', 'overgrow', 'blaze', 'torrent', 'swarm', 'scrappy', 'sand-force', 'gale-wings', \r\n// 'dark-aura', 'fairy-aura', 'steelworker', 'transistor', 'dragons-maw',\r\n// Move type changes.\r\n// 'normalize', 'refrigerate', 'pixilate', 'galvanize', 'aerilate',\r\n// Specific pokemons.\r\n//'multitype', 'rks',\r\n// Harmful to owner.\r\n//'truant', 'stall', 'klutz', 'slow', 'defeatist',\r\n// REVERSE BRANCH LOGIC. All accounted for.\r\n// Need lost or consumed held items to work.\r\n// 'pickup', 'unburden', 'pickpocket', 'magician',\r\n];  \r\nconst abilityAllow = [ // Include abilities with this keywords even when excluded by filter.\r\n//\r\n];\r\n\r\n// Items\r\nconst itemFilter = [ // Exclude items with this keywords.\r\n// Unusable in format.\r\n'power', 'scarf', 'smoke', 'macho', 'exp', 'soothe', 'coin', 'cleanse', 'egg', 'luck',\r\n'pure', 'ability', \r\n// Evolution related or filtered pokemon specific.    \r\n'deep', 'scale', 'powder', 'everstone', 'grade', 'punch', 'protector', 'disc', 'magmarizer', 'electirizer', \r\n'reaper', 'whipped', 'sachet', 'light',    \r\n// BRANCH LOGIC. All accounted for.\r\n// Pokemon specific.\r\n// 'dew', 'thick', 'stick'\r\n// Move or ability mechanic.\r\n//'heat', 'smooth', 'icy', 'damp', 'sludge', 'clay', 'orb', \r\n// Harmful to user.\r\n//'full', 'lagging', 'sticky', 'target', 'iron'\r\n];\r\nconst itemAllow = [ // Include items with this keywords even when excluded by filter.    \r\n'herb', 'choice', 'bright', 'silver', 'silk', 'clay'\r\n];\r\n\r\nexport {\r\n    pokemonFilter, pokemonAllow, \r\n    moveFilter, moveAllow, \r\n    abilityFilter, abilityAllow,\r\n    itemFilter, itemAllow\r\n}","// Moves.\r\nconst chargeMoves = [ // Power herb.\r\n'bounce', 'dig', 'dive', 'fly', 'freeze-shock', 'geomancy', 'ice-burn', 'meteor-beam', 'phantom-force', 'razor-wind',\r\n'shadow-force', 'skull-bash', 'sky-attack', 'solar-beam', 'solar-blade'\r\n];\r\nconst bindMoves = [ // Grip claw, binding band.\r\n'bind', 'clamp', 'fire-spin', 'infestation', 'magma-storm', 'sand-tomb', 'snap-trap', 'thunder-cage', 'whirlpool', 'wrap'\r\n];\r\nconst drainMoves = [ // Big root.\r\n'absorb', 'bouncy-bubble', 'drain-punch', 'draining-kiss', 'dream-eater', 'giga-drain', 'horn-leech', 'leech-life', 'leech-seed',\r\n'mega-drain', 'oblivion-wing', 'parabolic-charge', 'strength-sap', 'ingrain', 'aqua-ring'\r\n];\r\nconst terrainMoves = [ // Terrain extender.\r\n'electric-terrain', 'grassy-terrain', 'misty-terrain', 'psychic-terrain'\r\n];\r\nconst barrierMoves = [ // Light clay.\r\n'light-screen', 'reflect', 'aurora-veil'\r\n];  \r\nconst orbMoves = [ // Toxic and flame orb.\r\n'facade', 'psycho-shift'\r\n];\r\nconst punchMoves = [ // Iron fist.\r\n'bullet-punch', 'comet-punch', 'dizzy-punch', 'double-iron-bash', 'drain-punch', 'dynamic-punch', 'fire-punch', 'focus-punch',\r\n'hammer-arm', 'ice-hammer', 'ice-punch', 'mach-punch', 'mega-punch', 'meteor-mash', 'plasma-fists', 'power-up-punch',\r\n'shadow-punch', 'sky-uppercut', 'thunder-punch'\r\n];\r\nconst multistrikeMoves = [ // Skill link.\r\n'arm-thrust', 'barrage', 'bone-rush', 'bullet-seed', 'comet-punch', 'double-slap', 'fury-attack', 'fury-swipes', 'icicle-spear',\r\n'pin-missile', 'rock-blast', 'scale-shot', 'spike-cannon', 'tail-slap', 'triple-axel', 'triple-kick', 'water-shuriken'\r\n];\r\nconst recoilMoves = [ // Reckless.\r\n'brave-bird', 'double-edge', 'flare-blitz', 'head-charge', 'head-smash', 'high-jump-kick', 'jump-kick', 'submission', 'take-down',\r\n'wild-charge', 'light-of-ruin', 'volt-tackle', 'wood-hammer'\r\n];\r\nconst biteMoves = [ // Strong jaw.\r\n'bite', 'crunch', 'fire-fang', 'fishious-rend', 'hyper-fang', 'ice-fang', 'jaw-lock', 'poison-fang', 'psychic-fangs', 'thunder-fang'\r\n];\r\nconst pulseMoves = [ // Mega launcher.\r\n'aura-sphere', 'dark-pulse', 'dragon-pulse', 'heal-pulse', 'origin-pulse', 'terrain-pulse', 'water-pulse'\r\n];\r\nconst soundMoves = [ // Liquid voice.\r\n'boomburst', 'bug-buzz', 'chatter', 'clanging-scales', 'disarming-voice', 'echoed-voice', 'eerie-spell', 'hyper-voice',\r\n'overdrive', 'relic-song', 'round', 'snarl', 'snore', 'uproar'\r\n];\r\nconst healMoves = [ // Triage.\r\n'draining-kiss', 'floral-healing', 'giga-drain', 'rest', 'synthesis', 'absorb', 'drain-punch', 'dream-eater', 'heal-order',\r\n'heal-pulse', 'healing-wish', 'horn-leech', 'leech-life', 'lunar-dance', 'mega-drain', 'milk-drink', 'moonlight', 'morning-sun',\r\n'oblivion-wing', 'parabolic-charge', 'purify', 'recover', 'roost', 'shore-up', 'slack-off', 'soft-boiled', 'strength-sap',\r\n'swallow', 'wish'\r\n];\r\nconst contactMoves = [ // Tough claws, unseen fist.\r\n'accelerock', 'acrobatics', 'aerial-ace', 'anchor-shot', 'aqua-jet', 'aqua-tail', 'arm-thrust', 'assurance', 'astonish', 'avalanche', \r\n'behemoth-bash', 'behemoth-blade', 'bide', 'bind', 'bite', 'blaze-kick', 'body-press', 'body-slam', 'bolt-beak', 'bolt-strike', 'bounce', 'branch-poke', 'brave-bird', 'breaking-swipe', 'brick-break', 'brutal-swing', 'bug-bite', 'bullet-punch',\r\n'chip-away', 'circle-throw', 'clamp', 'close-combat', 'comet-punch', 'constrict', 'counter', 'covet', 'crabhammer', 'cross-chop', 'cross-poison', 'crunch', 'crush-claw', 'crush-grip', 'cut',\r\n'darkest-lariat', 'dig', 'dive', 'dizzy-punch', 'double-edge', 'double-hit', 'double-iron-bash', 'double-kick', 'double-slap', 'dragon-ascent', 'dragon-claw', 'dragon-hammer', 'dragon-rush', 'dragon-tail', 'draining-kiss', 'drain-punch', 'drill-peck', 'drill-run', 'dual-chop', 'dual-wingbeat', 'dynamic-punch',\r\n'endeavor', 'extreme-speed',\r\n'facade', 'fake-out', 'false-surrender', 'false-swipe', 'feint-attack', 'fell-stinger', 'fire-fang', 'fire-lash', 'fire-punch', 'first-impression', 'fishious-rend', 'flail', 'flame-charge', 'flame-wheel', 'flare-blitz', 'flip-turn', 'floaty-fall', 'fly', 'flying-press', 'focus-punch', 'force-palm', 'foul-play', 'frustration', 'fury-attack', 'fury-cutter', 'fury-swipes',\r\n'gear-grind', 'giga-impact', 'grass-knot', 'grassy-glide', 'guillotine', 'gyro-ball',\r\n'hammer-arm', 'headbutt', 'head-charge', 'head-smash', 'heart-stamp', 'heat-crash', 'heavy-slam', 'high-horsepower', 'high-jump-kick', 'hold-back', 'horn-attack', 'horn-drill', 'horn-leech', 'hyper-fang',\r\n'ice-ball', 'ice-fang', 'ice-hammer', 'ice-punch', 'infestation', 'iron-head', 'iron-tail',\r\n'jaw-lock', 'jump-kick', \r\n'karate-chop', 'knock-off', \r\n'lash-out', 'last-resort', 'leaf-blade', 'leech-life', 'lick', 'liquidation', 'low-kick', 'low-sweep', 'lunge',\r\n'mach-punch', 'megahorn', 'mega-kick', 'mega-punch', 'metal-claw', 'meteor-mash', 'multi-attack', \r\n'needle-arm', 'night-slash', 'nuzzle', \r\n'outrage', \r\n'payback', 'peck', 'petal-dance', 'phantom-force', 'plasma-fists', 'play-rough', 'pluck', 'poison-fang', 'poison-jab', 'poison-tail', 'pound', 'power-trip', 'power-up-punch', 'power-whip', 'psychic-fangs', 'punishment', 'pursuit', \r\n'quick-attack', \r\n'rage', 'rapid-spin', 'razor-shell', 'retaliate', 'return', 'revenge', 'reversal', 'rock-climb', 'rock-smash', 'rolling-kick', 'rollout', \r\n'sacred-sword', 'scratch', 'seismic-toss', 'shadow-claw', 'shadow-force', 'shadow-punch', 'shadow-sneak', 'shadow-strike', 'sizzly-slide', 'skitter-smack', 'skull-bash', 'sky-drop', 'sky-uppercut', 'slam', 'slash', 'smart-strike', 'smelling-salts', 'snap-trap', 'solar-blade', 'spark', 'spectral-thief', 'spirit-break', 'steamroller', 'steel-roller', 'steel-wing', 'stomp', 'stomping-tantrum', 'storm-throw', 'strength', 'struggle', 'submission', 'sucker-punch', 'sunsteel-strike', 'super-fang', 'superpower', 'surging-strikes', \r\n'tackle', 'tail-slap', 'take-down', 'thief', 'thrash', 'throat-chop', 'thunder-fang', 'thunderous-kick', 'thunder-punch', 'triple-axel', 'triple-kick', 'trop-kick', 'trump-card', \r\n'u-turn', \r\n'v-create',\r\n'veevee-volley', 'vine-whip', 'vise-grip', 'vital-throw', 'volt-tackle',\r\n'wake-up-slap', 'waterfall', 'wicked-blow', 'wild-charge', 'wing-attack', 'wood-hammer', 'wrap', 'wring-out', \r\n'x-scissor',\r\n'zen-headbutt', 'zing-zap', 'zippy-zap'\r\n];\r\nconst consumableItemMoves = [ // Consumable items. Reverse branch logic trigger.\r\n'recycle'\r\n];\r\nconst badItemMoves = [ // Bad items.\r\n'bestow', 'fling', 'switcheroo', 'trick'\r\n];\r\nconst badAbilityMoves = [ // Bad abilities.\r\n'entrainment', 'skill-swap'\r\n];\r\n\r\n// Abilities.\r\nconst terrainAbilities = [ // Terrain extender.\r\n'electric-surge', 'grassy-surge', 'misty-surge', 'psychic-surge'\r\n];\r\nconst orbAbilities = [ // Toxic and flame orb.\r\n'guts', 'magic-guard', 'quick-feet', 'marvel-scale'\r\n];\r\nconst consumableItemAbilities = [ // Consumable items. Reverse branch logic trigger.\r\n'pickup', 'unburden', 'pickpocket', 'magician'\r\n];  \r\n\r\n// Items.\r\nconst consumableItems = [ // Consumable items. Reverse branch logic.\r\n'absorb-bulb', 'air-balloon', 'cell-battery', 'eject-button' ,'electric-seed', 'focus-sash', 'grassy-seed',\r\n'luminous-moss', 'mental-herb', 'misty-seed', 'power-herb', 'psychic-seed', 'red-card', 'white-herb', 'snowball', 'weakness-policy',\r\n'bug-gem', 'dark-gem', 'dragon-gem', 'electric-gem', 'fairy-gem', 'fighting-gem', 'fire-gem', 'flying-gem',\r\n'ghost-gem', 'grass-gem', 'ground-gem', 'ice-gem', 'poison-gem', 'psychic-gem', 'rock-gem', 'steel-gem', 'water-gem'\r\n];  \r\nconst plateItems = [ // Plate items. Reverse branch logic.\r\n'draco-plate', 'dread-plate', 'earth-plate', 'fist-plate', 'flame-plate', 'icicle-plate', 'insect-plate', 'iron-plate',\r\n'meadow-plate', 'mind-plate', 'pixie-plate', 'sky-plate', 'splash-plate', 'spooky-plate', 'stone-plate', 'toxic-plate', 'zap-plate'\r\n];  \r\nconst memoryItems = [ // Memory items. Reverse branch logic.\r\n'bug-memory', 'dark-memory', 'dragon-memory', 'electric-memory', 'fairy-memory', 'fighting-memory', 'fire-memory', 'flying-memory',\r\n'ghost-memory', 'grass-memory', 'ground-memory', 'ice-memory', 'poison-memory', 'psychic-memory', 'rock-memory', 'steel-memory', 'water-memory'\r\n];\r\n\r\nexport {\r\n    bindMoves, biteMoves, pulseMoves, punchMoves, soundMoves, chargeMoves, contactMoves, multistrikeMoves,\r\n    barrierMoves, healMoves, drainMoves, recoilMoves, terrainMoves,\r\n    orbMoves, badAbilityMoves, badItemMoves, consumableItemMoves,\r\n    terrainAbilities, orbAbilities, consumableItemAbilities,\r\n    plateItems, memoryItems, consumableItems\r\n}","const randomOptions = {\r\npokemons: 9,\r\nmovesets: 6,\r\nmoves: 6,\r\nabilities: 9,\r\nitems: 9\r\n};\r\nconst selectionsNeeded = {\r\npokemons: 6,    \r\nmovesets: 6,\r\nmoves: 4,\r\nabilities: 6,\r\nitems: 6\r\n};\r\n\r\nconst topPokemonBalance = 1; // Number of top pokemon generated (legendary / mythical / high stats). \r\nconst topPokemonTotalStatsThreshold = 600; // Total stats for a normal pokemon to count as top.\r\nconst moveStatusLimit = 3; // Max number of status moves in a moveset.\r\n\r\nconst statRanges = {\r\nhp: [120, 280],\r\ngeneral: [40, 200],\r\ntotal: [360, 680],\r\n};\r\n\r\nexport {\r\n    randomOptions, selectionsNeeded,\r\n    topPokemonBalance, topPokemonTotalStatsThreshold, moveStatusLimit,\r\n    statRanges,\r\n}","import React from 'react';\r\n \r\nconst TeamBuilderContext = React.createContext(null);\r\n \r\nexport { TeamBuilderContext };","export default __webpack_public_path__ + \"static/media/logo.1e1593df.png\";","import React from 'react'\r\nimport { Link, NavLink, useLocation } from \"react-router-dom\";\r\nimport { HashLink } from 'react-router-hash-link';\r\nimport { TeamBuilderContext } from '../context/TeamBuilderContext';\r\nimport logo from '../assets/logo.png';\r\nimport { FaCheck, FaCopy } from \"react-icons/fa\";\r\n\r\nexport default function Sidebar() {\r\n    const location = useLocation();\r\n    const context = React.useContext(TeamBuilderContext);\r\n\r\n    return (\r\n        <div className=\"min-w-max h-screen sticky top-0 bg-white\">\r\n            <div className=\"w-48 flex justify-center items-center py-8\">\r\n                <Link to='/'>\r\n                    <img src={logo} alt=\"logo\" width=\"160px\" style={{minWidth: '160px'}} />\r\n                </Link> \r\n            </div>\r\n            <div className=\"flex flex-col w-full justify-start items-center\">\r\n                <NavLink exact to='/'\r\n                    className=\"inline-flex items-center justify-left text-lg w-full pl-8 py-2 border-r-4 border-transparent hover:bg-gray-300 transition duration-150 ease-in-out\"\r\n                    activeClassName=\"bg-gray-300 border-gray-600\">\r\n                    <p>Home</p>\r\n                </NavLink>                \r\n                <div className=\"flex flex-col items-left justify-center w-full\">\r\n                    <NavLink to='/builder'\r\n                        className=\"w-full text-lg pl-8 py-2 border-r-4 border-transparent hover:bg-gray-300 transition duration-150 ease-in-out\"\r\n                        activeClassName=\"bg-gray-300 border-gray-600\">\r\n                        <p>Team Builder</p>\r\n                    </NavLink>\r\n                    {location.pathname === \"/builder\" ? <div className=\"flex flex-col\">\r\n                        <HashLink smooth to=\"/builder#controls\"\r\n                            className=\"w-full flex justify-between items-center pr-4 pl-12 py-1 border-r-4 border-transparent hover:bg-gray-300 transition duration-150 ease-in-out\">\r\n                            <p>Actions</p>\r\n                            {Object.values(context.sectionsCompleted).every(val => val) ? <FaCopy className=\"text-green-400 animate-enter\" /> : null}\r\n                        </HashLink>\r\n                        <HashLink smooth to=\"/builder#pokemon\"\r\n                            className=\"w-full flex justify-between items-center pr-4 pl-12 py-1 border-r-4 border-transparent hover:bg-gray-300 transition duration-150 ease-in-out\">\r\n                            <p>Pokémon</p>\r\n                            {context.sectionsCompleted.pokemons ? <FaCheck className=\"text-green-400 animate-enter\" /> : null}\r\n                        </HashLink>\r\n                        <HashLink smooth to=\"/builder#movesets\"\r\n                            className=\"w-full flex justify-between items-center pr-4 pl-12 py-1 border-r-4 border-transparent hover:bg-gray-300 transition duration-150 ease-in-out\">\r\n                            <p>Movesets</p>\r\n                            {context.sectionsCompleted.movesets && context.sectionsCompleted.moves ? <FaCheck className=\"text-green-400 animate-enter\" /> : null}\r\n                        </HashLink>\r\n                        <HashLink smooth to=\"/builder#abilities\"\r\n                            className=\"w-full flex justify-between items-center pr-4 pl-12 py-1 border-r-4 border-transparent hover:bg-gray-300 transition duration-150 ease-in-out\">\r\n                            <p>Abilities</p>\r\n                            {context.sectionsCompleted.abilities ? <FaCheck className=\"text-green-400 animate-enter\" /> : null}\r\n                        </HashLink>\r\n                        <HashLink smooth to=\"/builder#items\"\r\n                            className=\"w-full flex justify-between items-center pr-4 pl-12 py-1 border-r-4 border-transparent hover:bg-gray-300 transition duration-150 ease-in-out\">\r\n                            <p>Items</p>\r\n                            {context.sectionsCompleted.items ? <FaCheck className=\"text-green-400 animate-enter\" /> : null}\r\n                        </HashLink>\r\n                    </div> : null}\r\n                </div>       \r\n                <div className=\"flex flex-col items-left justify-center w-full\">\r\n                    <NavLink to='/format'\r\n                        className=\"inline-flex items-center justify-left text-lg w-full pl-8 py-2 border-r-4 border-transparent hover:bg-gray-300 transition duration-150 ease-in-out\"\r\n                        activeClassName=\"bg-gray-300 border-gray-600\">\r\n                        <p>Format</p>\r\n                    </NavLink>\r\n                    {location.pathname === \"/format\" ? <div className=\"flex flex-col\">\r\n                        <HashLink smooth to=\"/format#basics\"\r\n                            className=\"w-full pl-12 py-1 border-r-4 border-transparent hover:bg-gray-300 transition duration-150 ease-in-out\">\r\n                            <p>Basics</p>\r\n                        </HashLink>\r\n                        <HashLink smooth to=\"/format#pokemon\"\r\n                            className=\"w-full pl-12 py-1 border-r-4 border-transparent hover:bg-gray-300 transition duration-150 ease-in-out\">\r\n                            <p>Pokémon</p>\r\n                        </HashLink>\r\n                        <HashLink smooth to=\"/format#movesets\"\r\n                            className=\"w-full pl-12 py-1 border-r-4 border-transparent hover:bg-gray-300 transition duration-150 ease-in-out\">\r\n                            <p>Movesets</p>\r\n                        </HashLink>\r\n                        <HashLink smooth to=\"/format#abilities\"\r\n                            className=\"w-full pl-12 py-1 border-r-4 border-transparent hover:bg-gray-300 transition duration-150 ease-in-out\">\r\n                            <p>Abilities</p>\r\n                        </HashLink>\r\n                        <HashLink smooth to=\"/format#items\"\r\n                            className=\"w-full pl-12 py-1 border-r-4 border-transparent hover:bg-gray-300 transition duration-150 ease-in-out\">\r\n                            <p>Items</p>\r\n                        </HashLink>\r\n                        <HashLink smooth to=\"/format#guide\"\r\n                            className=\"w-full pl-12 py-1 border-r-4 border-transparent hover:bg-gray-300 transition duration-150 ease-in-out\">\r\n                            <p>Guide</p>\r\n                        </HashLink>\r\n                    </div> : null}\r\n                </div>         \r\n                <NavLink to='/about'\r\n                    className=\"inline-flex items-center justify-left text-lg w-full pl-8 py-2 border-r-4 border-transparent hover:bg-gray-300 transition duration-150 ease-in-out\"\r\n                    activeClassName=\"bg-gray-300 border-gray-600\">\r\n                    <p>About</p>\r\n                </NavLink>\r\n            </div>        \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Footer() {\r\n    var braveado = <a href=\"https://github.com/Braveado\" target=\"_blank\" rel=\"noreferrer\" className=\"text-blue-400 hover:text-blue-500\">Nelson Martínez</a>\r\n    var pokeapi = <a href=\"https://pokeapi.co/\" target=\"_blank\" rel=\"noreferrer\" className=\"text-blue-400 hover:text-blue-500\">PokéAPI</a>\r\n    return (\r\n        <div className=\"mt-auto flex flex-wrap justify-center items-center w-full bg-white p-4\">\r\n            <div className=\"text-center\">Created by&nbsp;{braveado}&nbsp;and powered by&nbsp;{pokeapi}.&nbsp;</div>\r\n            <div className=\"text-center\">Pokémon and Pokémon character names are trademarks of Nintendo.</div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport { Link } from \"react-router-dom\";\r\nimport logo from '../assets/logo.png';\r\n\r\nexport default function Home() {\r\n    // Change title.\r\n    useEffect (() => {\r\n        document.title = 'Procedural Pokémon';\r\n    }, []);\r\n  \r\n    var showdown = <a href=\"https://pokemonshowdown.com/\" target=\"_blank\" rel=\"noreferrer\" className=\"text-blue-400 hover:text-blue-500\">Pokémon Showdown</a>\r\n    \r\n    return (\r\n        <div className=\"flex flex-col gap-8 justify-start items-center p-8 w-full\">  \r\n            <div className=\"flex flex-col gap-4 items-center\">\r\n                <img src={logo} alt=\"logo\" />                \r\n            </div>\r\n            <div id=\"\" className=\"flex flex-col w-full\">                \r\n                <div className=\"flex justify-center items-center gap-4 text-center\">                    \r\n                    <p className=\"text-xl\">Procedurally generated pokémon teams to use in &nbsp;{showdown}.</p>                                        \r\n                </div>            \r\n                <div className=\"flex flex-col justify-start items-center gap-4 p-4 w-full\">\r\n                    <div className=\"flex flex-wrap justify-center items-center gap-4\">\r\n                        <div className=\"flex flex-col items-center justify-center gap-4 p-4 rounded-md bg-white border-2 border-gray-200 w-96\">\r\n                            <Link to='/builder' className=\"text-2xl text-blue-400 hover:text-blue-500\">\r\n                                Try it now!\r\n                            </Link>   \r\n                            <p className=\"text-center\">\r\n                                Generate random options, create a team and export it to Pokémon Showdown.\r\n                            </p>                          \r\n                        </div>  \r\n                        <div className=\"flex flex-col items-center justify-center gap-4 p-4 rounded-md bg-white border-2 border-gray-200 w-96\">\r\n                            <Link to='/format' className=\"text-2xl text-blue-400 hover:text-blue-500\">\r\n                                How does it works?\r\n                            </Link>   \r\n                            <p className=\"text-center\">                                \r\n                                Check how the options are generated and the rules behind the format.\r\n                            </p>                          \r\n                        </div>                                                                      \r\n                    </div>                                                                       \r\n                </div>\r\n                <div className=\"flex flex-col gap-8 justify-start items-center p-8 w-full\">              \r\n                    <div id=\"links\" className=\"flex flex-col w-full\">\r\n                        <div className=\"flex justify-start items-center gap-4 text-center\">                    \r\n                            <p className=\"text-lg\">Useful Links</p>\r\n                            <p className=\"text-base text-gray-300\">General resources.</p>\r\n                        </div>            \r\n                        <div className=\"flex flex-col justify-start items-start gap-4 p-4 w-full border-t-2 border-gray-200\">\r\n                            <a href=\"https://bulbapedia.bulbagarden.net/\" target=\"_blank\" rel=\"noreferrer\" className=\"text-blue-400 hover:text-blue-500\">\r\n                                Bulbapedia\r\n                            </a>\r\n                            <a href=\"https://img.pokemondb.net/images/typechart.png\" target=\"_blank\" rel=\"noreferrer\" className=\"text-blue-400 hover:text-blue-500\">\r\n                                Pokémon Type Chart\r\n                            </a>\r\n                            <a href=\"https://www.pkmn.help/\" target=\"_blank\" rel=\"noreferrer\" className=\"text-blue-400 hover:text-blue-500\">\r\n                                Pokémon Type Calculator\r\n                            </a>                   \r\n                        </div>                                                            \r\n                    </div>                    \r\n                </div>                                                            \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react'\r\n\r\nexport default function Format() {\r\n    // Change title.\r\n    useEffect (() => {\r\n        document.title = 'Format - Procedural Pokémon';\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"flex flex-col gap-8 justify-start items-center p-8 w-full\">  \r\n            <div id=\"basics\" className=\"flex flex-col w-full\">\r\n                <div className=\"flex justify-start items-center gap-4 text-center\">                    \r\n                    <p className=\"text-lg\">Basics</p>\r\n                    <p className=\"text-base text-gray-300\">General points about the format.</p>\r\n                </div>            \r\n                <div className=\"flex flex-col justify-start items-start gap-4 p-4 w-full border-t-2 border-gray-200\">\r\n                    <p>\r\n                        The format aims to generate random yet balanced pokémon teams (singles) using procedural generation.\r\n                        Randomly generated numbers are used to get pokémon, moves, abilities and items across the first 8 generations of the main Pokémon games.\r\n                        Potential options are then put through filters to prevent unbalanced or unusable ones.\r\n                    </p>                    \r\n                    <p>\r\n                        Once all options have been generated, a complete pokémon team must be built with them to then export it.&nbsp;\r\n                        Teams can be imported to Pokémon Showdown for battles via custom games. \r\n                    </p>\r\n                </div>                                                            \r\n            </div>\r\n            <div id=\"pokemon\" className=\"flex flex-col w-full\">\r\n                <div className=\"flex justify-start items-center gap-4 text-center\">                    \r\n                    <p className=\"text-lg\">Pokémon Options</p>\r\n                    <p className=\"text-base text-gray-300\">Process for generating pokémon options.</p>\r\n                </div>            \r\n                <div className=\"flex flex-col justify-start items-start gap-4 p-4 w-full border-t-2 border-gray-200\">\r\n                    The steps to generate each pokémon option are the following:\r\n                    <ul className=\"pl-4 space-y-2\">\r\n                        <li>\r\n                            Get a random pokémon.\r\n                            <ul className=\"pl-4 text-gray-600 text-sm\">\r\n                                <li><a href=\"https://bulbapedia.bulbagarden.net/wiki/List_of_Pok%C3%A9mon_by_National_Pok%C3%A9dex_number\" target=\"_blank\" rel=\"noreferrer\" className=\"text-blue-400 hover:text-blue-500\">\r\n                                    Pokédex #001-898.\r\n                                </a></li>                                                        \r\n                            </ul>\r\n                        </li>                            \r\n                        <li>\r\n                            Get a random final evolution from its available ones.\r\n                            <ul className=\"pl-4 text-gray-600 text-sm\">\r\n                                <li>Longest branch if applicable on branching evolutions.</li>                                                        \r\n                            </ul>\r\n                        </li>\r\n                        <li>\r\n                            Get a random form from its available ones.\r\n                            <ul className=\"pl-4 text-gray-600 text-sm\">\r\n                                <li></li>                                                        \r\n                            </ul>\r\n                        </li>\r\n                        <li>\r\n                            Check filters and reroll if filtered out.\r\n                            <ul className=\"pl-4 text-gray-600 text-sm\">\r\n                                <li>Legendary pokémon forms above 720 total stats.</li>                        \r\n                                <li>Pokémon forms as strong as legendaries.</li>\r\n                                <li>Pokémon and pokémon forms below 360 total stats.</li>\r\n                            </ul>\r\n                        </li>\r\n                        <li>\r\n                            Check for \"top pokémon\" balance and reroll if needed.\r\n                            <ul className=\"pl-4 text-gray-600 text-sm\">\r\n                                <li>Legendary, mythical and pokémon with at least 600 total stats.</li>\r\n                                <li>Exactly 1 included in options.</li>\r\n                            </ul>\r\n                        </li>\r\n                        <li>\r\n                            Check for \"shiny bonus\".\r\n                            <ul className=\"pl-4 text-gray-600 text-sm\">\r\n                                <li>Shiny variant and increased level (+10).</li>\r\n                                <li>Exactly 1 included in options.</li>\r\n                            </ul>\r\n                        </li>\r\n                    </ul>                    \r\n                </div>                                                            \r\n            </div>\r\n            <div id=\"movesets\" className=\"flex flex-col w-full\">\r\n                <div className=\"flex justify-start items-center gap-4 text-center\">                    \r\n                    <p className=\"text-lg\">Moveset Options</p>\r\n                    <p className=\"text-base text-gray-300\">Process for generating moveset options.</p>\r\n                </div>            \r\n                <div className=\"flex flex-col justify-start items-start gap-4 p-4 w-full border-t-2 border-gray-200\">\r\n                    The steps to generate each move option in a moveset are the following:\r\n                    <ul className=\"pl-4 space-y-2\">\r\n                        <li>\r\n                            Get a random move.\r\n                            <ul className=\"pl-4 text-gray-600 text-sm\">\r\n                                <li><a href=\"https://bulbapedia.bulbagarden.net/wiki/List_of_moves\" target=\"_blank\" rel=\"noreferrer\" className=\"text-blue-400 hover:text-blue-500\">\r\n                                    Moves #001-826.\r\n                                </a></li>                                                         \r\n                            </ul>\r\n                        </li>\r\n                        <li>\r\n                            Check filters and reroll if filtered out.\r\n                            <ul className=\"pl-4 text-gray-600 text-sm\">\r\n                                <li>Special type of moves.</li>                        \r\n                                <li>Unusable in format.</li>\r\n                                <li>No effect moves.</li>                                \r\n                            </ul>\r\n                        </li>\r\n                        <li>\r\n                            Check for \"status limit\" and reroll if needed.\r\n                            <ul className=\"pl-4 text-gray-600 text-sm\">                                \r\n                                <li>Maximum of 3 status moves included in options.</li>\r\n                            </ul>\r\n                        </li>\r\n                        <li>\r\n                            Check for usability and reroll if needed.\r\n                            <ul className=\"pl-4 text-gray-600 text-sm\">                                \r\n                                <li>Space for combo moves.</li>\r\n                                <li>Moves only usable by specific pokémon.</li>\r\n                                <li>Held item requirements.</li>\r\n                            </ul>\r\n                        </li>\r\n                    </ul>                  \r\n                </div>                                                            \r\n            </div>\r\n            <div id=\"abilities\" className=\"flex flex-col w-full\">\r\n                <div className=\"flex justify-start items-center gap-4 text-center\">                    \r\n                    <p className=\"text-lg\">Ability Options</p>\r\n                    <p className=\"text-base text-gray-300\">Process for generating ability options.</p>\r\n                </div>            \r\n                <div className=\"flex flex-col justify-start items-start gap-4 p-4 w-full border-t-2 border-gray-200\">\r\n                    The steps to generate each ability option are the following:\r\n                    <ul className=\"pl-4 space-y-2\">\r\n                        <li>\r\n                            Get a random ability.\r\n                            <ul className=\"pl-4 text-gray-600 text-sm\">\r\n                                <li><a href=\"https://bulbapedia.bulbagarden.net/wiki/Ability#List_of_Abilities\" target=\"_blank\" rel=\"noreferrer\" className=\"text-blue-400 hover:text-blue-500\">\r\n                                    Abilities #001-267.\r\n                                </a></li>                                                         \r\n                            </ul>\r\n                        </li>\r\n                        <li>\r\n                            Check filters and reroll if filtered out.\r\n                            <ul className=\"pl-4 text-gray-600 text-sm\">                      \r\n                                <li>Unusable in format.</li>                                \r\n                                <li>Filtered out pokémon specific.</li>                                \r\n                            </ul>\r\n                        </li>\r\n                        <li>\r\n                            Check for usability and reroll if needed.\r\n                            <ul className=\"pl-4 text-gray-600 text-sm\">                                \r\n                                <li>Pokémon or pokémon form specific.</li>\r\n                                <li>Move mechanic or type specific.</li>\r\n                                <li>Held item requirements.</li>\r\n                            </ul>\r\n                        </li>\r\n                    </ul>                    \r\n                </div>                                                            \r\n            </div>\r\n            <div id=\"items\" className=\"flex flex-col w-full\">\r\n                <div className=\"flex justify-start items-center gap-4 text-center\">                    \r\n                    <p className=\"text-lg\">Item Options</p>\r\n                    <p className=\"text-base text-gray-300\">Process for generating item options.</p>\r\n                </div>            \r\n                <div className=\"flex flex-col justify-start items-start gap-4 p-4 w-full border-t-2 border-gray-200\">\r\n                    The steps to generate each item option are the following:\r\n                    <ul className=\"pl-4 space-y-2\">\r\n                        <li>\r\n                            Get a random item.\r\n                            <ul className=\"pl-4 text-gray-600 text-sm\">\r\n                                <li><a href=\"https://bulbapedia.bulbagarden.net/wiki/Category:In-battle_effect_items\" target=\"_blank\" rel=\"noreferrer\" className=\"text-blue-400 hover:text-blue-500\">\r\n                                    In battle effect items\r\n                                </a></li>\r\n                            </ul>\r\n                        </li>\r\n                        <li>\r\n                            Check filters and reroll if filtered out.\r\n                            <ul className=\"pl-4 text-gray-600 text-sm\">                      \r\n                                <li>Unusable in format.</li>                                \r\n                                <li>Evolution related or filtered out pokémon specific.</li>                                \r\n                            </ul>\r\n                        </li>\r\n                        <li>\r\n                            Check for usability and reroll if needed.\r\n                            <ul className=\"pl-4 text-gray-600 text-sm\">                                \r\n                                <li>Pokémon or pokémon form specific.</li>\r\n                                <li>Move mechanic or type specific.</li>\r\n                                <li>Ability mechanic specific.</li>\r\n                            </ul>\r\n                        </li>\r\n                    </ul>                    \r\n                </div>                                                            \r\n            </div>\r\n            <div id=\"guide\" className=\"flex flex-col w-full\">\r\n                <div className=\"flex justify-start items-center gap-4 text-center\">                    \r\n                    <p className=\"text-lg\">Import Guide</p>\r\n                    <p className=\"text-base text-gray-300\">Process for importing a team.</p>\r\n                </div>            \r\n                <div className=\"flex flex-col justify-start items-start gap-4 p-4 w-full border-t-2 border-gray-200\">\r\n                    The steps to import a team are the following:\r\n                    <ul className=\"pl-4 space-y-2\">\r\n                        <li>\r\n                            Go to Pokémon Showdown.\r\n                            <ul className=\"pl-4 text-gray-600 text-sm\">\r\n                                <li><a href=\"https://play.pokemonshowdown.com/teambuilder\" target=\"_blank\" rel=\"noreferrer\" className=\"text-blue-400 hover:text-blue-500\">\r\n                                    Team builder\r\n                                </a></li>\r\n                            </ul>\r\n                        </li>                        \r\n                    </ul>                    \r\n                </div>                                                            \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function PokemonType({type, size = 'md'}) {\r\n    const getColor = () => {\r\n        switch(type) {\r\n            case 'normal': return 'bg-normal';\r\n            case 'fire': return 'bg-fire';\r\n            case 'water': return 'bg-water';\r\n            case 'grass': return 'bg-grass';\r\n            case 'electric': return 'bg-electric';\r\n            case 'ice': return 'bg-ice';\r\n            case 'fighting': return 'bg-fighting';\r\n            case 'poison': return 'bg-poison';\r\n            case 'ground': return 'bg-ground';\r\n            case 'flying': return 'bg-flying';\r\n            case 'psychic': return 'bg-psychic';\r\n            case 'bug': return 'bg-bug';\r\n            case 'rock': return 'bg-rock';\r\n            case 'ghost': return 'bg-ghost';\r\n            case 'dark': return 'bg-dark';\r\n            case 'dragon': return 'bg-dragon';\r\n            case 'steel': return 'bg-steel';\r\n            case 'fairy': return 'bg-fairy';\r\n            default: return '';\r\n        }\r\n    }    \r\n\r\n    const getSize = () => {\r\n        switch(size){\r\n            case 'sm':\r\n                return 'w-auto text-xs px-1 py-0.5'\r\n            default:\r\n                return 'w-16 text-sm px-1.5 py-0.5';\r\n        }\r\n    }\r\n\r\n    return (\r\n        <p className={`flex items-center justify-center ${getSize()} capitalize rounded-md text-white font-semibold ${getColor()}`}>\r\n            {type}\r\n        </p>\r\n    )\r\n}\r\n","const pokemon = [ // Content\r\n    [\"Hit Points|Determines the total damage a pokemon can receive before fainting.\"],\r\n    [\"Attack|Determines damage dealt when using a physical move.\"],\r\n    [\"Defense|Mitigates damage received when hit by a physical move.\"],\r\n    [\"Special Attack|Determines damage dealt when using a special move.\"],\r\n    [\"Special Defense|Mitigates damage received when hit by a special move.\"],\r\n    [\"Speed|Determines the turn order in battle.\"],\r\n    [\"Nature|Usually affects two stats excluding HP, increasing one by 10% and decreasing another by 10%.\"],\r\n    [\"Gender|Selected from the possible genders of the pokemon.\"],\r\n    [\"Height and Weight|How tall and heavy is the pokemon.\"],\r\n];\r\n\r\nconst moves = [ // Content\r\n    [\"Power Points|How many times the move can be used.\"],\r\n    [\"Power|Determines damage dealt by the move.\"],\r\n    [\"Accuracy|Determines how likely the move is to hit.\"],\r\n];\r\n\r\nconst effects = [ // Keys, content\r\n    [['priority'], \"Priority|Higher priority moves are performed first.\"],\r\n    [['critical hit'], \"Critical Hit|Deals 1.5x the damage. The attacker's negative stat stages, the defender's positive stat stages and screen-creating moves are ignored.\"],\r\n    [['stages', 'stage'], \"Stages|Modifies a stat by 50% each. Max 6 or -6 stages per stat.\"],\r\n    [['flinch', 'flinching'], \"Flinch|Unable to attack for that turn.\"],\r\n    [['confuses', 'confused', 'confuse', 'confusion'], \"Confusion|33% chance of attacking itself instead of executing a move for 2-5 turns. Volatile status condition.\"],\r\n    [['paralyzes', 'paralyzed', 'paralyze'], \"Paralysis|50% speed reduction and 25% chance of losing each turn. Non-volatile status condition.\"],\r\n    [['freezes', 'freeze', 'freezing', 'frozen'], \"Freeze|Unable to make a move and 20% chance of being thawed out each turn. Non-volatile status condition.\"],\r\n    [['burned', 'burns', 'burn'], \"Burn|Takes 1/16 max HP as damage every turn and halves damage dealt with physical moves. Non-volatile status condition.\"],\r\n    [['poisoned', 'poisons', 'poisoning', 'poison'], \"Poison|Takes 1/8 max HP as damage every turn. Non-volatile status condition.\"],\r\n    [['sleeping', 'asleep', 'sleep'], \"Sleep|Unable to make a move for 1-3 turns. Non-volatile status condition.\"],\r\n    [['traps'], \"Trap|Prevents the target from switching out if the user remains in battle.\"],\r\n    [['infatuates', 'infatuation'], \"Infatuation|Cannot attack 50% of the time.\"],\r\n    [['badly poisoned', 'badly poisons'], \"Poison|Takes 1/8 max HP as damage every turn. Non-volatile status condition.\"],\r\n    [['critical hit rate', 'critical hit ratio'], \"Critical Hit Rate|A base chance of 1/16 of dealing a critical hit, increases based on stages (1/8, 1/2, always).\"],\r\n    [['major status effect', 'major status ailment'], \"Major Statuses|All the non-volatile status effects (Burn, Freeze, Paralysis, Poison, Badly Poison and Sleep).\"],\r\n    [['scatters spikes'], \"Spikes|Damages foes when they switch in based on layers placed (1/8, 1/6, 1/4 max HP).\"],\r\n    [['scatters poisoned spikes'], \"Poisoned Spikes|Affect foes when they switch in based on layers placed (poisons, badly poisons).\"],\r\n    [['causes damage when opposing pokémon switch in'], \"Stealth Rock|Damages foes when they switch in based on the effectivenes of Rock-type against them (from 1/32 to 1/2 max HP).\"],\r\n    [['grassy terrain'], \"Grassy Terrain|\"+\r\n        \"*Boosts the power of Grass-type moves by 30%.\"+\r\n        \"*Restores 1/16 max HP of pokemon at the end of their turn.\"+\r\n        \"*The power of Bulldoze, Earthquake, and Magnitude is halved.\"],\r\n    [['misty terrain'], \"Misty Terrain|\"+\r\n        \"*Halves the power of Dragon-type moves.\"+\r\n        \"*Prevents being afflicted by non-volatile status conditions.\"],\r\n    [['strong sunlight'], \"Strong Sunlight|\"+\r\n        \"*Increases the damage of Fire-type moves by 50%.\"+\r\n        \"*Decreases the damage of Water-type moves by 50%.\"+\r\n        \"*Allows Solar Beam and Solar Blade to be used instantly.\"+\r\n        \"*Causes Growth to raise Attack and Special Attack two stages each.\"+\r\n        \"*Prevents pokemon from becoming frozen.\"+\r\n        \"*Causes Moonlight, Synthesis, and Morning Sun to recover 2/3 of max HP.\"+\r\n        \"*Lowers accuracy of Thunder and Hurricane to 50%.\"],\r\n    [['rain'], \"Rain|\"+\r\n        \"*Increases the damage of Water-type moves by 50%.\"+\r\n        \"*Decreases the damage of Fire-type moves by 50%.\"+\r\n        \"*Halves the power of Solar Beam and Solar Blade.\"+\r\n        \"*Causes Growth to raise Attack and Special Attack two stages each.\"+\r\n        \"*Prevents pokemon from becoming frozen.\"+\r\n        \"*Causes Moonlight, Synthesis, and Morning Sun to recover 1/4 of max HP.\"+\r\n        \"*Allows Thunder and Hurricane to bypass the accuracy check.\"],\r\n    [['hail'], \"Hail|\"+\r\n        \"*Deals 1/16 max HP as damage to pokemon at the end of each turn, unless they are Ice-type.\"+\r\n        \"*Allows Blizzard to bypass accuracy check.\"+\r\n        \"*Halves the power of Solar Beam and Solar Blade.\"+\r\n        \"*Causes Moonlight, Synthesis, and Morning Sun to recover 1/4 of max HP.\"], \r\n];\r\n\r\nexport {\r\n    pokemon,\r\n    moves,\r\n    effects\r\n}","import React from 'react';\r\nimport { HiOutlineArrowUp, HiOutlineArrowDown } from 'react-icons/hi';\r\nimport {statRanges} from '../../constants/team';\r\nimport {pokemon as pokemonTooltips} from '../../constants/tooltips';\r\n\r\nconst getStatName = (stat) => {\r\n    switch (stat) {\r\n        case 0: return 'HP';\r\n        case 1: return 'Atk';\r\n        case 2: return 'Def';\r\n        case 3: return 'SpA';\r\n        case 4: return 'SpD';\r\n        case 5: return 'Spe';\r\n        case 6: return 'Total';\r\n        default: break;\r\n    }\r\n}\r\n\r\nconst getStatColor = (stat) => {\r\n    switch (stat) {\r\n        case 0: return 'bg-red-400';\r\n        case 1: return 'bg-yellow-500';\r\n        case 2: return 'bg-yellow-300';\r\n        case 3: return 'bg-green-400';\r\n        case 4: return 'bg-blue-400';\r\n        case 5: return 'bg-purple-400';\r\n        case 6: return 'bg-gray-300';\r\n        default: break;\r\n    }\r\n}\r\n\r\nconst getStatPercentage = (range, input) => {\r\n    return ((input - range[0]) * 100) / (range[1] - range[0]); // 12.34\r\n}\r\n\r\nexport default function PokemonStats({stats, nature}) {        \r\n\r\n    const statStep = 100 / 12; // 8.33\r\n\r\n    const getStatStep = (stat, statRange) => {\r\n        const statPercent = getStatPercentage(statRange, stat);\r\n        if(statPercent <= statStep * 1)\r\n            return 'w-1/12';\r\n        else if(statPercent <= statStep * 2)\r\n            return 'w-2/12';\r\n        else if(statPercent <= statStep * 3)\r\n            return 'w-3/12';\r\n        else if(statPercent <= statStep * 4)\r\n            return 'w-4/12';\r\n        else if(statPercent <= statStep * 5)\r\n            return 'w-5/12';\r\n        else if(statPercent <= statStep * 6)\r\n            return 'w-6/12';\r\n        else if(statPercent <= statStep * 7)\r\n            return 'w-7/12';\r\n        else if(statPercent <= statStep * 8)\r\n            return 'w-8/12';\r\n        else if(statPercent <= statStep * 9)\r\n            return 'w-9/12';\r\n        else if(statPercent <= statStep * 10)\r\n            return 'w-10/12';\r\n        else if(statPercent <= statStep * 11)\r\n            return 'w-11/12';\r\n        else if(statPercent <= statStep * 12)\r\n            return 'w-full';\r\n        else if(statPercent > statStep * 12)\r\n            return 'w-full animate-pulse';\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex flex-col justify-center items-start w-full text-sm\">\r\n            {stats.map((s, i) => {\r\n                return (\r\n                    <div key={i} className=\"flex w-full gap-2\">\r\n                        <div className=\"flex w-1/3 justify-between items-center\">                            \r\n                            <div className={`flex items-center \r\n                                ${s.stat && nature.increased && s.stat.name === nature.increased.name ? 'text-blue-600' : ''}\r\n                                ${s.stat && nature.decreased && s.stat.name === nature.decreased.name ? 'text-red-600' : ''}`}>\r\n                                <p className={i < stats.length - 1 ? 'border-b border-dashed border-gray-600' : ''}\r\n                                    data-tip={i < stats.length - 1 ? pokemonTooltips[i] : ''} data-for={'pokemon'}>\r\n                                    {getStatName(i)}\r\n                                </p>\r\n                                {s.stat && nature.increased && s.stat.name === nature.increased.name ? <HiOutlineArrowUp /> : null}\r\n                                {s.stat && nature.decreased && s.stat.name === nature.decreased.name ? <HiOutlineArrowDown /> : null}\r\n                            </div>\r\n                            <p className=\"\">{s.base_stat}</p>                                        \r\n                        </div>\r\n                        <div className=\"flex w-2/3 relative items-center\">\r\n                            <div\r\n                                style={{marginTop: \"2px\"}}\r\n                                className={`${getStatColor(i)} rounded-md h-3\r\n                                    ${i === 0 ? getStatStep(s.calculated_stat, statRanges.hp) : ''}\r\n                                    ${i > 0 && i < stats.length - 1 ? getStatStep(s.calculated_stat, statRanges.general) : ''}\r\n                                    ${i === stats.length - 1 ? getStatStep(s.base_stat, statRanges.total) : ''}\r\n                                `}\r\n                            />\r\n                            <div className=\"absolute w-full h-full\">\r\n                                {i < stats.length - 1 ? \r\n                                    <div\r\n                                        style={{marginTop: \"1px\"}} \r\n                                        className=\"px-2 flex items-center justify-between text-xs text-gray-600 w-full h-full\">\r\n                                        <p>{s.ev} / {s.iv}</p>\r\n                                        <p>{s.calculated_stat}</p>\r\n                                    </div>\r\n                                : null}                                \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })}                                        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    getStatName, getStatColor, getStatPercentage\r\n}\r\n","import React from 'react'\r\nimport {GiSparkles} from 'react-icons/gi';\r\nimport {BiSearchAlt} from 'react-icons/bi';\r\nimport {topPokemonTotalStatsThreshold} from '../../constants/team';\r\nimport PokemonType from './PokemonType';\r\nimport {getStatColor, getStatName} from './PokemonStats';\r\n\r\nexport default function PokemonSprite({pokemon, assign, opacity, types = false, stats = false}) {\r\n    const getRarity = () => {\r\n        if(pokemon.is_legendary)\r\n            return \"bg-yellow-100 border-2 border-yellow-200 ring ring-yellow-100 animate-pulse\"\r\n        else if(pokemon.is_mythical)\r\n            return \"bg-purple-100 border-2 border-purple-200 ring ring-purple-100 animate-pulse\"\r\n        else if(pokemon.stats[6].base_stat >= topPokemonTotalStatsThreshold)\r\n            return \"bg-blue-100 border-2 border-blue-200 ring ring-blue-100 animate-pulse\"\r\n        else\r\n            return 'animate-none'\r\n    }\r\n\r\n    return ( \r\n        <div onClick={assign} \r\n            className={`relative w-24 h-24 flex items-center justify-center ${opacity ? 'opacity-20' : ''} transition duration-150 ease-in-out`}>\r\n            <span className={`absolute w-24 h-24 absolute rounded-full opacity-100 ${getRarity()}`} />\r\n            {pokemon.shiny ? <GiSparkles className={`absolute w-24 h-24 absolute opacity-100 text-yellow-200 animate-pulse`} /> : null}            \r\n            {pokemon.sprites.front_default ?                \r\n                <img \r\n                    src={pokemon.shiny ? pokemon.sprites.front_shiny : pokemon.sprites.front_default} alt=\"\" width=\"96px\" height=\"96px\"\r\n                    className=\"absolute animate-wiggle\"\r\n                />\r\n            :\r\n                <p className=\"absolute text-sm\">                    \r\n                    <a onClick={(e) => e.stopPropagation()} href={`https://bulbapedia.bulbagarden.net/wiki/${pokemon.species.name.replace(/-/g, \" \").replace(/\\b\\w/g, l => l.toUpperCase()).replace(/ /g, \"_\")}_(Pokémon)`} target=\"_blank\" rel=\"noreferrer\"\r\n                        className=\"flex items-center gap-1 text-blue-400 hover:text-blue-500\">\r\n                        <BiSearchAlt /> Bulbapedia\r\n                    </a>\r\n                </p>\r\n            }\r\n            {stats ?\r\n                <div className=\"absolute inset-x-0 top-0 w-full\">                    \r\n                    <div className=\"relative w-full flex justify-center items-center text-xs\">\r\n                        {\r\n                            pokemon.highestStats.map((e, i) => {\r\n                                if(i < 3){\r\n                                return(\r\n                                    <div className=\"flex items-center justify-center\" key={i}>\r\n                                        <div \r\n                                            className={`h-3 rounded-md w-8\r\n                                            ${getStatColor(pokemon.highestStats[i].statIndex)} \r\n                                            ${pokemon.highestStats[i].percentage > 100 ? 'animate-pulse' : ''}`} \r\n                                        />                                                                                    \r\n                                        <p \r\n                                            style={{marginTop: \"-2px\"}}\r\n                                            className=\"absolute\"\r\n                                        >{getStatName(pokemon.highestStats[i].statIndex)}</p>\r\n                                    </div>\r\n                                )}\r\n                                else return null;\r\n                            })\r\n                        }       \r\n                    </div>                                                                 \r\n                </div>\r\n            : null}\r\n            {types &&\r\n                <div className=\"absolute inset-x-0 bottom-0 flex justify-center items-center\">\r\n                    {pokemon.types.map((t, i) => {\r\n                        return (                                    \r\n                            <PokemonType key={i} type={t.type.name} size=\"sm\" />\r\n                        )\r\n                    })}                           \r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { TeamBuilderContext } from '../../context/TeamBuilderContext';\r\nimport PokemonType from './PokemonType';\r\nimport PokemonStats from './PokemonStats';\r\nimport PokemonSprite from './PokemonSprite';\r\nimport { FaGenderless } from 'react-icons/fa';\r\nimport { CgGenderMale, CgGenderFemale } from 'react-icons/cg';\r\nimport {pokemon as pokemonTooltips} from '../../constants/tooltips';\r\n\r\nexport default function Pokemon({pokemon}) {\r\n    const context = React.useContext(TeamBuilderContext);\r\n\r\n    const getGenders = () => {\r\n        switch(pokemon.gender){\r\n            case \"male\": \r\n                return <CgGenderMale />\r\n            case \"female\": \r\n                return <CgGenderFemale />\r\n            default:\r\n               return <FaGenderless />\r\n        }            \r\n    }    \r\n\r\n    return (\r\n        <div onClick={() => context.selectPokemon(pokemon)} \r\n            className={`animate-enter cursor-pointer flex flex-col gap-2 justify-start items-center bg-white rounded-md p-2 w-64 h-auto border-2 border-gray-200 hover:bg-gray-200 transition duration-150 ease-in-out\r\n            ${pokemon.selected ? 'bg-green-100 border-green-200 ring ring-green-100' : ''}`}>                        \r\n\r\n            <PokemonSprite pokemon={pokemon} />            \r\n\r\n            <div className=\"capitalize text-center\">{pokemon.name.replace(/-/g, \" \")} {`Lv${pokemon.level}`}</div>\r\n            <div className=\"flex justify-center items-center gap-2\">\r\n                {pokemon.types.map((t, i) => {\r\n                    return (                                    \r\n                        <PokemonType key={i} type={t.type.name} />\r\n                    )\r\n                })}                           \r\n            </div>\r\n            <PokemonStats stats={pokemon.stats} nature={pokemon.nature}/> \r\n            <div className=\"w-full grid grid-cols-3 text-xs text-gray-600\">\r\n                <p className=\"capitalize border-b border-dashed border-gray-600 justify-self-start\" data-tip={pokemonTooltips[6]} data-for={'pokemon'}>\r\n                    {pokemon.nature.name}\r\n                </p>               \r\n                <p className=\"text-base border-b border-dashed border-gray-600 justify-self-center\" data-tip={pokemonTooltips[7]} data-for={'pokemon'}>\r\n                    {getGenders()}\r\n                </p>                               \r\n                <p className=\"border-b border-dashed border-gray-600 justify-self-end\" data-tip={pokemonTooltips[8]} data-for={'pokemon'}>\r\n                    {pokemon.height/10}m / {pokemon.weight/10}kg\r\n                </p>               \r\n            </div>                       \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { TeamBuilderContext } from '../../context/TeamBuilderContext';\r\nimport Pokemon from './Pokemon';\r\n\r\nexport default function PokemonOptions({ options }) {\r\n    const context = React.useContext(TeamBuilderContext);\r\n    \r\n    const setOptions = () => {\r\n        if (options.length) {\r\n            return (\r\n                options.map(p => (\r\n                    <Pokemon key={p.id} pokemon={p} />\r\n                ))\r\n            );\r\n        } else {\r\n            return (                \r\n                <div className=\"p-4 text-gray-300\">\r\n                    Empty\r\n                </div>            \r\n            );\r\n        }\r\n    }\r\n\r\n    // Render.\r\n    return (\r\n        <div id=\"pokemon\" className=\"flex flex-col w-full\">\r\n            <div className=\"flex justify-between items-center gap-4 text-center\">\r\n                <span className=\"flex gap-4 items-center\">\r\n                    <p className=\"text-lg\">Pokémon Options</p>\r\n                    <p className=\"text-base text-gray-300\">Select pokémon for your team.</p>\r\n                </span>\r\n                <p className=\"text-lg\">{context.selectionsMade.pokemons}/{context.selectionsNeeded.pokemons} Pokémon Selected</p>\r\n            </div>            \r\n            <div className={`flex flex-wrap justify-center items-start gap-4 p-4 w-full border-2 rounded-md border-gray-200 transition duration-150 ease-in-out\r\n                ${context.selectionsMade.pokemons >= context.selectionsNeeded.pokemons ? 'border-green-200 ring ring-green-100' : ''}`}>\r\n                {setOptions()}\r\n            </div>            \r\n        </div>\r\n    );    \r\n}\r\n","import React from 'react'\r\n\r\nexport default function MoveCategory({category}) {\r\n    const getColor = () => {\r\n        switch(category){\r\n            case 'physical': return 'bg-red-600';\r\n            case 'special': return 'bg-blue-600';\r\n            case 'status': return 'bg-gray-400';\r\n            default: break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <p className={`flex items-center justify-center w-16 capitalize text-sm px-1.5 py-0.5 rounded-md text-white font-semibold ${getColor()}`}>\r\n            {category}\r\n        </p>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {effects as effectTooltips} from '../constants/tooltips';\r\n\r\nexport default function TooltipTags({effect}){\r\n\r\n    const getTooltips = () => {\r\n        if(effect){\r\n\r\n            let formattedEffect = effect.toLowerCase().replace(/[.,]/g, \"\");\r\n            let tooltipData=[];\r\n            \r\n            effectTooltips.forEach(data => {                \r\n                data[0].forEach(key => {\r\n                    if(!tooltipData.includes(data[1]) && formattedEffect.match(new RegExp('\\\\b'+key, 'g'))){\r\n                        tooltipData.push(data[1])\r\n                    }\r\n                });            \r\n            });\r\n\r\n            return (tooltipData.map((d, i) => {\r\n                return (\r\n                    <p className=\"border-b border-dashed border-gray-600\" key={i} data-tip={[d]} data-for={'effects'}>\r\n                        {d.split(\"|\")[0]}\r\n                    </p>\r\n                )\r\n            }));\r\n        }\r\n        else return null;\r\n    }\r\n\r\n    return(\r\n        <div className=\"text-sm w-full flex flex-wrap justify-center items-center gap-2 text-gray-600\">\r\n            {getTooltips()}\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { TeamBuilderContext } from '../../context/TeamBuilderContext';\r\nimport PokemonType from '../pokemon/PokemonType';\r\nimport MoveCategory from './MoveCategory';\r\nimport {BiSearchAlt} from 'react-icons/bi';\r\nimport TooltipTags from '../TooltipTags';\r\nimport {moves as moveTooltips} from '../../constants/tooltips';\r\n\r\nexport default function Move({move, moveset}) {\r\n    const context = React.useContext(TeamBuilderContext);            \r\n\r\n    const formatEffect = (effect) => {\r\n        let formattedEffect = effect;\r\n        // Adjust specific moves.      \r\n        switch(move.name){\r\n            case 'techno-blast':\r\n                formattedEffect = formattedEffect.replace('plate or ', '');\r\n                break;\r\n            case 'judgment':\r\n                formattedEffect = formattedEffect.replace(' or drive', '');\r\n                break;\r\n            case 'multi-attack':\r\n                formattedEffect = formattedEffect.replace('plate or drive', 'memory');\r\n                break;\r\n            case 'hidden-power':\r\n                formattedEffect = \"Inflicts regular damage with no additional effect.\";\r\n                break;\r\n            case 'uproar':\r\n                formattedEffect = formattedEffect.replace('several', '3');\r\n                break;\r\n            case 'sand-tomb':\r\n            case 'magma-storm':\r\n                formattedEffect = formattedEffect.replace('Prevents the target from fleeing', 'Traps the target');\r\n                break;\r\n            case 'thousand-waves':\r\n            case 'mean-look':\r\n                formattedEffect = \"Traps the target.\";\r\n                break;\r\n            case 'aurora-veil':\r\n                formattedEffect = formattedEffect.replace('damage', 'damage received for');\r\n                break;    \r\n            case 'attract':\r\n                formattedEffect = \"Infatuates target if it has the opposite gender.\";\r\n                break;          \r\n            default:\r\n                break;\r\n        }           \r\n        // Adjust general moves.\r\n        formattedEffect = formattedEffect.replace(/\\$effect_chance/g, move.effect_chance);\r\n        if(move.meta && move.meta.crit_rate > 0)\r\n            formattedEffect = formattedEffect.replace(\"Has an increased chance for a critical hit.\", `Move's critical hit rate is increased by ${move.meta.crit_rate} stage(s).`);\r\n        if(move.priority !== 0)\r\n            formattedEffect = formattedEffect.concat(' Priority '+move.priority);\r\n        return formattedEffect;\r\n    }    \r\n\r\n    const formattedEffect = move.effect_entries.length > 0 ? formatEffect(move.effect_entries.find(e => e.language.name === \"en\").short_effect) : null;\r\n\r\n    const getEffect = () => {\r\n        if(formattedEffect) {\r\n            return(\r\n                <p className=\"text-center\">\r\n                    {formattedEffect}\r\n                </p>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <p className=\"text-sm\">                    \r\n                    <a onClick={(e) => e.stopPropagation()} href={`https://bulbapedia.bulbagarden.net/wiki/${move.name.replace(/-/g, \" \").replace(/\\b\\w/g, l => l.toUpperCase()).replace(/ /g, \"_\")}_(move)`} target=\"_blank\" rel=\"noreferrer\"\r\n                        className=\"flex items-center gap-1 text-blue-400 hover:text-blue-500\">\r\n                        <BiSearchAlt /> Bulbapedia\r\n                    </a>\r\n                </p>\r\n            )\r\n        }\r\n    }    \r\n\r\n    return (\r\n        <div onClick={() => context.selectMove(move, moveset)}\r\n            className={`cursor-pointer flex flex-col gap-2 justify-start items-center bg-white rounded-md p-2 w-full h-auto border-2 border-gray-200 hover:bg-gray-200 transition duration-150 ease-in-out \r\n            ${move.selected ? 'bg-green-100 border-green-200 ring ring-green-100' : ''}`}>            \r\n            <div className=\"flex justify-between items-center w-full gap-2\">\r\n                <p className=\"capitalize\">{move.name.replace(/-/g, \" \")}</p>\r\n                <div className=\"flex justify-center gap-2\">\r\n                    <PokemonType type={move.type.name} />\r\n                    {move.damage_class ? <MoveCategory category={move.damage_class.name} /> : ''}\r\n                </div>                                \r\n            </div>\r\n            <div className=\"w-full grid grid-cols-3 text-sm\">\r\n                <p className=\"border-b border-dashed border-gray-600 justify-self-start\" data-tip={moveTooltips[0]} data-for={'moves'}>PP: {move.pp}</p>\r\n                <p className=\"border-b border-dashed border-gray-600 justify-self-center\" data-tip={moveTooltips[1]} data-for={'moves'}>Pwr: {move.power ? move.power : '-'}</p>\r\n                <p className=\"border-b border-dashed border-gray-600 justify-self-end\" data-tip={moveTooltips[2]} data-for={'moves'}>Acc: {move.accuracy ? move.accuracy : '-'}</p>                \r\n            </div>\r\n            <div className=\"flex flex-col justify-start items-center text-sm w-full\">\r\n                {getEffect()}\r\n            </div>\r\n            <TooltipTags effect={formattedEffect} />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { TeamBuilderContext } from '../../context/TeamBuilderContext';\r\nimport PokemonSprite from './PokemonSprite';\r\n\r\nexport default function SelectedPokemon({ assignable }) {\r\n    const context = React.useContext(TeamBuilderContext);   \r\n    const selectedPokemon = context.pokemonOptions.filter(p => p.selected);      \r\n\r\n    const getAssigned = () => {\r\n        if(assignable.moveset != null)            \r\n            return selectedPokemon.find(p => p.moveset === assignable.moveset)\r\n        else if(assignable.ability != null)            \r\n            return selectedPokemon.find(p => p.ability === assignable.ability)\r\n        else if(assignable.item != null)            \r\n            return selectedPokemon.find(p => p.item === assignable.item)\r\n        else\r\n            return null;\r\n    }\r\n    let assignedPokemon = getAssigned();\r\n\r\n    const getAssignedOutside = (pokemon) => {\r\n        if(assignable.moveset != null)\r\n            return pokemon.moveset !== null;\r\n        else if (assignable.ability != null)\r\n            return pokemon.ability !== null;\r\n        else if (assignable.item != null)\r\n            return pokemon.item !== null;\r\n        else\r\n            return null;\r\n    }\r\n\r\n    const getSelectedPokemons = () => {        \r\n        if(selectedPokemon.length > 0 && !assignedPokemon) {\r\n            return selectedPokemon.map((p, i) => {\r\n                return (\r\n                    <PokemonSprite key={i} pokemon={p} types={true} stats={true} assign={() => context.assignPokemon(p, assignable)}\r\n                        opacity={(assignedPokemon && p.name !== assignedPokemon.name) ||\r\n                        (!assignedPokemon && getAssignedOutside(p))}\r\n                    />\r\n                )\r\n            })            \r\n        }\r\n        else if(selectedPokemon.length > 0 && assignedPokemon) {\r\n            return <PokemonSprite pokemon={assignedPokemon} types={true} stats={true} assign={() => context.assignPokemon(assignedPokemon, assignable)} />            \r\n        }\r\n        else {\r\n            return (\r\n                <div className=\"p-4 text-gray-300\">\r\n                    No selected pokémon\r\n                </div> \r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={`cursor-pointer flex flex-wrap gap-2 justify-center items-center bg-white rounded-md p-2 w-full h-auto border-2 border-gray-200 hover:bg-gray-200 transition duration-150 ease-in-out \r\n            ${assignedPokemon ? 'bg-green-100 border-green-200 ring ring-green-100' : ''}`}>\r\n            {getSelectedPokemons()}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { TeamBuilderContext } from '../../context/TeamBuilderContext';\r\nimport Move from './Move';\r\nimport SelectedPokemon from '../pokemon/SelectedPokemon';\r\n\r\nexport default function Moveset({ moveset, index }) {\r\n    const context = React.useContext(TeamBuilderContext);\r\n\r\n    const setMoves = () => {\r\n        if (moveset.length) {\r\n            return (\r\n                moveset.map(m => (\r\n                    <Move moveset={index} key={m.id} move={m} />\r\n                ))\r\n            );\r\n        } else {\r\n            return (                \r\n                <div className=\"p-4 text-gray-300\">\r\n                    Empty\r\n                </div>            \r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"animate-enter flex flex-col justify-start items-end\">\r\n            <div className=\"flex w-full justify-end items-center\">\r\n                {/* <p className=\"text-base\">{!context.pokemonOptions.find(p => p.moveset === index) ? 'No ' : ''}Pokemon Assigned</p> */}\r\n                <p className=\"text-base\">{context.selectionsMade.moves[index]}/{context.selectionsNeeded.moves} Moves Selected</p>\r\n            </div>\r\n            <div className={`flex flex-col gap-2 justify-start items-center rounded-md p-2 w-96 h-auto border-2 border-gray-200 transition duration-150 ease-in-out \r\n                ${context.selectionsMade.moves[index] >= context.selectionsNeeded.moves &&\r\n                context.pokemonOptions.find(p => p.moveset === index) ? 'border-green-200 ring ring-green-100' : ''}`}>\r\n                <SelectedPokemon assignable={{moveset: index}} />\r\n                {setMoves()}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { TeamBuilderContext } from '../../context/TeamBuilderContext';\r\nimport Moveset from './Moveset';\r\n\r\nexport default function MovesetOptions({ options }) {\r\n    const context = React.useContext(TeamBuilderContext);\r\n\r\n    const selectedMoves  = () => {\r\n        let sm = 0;        \r\n        context.selectionsMade.moves.forEach(m => {\r\n            sm = sm + m\r\n        });\r\n        return sm;\r\n    }\r\n\r\n    const setOptions = () => {\r\n        if (options.length) {\r\n            return (\r\n                options.map((m, i) => (\r\n                    <Moveset key={i} index={i} moveset={m} />\r\n                ))\r\n            );\r\n        } else {\r\n            return (                \r\n                <div className=\"p-4 text-gray-300\">\r\n                    Empty\r\n                </div>            \r\n            );\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div id=\"movesets\" className=\"flex flex-col w-full\">\r\n            <div className=\"flex justify-between items-center gap-4 text-center\">\r\n                <span className=\"flex gap-4 items-center\">\r\n                    <p className=\"text-lg\">Moveset Options</p>\r\n                    <p className=\"text-base text-gray-300\">Assign your selected pokémon to a moveset and select their moves.</p>\r\n                </span>\r\n                <span className=\"flex gap-4 items-center\">\r\n                    <p className=\"text-lg\">{context.selectionsMade.movesets}/{context.selectionsNeeded.movesets} Pokémon Assigned</p>                    \r\n                </span>\r\n            </div>            \r\n            <div className={`flex flex-wrap justify-center items-start gap-4 p-4 w-full border-2 rounded-md border-gray-200 transition duration-150 ease-in-out\r\n                ${context.selectionsMade.movesets >= context.selectionsNeeded.movesets && \r\n                selectedMoves() >= context.selectionsNeeded.movesets * context.selectionsNeeded.moves ? 'border-green-200 ring ring-green-100' : ''}`}>\r\n                {setOptions()}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { TeamBuilderContext } from '../../context/TeamBuilderContext';\r\nimport SelectedPokemon from '../pokemon/SelectedPokemon';\r\nimport {BiSearchAlt} from 'react-icons/bi';\r\nimport TooltipTags from '../TooltipTags';\r\n\r\nexport default function Ability({ability, index}) {\r\n    const context = React.useContext(TeamBuilderContext);\r\n    const selected = context.pokemonOptions.find(p => p.ability === index);\r\n\r\n    const formatEffect = (effect) => {\r\n        let formattedEffect = effect;\r\n        // Adjust specific items.      \r\n        switch(ability.name){\r\n            case 'sand-stream':\r\n            case 'drizzle':\r\n            case 'snow-warning':\r\n            case 'drought':\r\n                formattedEffect = formattedEffect.replace('indefinitely', '5 turns');\r\n                break;\r\n            case 'aroma-veil':\r\n                formattedEffect = formattedEffect.replace('allies', 'user and allies');\r\n                break;\r\n            case 'fur-coat':\r\n                formattedEffect = formattedEffect.replace('damage', 'damage received');\r\n                break;\r\n            default:\r\n                break;\r\n        }           \r\n        // Adjust general abilities.\r\n        \r\n        return formattedEffect;\r\n    }\r\n\r\n    const formattedEffect = ability.effect_entries.length > 0 ? formatEffect(ability.effect_entries.find(e => e.language.name === 'en').short_effect) : null;\r\n\r\n    const getEffect = () => {        \r\n        if(formattedEffect) {            \r\n            return (\r\n                <p className=\"text-center\">\r\n                    {formattedEffect} \r\n                </p>\r\n            )            \r\n        }\r\n        else {\r\n            return (\r\n                <p className=\"text-sm\">                    \r\n                    <a onClick={(e) => e.stopPropagation()} href={`https://bulbapedia.bulbagarden.net/wiki/${ability.name.replace(/-/g, \" \").replace(/\\b\\w/g, l => l.toUpperCase()).replace(/ /g, \"_\")}_(Ability)`} target=\"_blank\" rel=\"noreferrer\"\r\n                        className=\"flex items-center gap-1 text-blue-400 hover:text-blue-500\">\r\n                        <BiSearchAlt /> Bulbapedia\r\n                    </a>\r\n                </p>\r\n            )\r\n        }\r\n    }    \r\n\r\n    return (\r\n        <div className=\"animate-enter flex flex-col justify-start items-end\">\r\n            <div className={`flex flex-col gap-2 justify-start items-center rounded-md p-2 w-96 h-auto border-2 border-gray-200 transition duration-150 ease-in-out  \r\n                ${selected ? 'border-green-200 ring ring-green-100' : ''}`}>            \r\n                <SelectedPokemon assignable={{ability: index}} />\r\n                <div className={`flex flex-col gap-2 justify-start items-center bg-white rounded-md p-2 w-full h-auto border-2 border-gray-200 transition duration-150 ease-in-out \r\n                    ${selected ? 'bg-green-100 border-green-200 ring ring-green-100' : ''}`}>\r\n                    <div className=\"flex justify-center items-center w-full gap-2\">\r\n                        <p className=\"capitalize\">{ability.name.replace(/-/g, \" \")}</p>                \r\n                    </div>            \r\n                    <div className=\"flex flex-col justify-start items-center text-sm w-full\">\r\n                        {getEffect()}\r\n                    </div>  \r\n                    <TooltipTags effect={formattedEffect} />          \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { TeamBuilderContext } from '../../context/TeamBuilderContext';\r\nimport Ability from './Ability';\r\n\r\nexport default function AbilityOptions({options}) {\r\n    const context = React.useContext(TeamBuilderContext);\r\n\r\n    const setOptions = () => {\r\n        if (options.length) {\r\n            return (\r\n                options.map((a, i) => (\r\n                    <Ability key={i} index={i} ability={a} />\r\n                ))                \r\n            );\r\n        } else {\r\n            return (                \r\n                <div className=\"p-4 text-gray-300\">\r\n                    Empty\r\n                </div>            \r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div id=\"abilities\" className=\"flex flex-col w-full\">\r\n            <div className=\"flex justify-between items-center gap-4 text-center\">\r\n                <span className=\"flex gap-4 items-center\">\r\n                    <p className=\"text-lg\">Ability Options</p>\r\n                    <p className=\"text-base text-gray-300\">Assign your selected pokémon to an ability.</p>\r\n                </span>\r\n                <span className=\"flex gap-4 items-center\">\r\n                    <p className=\"text-lg\">{context.selectionsMade.abilities}/{context.selectionsNeeded.abilities} Pokémon Assigned</p>                    \r\n                </span>\r\n            </div>            \r\n            <div className={`flex flex-wrap justify-center items-start gap-4 p-4 w-full border-2 rounded-md border-gray-200 transition duration-150 ease-in-out\r\n                ${context.selectionsMade.abilities >= context.selectionsNeeded.abilities ? 'border-green-200 ring ring-green-100' : ''}`}>\r\n                {setOptions()}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { TeamBuilderContext } from '../../context/TeamBuilderContext';\r\nimport SelectedPokemon from '../pokemon/SelectedPokemon';\r\nimport {BiSearchAlt} from 'react-icons/bi';\r\nimport TooltipTags from '../TooltipTags';\r\n\r\nexport default function Item({item, index}) {\r\n    const context = React.useContext(TeamBuilderContext);\r\n    const selected = context.pokemonOptions.find(p => p.item === index);\r\n    \r\n    const formatEffect = (effect) => {\r\n        let formattedEffect = effect.split(\".\").filter(e => {\r\n            return !e.includes(\"Breeding:\") && !e.includes(\"Traded on\") && !e.includes(\"Held by\") && !e.includes(\"begets\") && !e.includes(\"Egg\")\r\n        }).map(e => {\r\n            return e.replace(\"Held: \", \"\")\r\n        }).join(\".\");  \r\n        // Adjust specific items.      \r\n        switch(item.name){\r\n            case 'shell-bell':                                \r\n                formattedEffect = formattedEffect.replace(\"receives\", \"heals\");\r\n                break;\r\n            case 'bright-powder':                                \r\n                formattedEffect = formattedEffect.replace(\"(11 1/9%)\", \"(11%)\");\r\n                break;\r\n            case 'mental-herb':\r\n                formattedEffect = formattedEffect.replace(\"infatuation. Gen V: Also removes\", \"Infatuation,\");\r\n                break;\r\n            case 'light-clay':\r\n                formattedEffect = formattedEffect.replace(\" and Reflect\", \", Reflect and Aurora Veil\");\r\n                break;\r\n            case 'toxic-orb':\r\n                formattedEffect = formattedEffect.replace(\"Inflicts Toxic on\", \"Badly poisons\");\r\n                break;\r\n            case 'cell-battery':\r\n            case 'absorb-bulb':\r\n            case 'snowball':\r\n            case 'eject-button':\r\n                formattedEffect = formattedEffect.concat(\" Consumed after use.\");\r\n                break;\r\n            default:\r\n                break;\r\n        }        \r\n        // Adjust group items.\r\n        if(item.name.split(\"-\").includes('plate'))\r\n            formattedEffect = formattedEffect.replace(\"Arceus's and\", \"Arceus with multitype and\");\r\n        if(item.name.split(\"-\").includes('memory'))\r\n            formattedEffect = formattedEffect.replace(\"Silvally to\", \"Silvally with RKS System to\");\r\n        if(item.name.split(\"-\").includes('drive'))\r\n            formattedEffect = formattedEffect.replace(\" Techno Blast\", \"\").replace(\"Grants Genesect\", \"Changes the holder's Techno Blast\").replace(\"a yellow,\", \"to\");\r\n        if(item.name.split(\"-\").includes('gem'))\r\n            formattedEffect = formattedEffect.replace(\"5\", \"3\");\r\n        return formattedEffect;\r\n    }\r\n\r\n    const formattedEffect = item.effect_entries.length > 0 ? formatEffect(item.effect_entries.find(e => e.language.name === 'en').short_effect) : null;\r\n\r\n    const getEffect = () => {        \r\n        if(formattedEffect) {                \r\n            return (\r\n                <p className=\"text-center\">\r\n                    {formattedEffect}  \r\n                </p>\r\n            )            \r\n        }\r\n        else {\r\n            return (\r\n                <p className=\"text-sm\">                    \r\n                    <a onClick={(e) => e.stopPropagation()} href={`https://bulbapedia.bulbagarden.net/wiki/${item.name.replace(/-/g, \" \").replace(/\\b\\w/g, l => l.toUpperCase()).replace(/ /g, \"_\")}`} target=\"_blank\" rel=\"noreferrer\"\r\n                        className=\"flex items-center gap-1 text-blue-400 hover:text-blue-500\">\r\n                        <BiSearchAlt /> Bulbapedia\r\n                    </a>\r\n                </p>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"animate-enter flex flex-col justify-start items-end\">\r\n            <div className={`flex flex-col gap-2 justify-start items-center rounded-md p-2 w-96 h-auto border-2 border-gray-200 transition duration-150 ease-in-out  \r\n                ${selected ? 'border-green-200 ring ring-green-100' : ''}`}>            \r\n                <SelectedPokemon assignable={{item: index}} />\r\n                <div className={`flex flex-col gap-2 justify-start items-center bg-white rounded-md p-2 w-full h-auto border-2 border-gray-200 transition duration-150 ease-in-out \r\n                    ${selected ? 'bg-green-100 border-green-200 ring ring-green-100' : ''}`}>                    \r\n                    <div className=\"flex justify-center items-center w-full gap-2\">\r\n                        <img src={item.sprites.default} alt=\"\" width=\"30px\" height=\"30px\"/>\r\n                        <p className=\"capitalize\">{item.name.replace(/-/g, \" \")}</p>                \r\n                    </div>            \r\n                    <div className=\"flex flex-col justify-start items-center text-sm w-full\" data-tip={formattedEffect} data-for={'dynamic'}>\r\n                        {getEffect()}\r\n                    </div>  \r\n                    <TooltipTags effect={formattedEffect} />          \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { TeamBuilderContext } from '../../context/TeamBuilderContext';\r\nimport Item from './Item';\r\n\r\nexport default function ItemOptions({options}) {\r\n    const context = React.useContext(TeamBuilderContext);\r\n\r\n    const setOptions = () => {\r\n        if (options.length) {\r\n            return (\r\n                options.map((it, i) => (\r\n                    <Item key={i} index={i} item={it} />\r\n                ))                \r\n            );\r\n        } else {\r\n            return (                \r\n                <div className=\"p-4 text-gray-300\">\r\n                    Empty\r\n                </div>            \r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div id=\"items\" className=\"flex flex-col w-full\">\r\n            <div className=\"flex justify-between items-center gap-4 text-center\">\r\n                <span className=\"flex gap-4 items-center\">\r\n                    <p className=\"text-lg\">Item Options</p>\r\n                    <p className=\"text-base text-gray-300\">Assign your selected pokémon to an item.</p>\r\n                </span>\r\n                <span className=\"flex gap-4 items-center\">\r\n                    <p className=\"text-lg\">{context.selectionsMade.items}/{context.selectionsNeeded.items} Pokémon Assigned</p>                    \r\n                </span>\r\n            </div>            \r\n            <div className={`flex flex-wrap justify-center items-start gap-4 p-4 w-full border-2 rounded-md border-gray-200 transition duration-150 ease-in-out\r\n                ${context.selectionsMade.items >= context.selectionsNeeded.items ? 'border-green-200 ring ring-green-100' : ''}`}>\r\n                {setOptions()}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport PokemonOptions from '../components/pokemon/PokemonOptions';\r\nimport MovesetOptions from '../components/moves/MovesetOptions';\r\nimport AbilityOptions from '../components/abilities/AbilityOptions';\r\nimport ItemOptions from '../components/items/ItemOptions';\r\nimport { TeamBuilderContext } from '../context/TeamBuilderContext';\r\nimport { BiLoaderAlt } from 'react-icons/bi';\r\nimport { FaEraser, FaCopy } from 'react-icons/fa';\r\nimport {GoPencil} from 'react-icons/go';\r\nimport { FiExternalLink } from 'react-icons/fi';\r\n\r\nexport default function TeamBuilder({\r\n    loading, randomOptions, pokemonOptions, movesetOptions, abilityOptions, itemOptions, generating,\r\n    generateOptions, clearChoices, exportTeam\r\n    }) {   \r\n    const context = React.useContext(TeamBuilderContext);\r\n\r\n    // Change title.\r\n    useEffect (() => {\r\n        document.title = 'Team Builder - Procedural Pokémon';\r\n    }, []);\r\n\r\n    const getControls = () => {\r\n        if(loading || generating){\r\n            return (                \r\n                <p className=\"flex gap-4 items-center justify-center text-lg p-4 border-2 border-transparent\">\r\n                    <BiLoaderAlt className=\"animate-spin text-2xl\" />\r\n                    {loading ? 'Fetching data from PokeAPI' : (generating ? generationProgress() : 'Generate Options')}\r\n                </p>                \r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <>\r\n                    <button type=\"button\" onClick={() => clearChoices()}\r\n                        className={`flex gap-2 items-center justify-center p-4 rounded-md hover:bg-gray-200 border-2 w-48 transition duration-150 ease-in-out\r\n                        ${Object.values(context.selectionsMade).find(val => val > 0) ? 'bg-red-100 border-red-200 ring ring-red-100' : 'bg-white  border-gray-200 '}`}>\r\n                        <FaEraser /> Clear Choices\r\n                    </button>\r\n                    <button type=\"button\" onClick={() => generateOptions()}\r\n                        className={`flex gap-2 items-center justify-center p-4 rounded-md hover:bg-gray-200 border-2 w-48 transition duration-150 ease-in-out\r\n                        ${pokemonOptions.length > 0 ? 'bg-yellow-100 border-yellow-200 ring ring-yellow-100' : 'bg-white  border-gray-200 '}`}>\r\n                        <GoPencil /> Generate Options\r\n                    </button>\r\n                    <button type=\"button\" onClick={() => exportTeam()}\r\n                        className={`flex gap-2 items-center justify-center p-4 rounded-md hover:bg-gray-200 border-2 w-48 transition duration-150 ease-in-out\r\n                        ${Object.values(context.sectionsCompleted).every(val => val) ? 'bg-green-100 border-green-200 ring ring-green-100' : 'bg-white  border-gray-200 '}`}>\r\n                        <FaCopy /> Export Team\r\n                    </button>\r\n                    <a type=\"button\" href=\"https://play.pokemonshowdown.com/teambuilder\" target=\"_blank\" rel=\"noreferrer\"\r\n                        className=\"flex gap-2 items-center justify-center p-4 rounded-md bg-blue-100 hover:bg-gray-200 border-2 border-blue-200 ring ring-blue-100 w-48 transition duration-150 ease-in-out\">\r\n                        <FiExternalLink /> Showdown Teams\r\n                    </a>\r\n                </>\r\n            )\r\n        }        \r\n    }\r\n    \r\n    const generationProgress = () => {\r\n        if(pokemonOptions.length < randomOptions.pokemons)\r\n            return `Generating Pokémon (${pokemonOptions.length}/${randomOptions.pokemons})`;   \r\n        else if(movesetOptions.length < randomOptions.movesets)\r\n            return `Generating Movesets (${movesetOptions.length}/${randomOptions.movesets})`;\r\n        else if(abilityOptions.length < randomOptions.abilities)\r\n            return `Generating Abilities (${abilityOptions.length}/${randomOptions.abilities})`;\r\n        else if(itemOptions.length < randomOptions.items)\r\n            return `Generating Items (${itemOptions.length}/${randomOptions.items})`;\r\n        else\r\n            return 'Done!';\r\n    }    \r\n\r\n    return (           \r\n        <div className=\"flex flex-col gap-8 justify-start items-center p-8 w-full\">  \r\n            <div id=\"controls\" className=\"flex flex-col w-full\">\r\n                <div className=\"flex justify-start items-center gap-4 text-center\">                    \r\n                    <p className=\"text-lg\">Actions</p>\r\n                    <p className=\"text-base text-gray-300\">Actions for building your team.</p>\r\n                </div>            \r\n                <div className=\"flex flex-col justify-start items-center gap-4 p-4 w-full border-2 rounded-md border-gray-200\">\r\n                    <div className=\"flex flex-wrap justify-center items-center gap-4\">\r\n                        {getControls()}\r\n                    </div>                                                                       \r\n                </div>                                                            \r\n            </div>\r\n            <PokemonOptions options={pokemonOptions} />\r\n            <MovesetOptions options={movesetOptions} />  \r\n            <AbilityOptions options={abilityOptions} />   \r\n            <ItemOptions options={itemOptions} />        \r\n\r\n        </div>                    \r\n    )\r\n}","import React, {useEffect} from 'react'\r\n\r\nexport default function Tools() {\r\n    // Change title.\r\n    useEffect (() => {\r\n        document.title = 'About - Procedural Pokémon';\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"flex flex-col gap-8 justify-start items-center p-8 w-full\">              \r\n            <div id=\"sectionName\" className=\"flex flex-col w-full\">\r\n                <div className=\"flex justify-start items-center gap-4 text-center\">                    \r\n                    <p className=\"text-lg\">About</p>\r\n                    <p className=\"text-base text-gray-300\">General resources.</p>\r\n                </div>            \r\n                <div className=\"flex flex-col justify-start items-start gap-4 p-4 w-full border-t-2 border-gray-200\">\r\n                    Text                   \r\n                </div>                                                            \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nexport default function Tooltips() {\r\n    // Rebind tooltips when component mounts/update.\r\n    useEffect(() => {\r\n        ReactTooltip.rebuild()\r\n    });\r\n\r\n    // Format dynamic tooltip.\r\n    const formatTooltipData = (data) => {   \r\n        if(!data)\r\n            return null;        \r\n        data = data.split(\"|\");\r\n        if(data.length === 2){\r\n            let header = data[0];\r\n            let content = data[1].split(\"*\");\r\n            return(\r\n                <div className=\"text-center\">\r\n                    <p>{header}</p>\r\n                    {content.map((c, i) => {return <p key={i}>{c}</p>})}\r\n                </div>\r\n            );            \r\n        }\r\n        else return null;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ReactTooltip id=\"pokemon\" delayShow={200} getContent={(dataTip) => formatTooltipData(dataTip)}/>\r\n            <ReactTooltip id=\"moves\" delayShow={200} getContent={(dataTip) => formatTooltipData(dataTip)}/>\r\n            <ReactTooltip id=\"effects\" delayShow={200} getContent={(dataTip) => formatTooltipData(dataTip)}/>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState, useEffect, useCallback} from 'react';\r\nimport axios from 'axios';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport * as api from './constants/api';\r\nimport * as filters from './constants/filters';\r\nimport * as usability from './constants/usability';\r\nimport * as team from './constants/team';\r\nimport { TeamBuilderContext } from './context/TeamBuilderContext';\r\nimport Sidebar from './components/Sidebar';\r\nimport Footer from './components/Footer';\r\nimport Home from './containers/Home';\r\nimport Format from './containers/Format';\r\nimport TeamBuilder from './containers/TeamBuilder';\r\nimport About from './containers/About';\r\nimport toast, { Toaster } from 'react-hot-toast';\r\nimport Tooltips from './components/Tooltips';\r\nimport {getStatPercentage} from './components/pokemon/PokemonStats';\r\n\r\nexport default function App() {\r\n  // ----- STATE -----\r\n  // API\r\n  const [loading, setLoading] = useState(true);  \r\n  const [pokemonList, setPokemonList] = useState([]);\r\n  const [topPokemonList, setTopPokemonList] = useState([]);\r\n  const [moveList, setMoveList] = useState([]);\r\n  const [abilityList, setAbilityList] = useState([]);  \r\n  const [itemList, setItemList] = useState([]);  \r\n  const [typeList, setTypeList] = useState([]);\r\n  const [natureList, setNatureList] = useState([]);   \r\n\r\n  // Team builder.\r\n  const [generating, setGenerating] = useState(false);\r\n  const [generationStep, setGenerationStep] = useState(0);\r\n  const [pokemonOptions, setPokemonOptions] = useState([]);\r\n  const [movesetOptions, setMovesetOptions] = useState([]);\r\n  const [abilityOptions, setAbilityOptions] = useState([]);\r\n  const [itemOptions, setItemOptions] = useState([]);\r\n  const [optionsData, setOptionsData] = useState({\r\n    movesetsPerType: [],\r\n    usableTypes: [],\r\n    reverseOptions: []\r\n  });\r\n  const [selectionsMade, setSelectionsMade] = useState({\r\n    pokemons: 0,\r\n    movesets: 0,\r\n    moves: [0, 0, 0, 0, 0, 0],\r\n    abilities: 0,\r\n    items: 0\r\n  });\r\n  const [sectionsCompleted, setSectionsCompleted] = useState({\r\n    pokemons: false,\r\n    movesets: false,\r\n    moves: false,\r\n    abilities: false,\r\n    items: false\r\n  });  \r\n\r\n  // ----- GENERATION -----\r\n  // Fetch lists from api on mount.\r\n  useEffect (() => {\r\n    let cancel = false;\r\n    setLoading(true);  \r\n\r\n    async function fetchData() {      \r\n      const pokemonResults = await axios.get(`${api.url}pokemon?limit=${api.pokemonCount}`);\r\n      let topPokemonResults = [];\r\n      for(let i = 0; i < api.topPokemonCountOffset.length; i++){\r\n        topPokemonResults.push(await \r\n          (await axios.get(`${api.url}pokemon?limit=${api.topPokemonCountOffset[i][0]}&offset=${api.topPokemonCountOffset[i][1]}`)\r\n        ).data.results);\r\n      };      \r\n      topPokemonResults = [].concat.apply([], topPokemonResults);\r\n      const moveResults = await axios.get(`${api.url}move?limit=${api.moveCount}`);\r\n      const abilityResults = await axios.get(`${api.url}ability?limit=${api.abilityCount}`);\r\n      let itemResults = [];\r\n      for(let i = 0; i < api.itemCountOffset.length; i++){\r\n        itemResults.push(await \r\n          (await axios.get(`${api.url}item?limit=${api.itemCountOffset[i][0]}&offset=${api.itemCountOffset[i][1]}`)\r\n        ).data.results);\r\n      };      \r\n      itemResults = [].concat.apply([], itemResults);\r\n      const typeResults = await axios.get(`${api.url}type?limit=${api.typeCount}`);\r\n      const natureResults = await axios.get(`${api.url}nature?nature=${api.natureCount}`);\r\n      if(!cancel) {\r\n        setPokemonList(pokemonResults.data.results);\r\n        setTopPokemonList(topPokemonResults);\r\n        setMoveList(moveResults.data.results);\r\n        setAbilityList(abilityResults.data.results);\r\n        setItemList(itemResults);\r\n        setTypeList(typeResults.data.results);\r\n        setNatureList(natureResults.data.results);\r\n        setLoading(false);              \r\n      }\r\n    };\r\n    fetchData();\r\n    \r\n    return () => cancel = true;\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps    \r\n  }, []);\r\n\r\n  // Start generation.\r\n  function generateOptions() {        \r\n    setPokemonOptions([]);\r\n    setMovesetOptions([]); \r\n    setAbilityOptions([]);\r\n    setItemOptions([]);\r\n    setOptionsData({\r\n      movesetsPerType: [],\r\n      usableTypes: [],\r\n      reverseOptions: []\r\n    });\r\n    setGenerationStep(0);\r\n    setGenerating(true);    \r\n  }\r\n\r\n  // Generate pokemon \r\n  useEffect(() => {\r\n    let cancel = false;\r\n\r\n    // Get a new set of pokemon options.\r\n    async function getPokemonOptions() {\r\n      let pokemons = [];\r\n      let shinyIndex = Math.floor(Math.random()*team.randomOptions.pokemons);  \r\n      let topPokemon = 0;\r\n      let checkTopPokemon = true;\r\n\r\n      for (let index = 0; index < team.randomOptions.pokemons; index++) {\r\n        const pokemon = await getNewPokemon(pokemons, topPokemon);\r\n        const species = await axios.get(pokemon.species.url);\r\n        // gender\r\n        pokemon.gender_rate = species.data.gender_rate;\r\n        if(pokemon.gender_rate < 0)\r\n          pokemon.gender = \"genderless\";\r\n        else if(FindKeywords(pokemon.name, '-', ['male']))\r\n          pokemon.gender = \"male\";\r\n        else if(FindKeywords(pokemon.name, '-', ['female']))\r\n          pokemon.gender = \"female\";\r\n        else if(pokemon.gender_rate === 0)\r\n          pokemon.gender = \"male\";\r\n        else if(pokemon.gender_rate === 8)\r\n          pokemon.gender = \"female\";\r\n        else {\r\n          pokemon.gender = (Math.random()*101) <= (pokemon.gender_rate * 12.5) ? \"female\" : \"male\";\r\n        }        \r\n        // balance\r\n        if(topPokemon < team.topPokemonBalance)\r\n          checkTopPokemon = true;                \r\n        pokemon.is_mythical = species.data.is_mythical;\r\n        pokemon.is_legendary = species.data.is_legendary;  \r\n        if(checkTopPokemon && (pokemon.is_mythical || pokemon.is_legendary)){\r\n          topPokemon += 1;      \r\n          checkTopPokemon = false;\r\n        }          \r\n        pokemon.shiny = (index === shinyIndex);\r\n        pokemon.level = pokemon.shiny ? 60 : 50;\r\n        // stats        \r\n        pokemon.stats.map(s => {          \r\n          s.ev = 0;\r\n          s.iv = -1;\r\n          return s;\r\n        });                       \r\n        let stat = null;\r\n        for(let i = 0; i < 3; i++){\r\n          do{\r\n            stat = pokemon.stats[Math.floor(Math.random()*pokemon.stats.length)];\r\n          } while (stat.ev > 0)\r\n          if (i <= 1)\r\n            stat.ev = 252;\r\n          else if (i === 2)\r\n            stat.ev = 4;        \r\n        }        \r\n        for(let i = 0; i < 6; i++){\r\n          do{\r\n            stat = pokemon.stats[Math.floor(Math.random()*pokemon.stats.length)];\r\n          } while (stat.iv >= 0)\r\n          if (i <= 2)\r\n            stat.iv = 31;\r\n          else if (i >= 3)\r\n            stat.iv = Math.floor(Math.random() * 32);                    \r\n        }\r\n        pokemon.nature = natureList[Math.floor(Math.random()*natureList.length)];\r\n        const nature = await axios.get(pokemon.nature.url);\r\n        pokemon.nature.increased = nature.data.increased_stat;\r\n        pokemon.nature.decreased = nature.data.decreased_stat;\r\n        pokemon.stats.map((s, i) => {\r\n          if(i === 0)\r\n            s.calculated_stat = Math.floor((s.base_stat * 2 + s.iv + (s.ev/4)) * pokemon.level / 100 + 10 + pokemon.level);\r\n          else{\r\n            s.calculated_stat = (s.base_stat * 2 + s.iv + (s.ev/4)) * pokemon.level / 100 + 5;\r\n            if(pokemon.nature.increased && pokemon.nature.increased.name === s.stat.name)\r\n              s.calculated_stat *= 1 + 0.1;\r\n            else if(pokemon.nature.decreased && pokemon.nature.decreased.name === s.stat.name)\r\n              s.calculated_stat *= 1 - 0.1;\r\n            s.calculated_stat = Math.floor(s.calculated_stat);\r\n          }\r\n          return s;\r\n        });\r\n        pokemon.highestStats = pokemon.stats.map((s, i) => {\r\n          return {statIndex: i, \r\n            percentage: getStatPercentage(i === 0 ? team.statRanges.hp : team.statRanges.general, s.calculated_stat)}\r\n        });\r\n        pokemon.highestStats.sort(function(a, b){return b.percentage-a.percentage});\r\n        pokemon.highestStats = pokemon.highestStats.filter(s => s.percentage >= 50);\r\n        pokemon.stats.push({name: 'total', base_stat: getTotalStats(pokemon.stats)});\r\n        if(checkTopPokemon && (pokemon.stats[6].base_stat >= team.topPokemonTotalStatsThreshold)){\r\n          topPokemon += 1;      \r\n          checkTopPokemon = false;\r\n        }   \r\n        // selections\r\n        pokemon.selected = false;\r\n        pokemon.moveset = null;\r\n        pokemon.ability = null;\r\n        pokemon.item = null;                        \r\n\r\n        pokemons.push(pokemon);\r\n        if(!cancel)\r\n          setPokemonOptions([...pokemons]); \r\n      }\r\n      if(!cancel)\r\n        setGenerationStep(1);\r\n    }\r\n\r\n    // Get a new single pokemon option.\r\n    async function getNewPokemon(currentPokemons, topPokemon) {    \r\n      let newPokemon = '';\r\n      let finalPokemon = '';\r\n      let isTopPokemon = false;\r\n\r\n      do {          \r\n          let pokemon = null;\r\n          if(topPokemon < team.topPokemonBalance && currentPokemons.length + team.topPokemonBalance >= team.randomOptions.pokemons)\r\n            pokemon = topPokemonList[Math.floor(Math.random()*topPokemonList.length)];\r\n          else\r\n            pokemon = pokemonList[Math.floor(Math.random()*pokemonList.length)];\r\n\r\n          const initialPokemon = await axios.get(`${api.url}pokemon/${pokemon.name}`);\r\n          const species = await axios.get(initialPokemon.data.species.url);\r\n          const evolutions = await axios.get(species.data.evolution_chain.url);\r\n          \r\n          // Get an array of evolutions.\r\n          let evoChain = [];\r\n          let evoData = evolutions.data.chain;\r\n          do {                        \r\n              // Current.\r\n              evoChain.push(evoData.species.name);            \r\n              let numberOfEvolutions = evoData['evolves_to'].length;  \r\n                                    \r\n              // Branching evolutions.\r\n              if(numberOfEvolutions > 1) {\r\n                let nextSpecies = [];\r\n                let lastSpecies = [];\r\n                for (let i = 0; i < numberOfEvolutions; i++) {                  \r\n                  nextSpecies.push(evoData.evolves_to[i].species.name);\r\n                  \r\n                  // Branch continuation.\r\n                  if(evoData.evolves_to[i].hasOwnProperty('evolves_to') && evoData.evolves_to[i].evolves_to.length > 0)\r\n                    lastSpecies.push(evoData.evolves_to[i].evolves_to[0].species.name);\r\n                }\r\n                evoChain.push(nextSpecies);\r\n  \r\n                if(lastSpecies.length > 0)\r\n                evoChain.push(lastSpecies);\r\n                \r\n                // Stop the chain, all branching evolutions are symmetrical.\r\n                evoData = null;\r\n              }\r\n              else {                \r\n                // Evolution.\r\n                evoData = evoData['evolves_to'][0];\r\n              }\r\n                        \r\n          } while (!!evoData && evoData.hasOwnProperty('evolves_to'));   \r\n          \r\n          // Get the/a final evolution.\r\n          let finalEvolution = evoChain[evoChain.length - 1];\r\n          if(Array.isArray(finalEvolution)){\r\n            finalEvolution = finalEvolution[Math.floor(Math.random()*finalEvolution.length)];        \r\n          }\r\n  \r\n          // Get the varieties for the final evolution.\r\n          const finalSpecies = await axios.get(`${api.url}pokemon-species/${finalEvolution}`);\r\n          let varieties = [];\r\n          finalSpecies.data.varieties.forEach((v, i) => {\r\n            varieties.push(finalSpecies.data.varieties[i].pokemon.name)\r\n          });                \r\n  \r\n          // Filter varieties for more balance.\r\n          varieties = varieties.filter(v => {          \r\n            return !FindKeywords(v, '-', filters.pokemonFilter, filters.pokemonAllow);            \r\n          });       \r\n  \r\n          // Get the final pokemon from the varieties.\r\n          finalPokemon = varieties[Math.floor(Math.random()*varieties.length)];\r\n\r\n          // Get a random form\r\n\r\n          if(finalPokemon){\r\n            newPokemon = await axios.get(`${api.url}pokemon/${finalPokemon}`);\r\n            // Check for top pokemon balance\r\n            isTopPokemon = (finalSpecies.data.is_mythical || finalSpecies.data.is_legendary || \r\n              getTotalStats(newPokemon.data.stats) >= team.topPokemonTotalStatsThreshold);            \r\n          }\r\n      } while (!finalPokemon || checkDuplicatedName(currentPokemons, finalPokemon) ||\r\n              (isTopPokemon && topPokemon >= team.topPokemonBalance) ||\r\n              (!isTopPokemon && topPokemon < team.topPokemonBalance && \r\n              currentPokemons.length + team.topPokemonBalance >= team.randomOptions.pokemons))\r\n      return newPokemon.data\r\n    };\r\n\r\n    if(generating && generationStep === 0 && pokemonList.length > 0){      \r\n      getPokemonOptions();      \r\n    }\r\n    return () => cancel = true;\r\n  }, [generating, generationStep, pokemonList, topPokemonList, natureList])\r\n\r\n  // Helper functions for usability checks.\r\n  const getPokemonUsability = useCallback((pokemons) => {    \r\n    return pokemonOptions.find(p => pokemons.includes(p.name));\r\n  }, [pokemonOptions]);\r\n\r\n  const getRandomPokemonType = useCallback((exclude) => {   \r\n    let types = typeList.filter(t => !exclude.includes(t.name)); \r\n    return types[Math.floor(Math.random()*types.length)].name;\r\n  }, [typeList]);\r\n\r\n  // Generate movesets\r\n  useEffect(() => {\r\n    let cancel = false;\r\n\r\n    // Get a set of moveset options.  \r\n    async function getMovesetOptions() {              \r\n      let movesets = [];            \r\n\r\n      for (let index = 0; index < team.randomOptions.movesets; index++) {\r\n        const moveset = await getNewMoveset()\r\n        movesets.push(moveset);\r\n        if(!cancel)\r\n          setMovesetOptions([...movesets]); \r\n      }  \r\n      if(!cancel)\r\n        setGenerationStep(2);\r\n    }       \r\n\r\n    // Get a new moveset option.\r\n    async function getNewMoveset() {    \r\n      let newMoveset = [];\r\n      let move = '';\r\n      let status = false;\r\n      let statusMoves = 0;  \r\n      let usable = true;  \r\n      let combo = '';\r\n      \r\n      for (let index = 0; index < team.randomOptions.moves; index++) {            \r\n        do{        \r\n          if(combo){\r\n            move = {name: combo};\r\n            combo = '';\r\n          }\r\n          else\r\n            move = moveList[Math.floor(Math.random()*moveList.length)];\r\n          move = await axios.get(`${api.url}move/${move.name}`);\r\n          status = move.data.damage_class && move.data.damage_class.name === 'status'; \r\n          usable = true;       \r\n\r\n          switch(move.data.name){            \r\n            case 'swallow':\r\n            case 'spit-up':\r\n              // Check space for combo moves.\r\n              if(!newMoveset.find(m => m.name === 'stockpile')){\r\n                usable = (team.randomOptions.moves - newMoveset.length) >= 2;\r\n                if(usable){\r\n                  if(move.data.name === 'swallow' && (team.moveStatusLimit - statusMoves) >= 2)\r\n                    combo = 'stockpile';\r\n                  else if(move.data.name === 'spit-up' && (team.moveStatusLimit - statusMoves) >= 1)\r\n                    combo = 'stockpile';\r\n                  else if((team.moveStatusLimit - statusMoves) <= 0)\r\n                    usable = false;\r\n                }                                  \r\n              }                          \r\n              break;              \r\n            case 'stockpile':\r\n              // Check space for combo moves.\r\n              if(!newMoveset.find(m => m.name === 'swallow') && !newMoveset.find(m => m.name === 'spit-up')){\r\n                usable = (team.randomOptions.moves - newMoveset.length) >= 2;\r\n                if(usable){\r\n                  if((team.moveStatusLimit - statusMoves) >= 2)\r\n                    combo = Math.random() < 0.5 ? 'swallow' : 'spit-up';\r\n                  else if((team.moveStatusLimit - statusMoves) >= 1)\r\n                    combo = 'spit-up';\r\n                  else if((team.moveStatusLimit - statusMoves) <= 0)\r\n                    usable = false;\r\n                }\r\n              }\r\n              break;            \r\n            case 'hyperspace-fury':\r\n              // Check for specific pokemon.\r\n              usable = getPokemonUsability(['hoopa-unbound']);\r\n              break;\r\n            case 'dark-void':\r\n              // Check for specific pokemon.\r\n              usable = getPokemonUsability(['darkrai']);\r\n              break;\r\n            case 'aura-wheel':\r\n              // Check for specific pokemon.\r\n              usable = getPokemonUsability(['morpeko']);\r\n              break;\r\n            case 'hidden-power':\r\n              // Set a random type other than normal and fairy.\r\n              move.data.type.name = getRandomPokemonType(['normal', 'fairy']);\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n        } while (checkDuplicatedName(newMoveset, move.data.name) || \r\n                FindKeywords(move.data.name, '-', filters.moveFilter, filters.moveAllow) ||\r\n                (status && statusMoves >= team.moveStatusLimit) || !usable)\r\n        move.data.selected = false;\r\n        newMoveset.push(move.data);      \r\n        if(status){\r\n          statusMoves = statusMoves + 1;\r\n          status = false;\r\n        }\r\n      }\r\n      return newMoveset;\r\n    }\r\n\r\n    if(generating && generationStep === 1 && moveList.length > 0){      \r\n      getMovesetOptions();\r\n    }\r\n    return () => cancel = true;\r\n  }, [generating, generationStep, moveList, getPokemonUsability, getRandomPokemonType]);\r\n\r\n  // Respond to moveset options generated completely.\r\n  useEffect (() => {  \r\n    let cancel = false;\r\n\r\n    if(generating && generationStep === 2 && movesetOptions.length >= team.randomOptions.movesets){\r\n      let msPerType = [];\r\n\r\n      typeList.forEach(type => {\r\n        let msInType = {name: type.name, movesets: 0};\r\n        movesetOptions.forEach(ms => {      \r\n          if(ms.find(m => m.type.name === type.name && m.damage_class.name !== 'status')){\r\n            msInType.movesets += 1;          \r\n          }\r\n        });\r\n        msPerType.push(msInType);        \r\n      });       \r\n      let uTypes = msPerType.filter(t => t.movesets !== 0).map(t => {return t.name});   \r\n\r\n      if(!cancel){\r\n        setOptionsData(s => {return {...s, movesetsPerType: msPerType, usableTypes: uTypes} });      \r\n        setGenerationStep(3);\r\n      }\r\n    }    \r\n    return () => cancel = true;\r\n  }, [generating, generationStep, movesetOptions, typeList]);  \r\n\r\n  // Helper functions for usability checks.\r\n  const getPokemonTypeUsability = useCallback((type) => {\r\n    return pokemonOptions.find(p => p.types.find(t => t.type.name === type));\r\n  }, [pokemonOptions])  \r\n\r\n  const getMovesetTypeUsability = useCallback((types) => {\r\n    let usable = types.find(t => optionsData.usableTypes.includes(t));\r\n    return usable;\r\n  }, [optionsData]);\r\n\r\n  const getTypeFromEffect = useCallback((effect) => {\r\n    return effect.replace(/-/g, \" \").split(\" \").find(keyword => optionsData.usableTypes.includes(keyword));\r\n  }, [optionsData]);\r\n\r\n  const getMovesetTypeUsabilityForItems = useCallback((item, currentItems) => {\r\n    let usable = false;\r\n    let type = getTypeFromEffect(item.effect_entries.find(e => e.language.name === 'en').effect.toLowerCase());\r\n    if(type){  \r\n      // Check current items.          \r\n      let itemsOfType = 0;\r\n      currentItems.forEach(ci => {\r\n        if((ci.category.name === 'type-enhancement' || ci.category.name === 'plates') && \r\n          getTypeFromEffect(ci.effect_entries.find(e => e.language.name === 'en').effect.toLowerCase()) === type)                \r\n        itemsOfType += 1;              \r\n      });    \r\n      usable = optionsData.movesetsPerType.find(mt => mt.name === type && itemsOfType < mt.movesets);\r\n    }\r\n    return usable;\r\n  }, [optionsData, getTypeFromEffect]);\r\n\r\n  const getSpecificOptionsUsabilityForItems = useCallback((moves, abilities, items, currentItems) => {\r\n    let usable = false;            \r\n    let maxOptions = 0;\r\n    let itemsOfType = 0;\r\n\r\n    // Get max options.\r\n    if(moves){      \r\n      movesetOptions.forEach(mo => {\r\n        if(mo.find(m => moves.includes(m.name)))\r\n          maxOptions += 1\r\n      });\r\n    }    \r\n    if(abilities){      \r\n      if(abilityOptions.find(a => abilities.includes(a.name)))\r\n        maxOptions += 1;\r\n    }                    \r\n    // Get current items.  \r\n    if(items){    \r\n      currentItems.forEach(ci => {                \r\n        if(ci.name.split('-').find(keyword => items.includes(keyword)))\r\n          itemsOfType += 1;\r\n      });    \r\n      usable = (itemsOfType < maxOptions);\r\n    }    \r\n    else{\r\n      // Specific case for plates.\r\n      // Get current items.\r\n      currentItems.forEach(ci => {        \r\n        if(ci.category.name === 'plates' &&\r\n          !optionsData.usableTypes.includes(getTypeFromEffect(ci.effect_entries.find(e => e.language.name === 'en').effect.toLowerCase())))\r\n          itemsOfType += 1;        \r\n      });\r\n      usable = (itemsOfType < maxOptions);\r\n    }\r\n\r\n    return usable;\r\n  }, [optionsData, movesetOptions, abilityOptions, getTypeFromEffect]);\r\n\r\n  const getMoveMechanicUsability = useCallback((mechanic, exactMoves) => {\r\n    let moveNames = movesetOptions.map(ms => { return ms.map(m => { return m.name } ) });\r\n    moveNames = [].concat.apply([], moveNames);\r\n    \r\n    if(exactMoves && exactMoves.length > 0){      \r\n      return moveNames.find(name => exactMoves.includes(name));\r\n    }\r\n    else {\r\n      switch(mechanic){\r\n        case 'charge':\r\n          return moveNames.find(name => usability.chargeMoves.includes(name));\r\n        case 'bind':\r\n          return moveNames.find(name => usability.bindMoves.includes(name));\r\n        case 'drain':\r\n          return moveNames.find(name => usability.drainMoves.includes(name));\r\n        case 'terrain':\r\n          return moveNames.find(name => usability.terrainMoves.includes(name));\r\n        case 'barrier':        \r\n          return moveNames.find(name => usability.barrierMoves.includes(name));\r\n        case 'orb':        \r\n          return moveNames.find(name => usability.orbMoves.includes(name));\r\n        case 'punch':        \r\n          return moveNames.find(name => usability.punchMoves.includes(name));\r\n        case 'multistrike':        \r\n          return moveNames.find(name => usability.multistrikeMoves.includes(name));\r\n        case 'recoil':        \r\n          return moveNames.find(name => usability.recoilMoves.includes(name));\r\n        case 'bite':        \r\n          return moveNames.find(name => usability.biteMoves.includes(name));\r\n        case 'pulse':        \r\n          return moveNames.find(name => usability.pulseMoves.includes(name));\r\n        case 'sound':        \r\n          return moveNames.find(name => usability.soundMoves.includes(name));\r\n        case 'heal':        \r\n          return moveNames.find(name => usability.healMoves.includes(name));\r\n        case 'contact':        \r\n          return moveNames.find(name => usability.contactMoves.includes(name));\r\n        case 'bad-item':        \r\n          return moveNames.find(name => usability.badItemMoves.includes(name));\r\n        case 'bad-ability':        \r\n          return moveNames.find(name => usability.badAbilityMoves.includes(name));\r\n        default:\r\n          return false;\r\n      }    \r\n    }\r\n  }, [movesetOptions]);\r\n\r\n  const getAbilityMechanicUsability = useCallback((mechanic, exactAbilities) => {\r\n    let abilityNames = abilityOptions.map(a => { return a.name } );\r\n\r\n    if(exactAbilities && exactAbilities.length > 0){     \r\n      return abilityNames.find(name => exactAbilities.includes(name));\r\n    }\r\n    else {\r\n      switch(mechanic){\r\n        case 'terrain':\r\n          return abilityNames.find(name => usability.terrainAbilities.includes(name));      \r\n        case 'orb':\r\n          return abilityNames.find(name => usability.orbAbilities.includes(name));\r\n        default:\r\n          return false;\r\n      }    \r\n    }\r\n  }, [abilityOptions])\r\n\r\n  // Helper funciton for usability checks.\r\n  const getReverseOption = useCallback((index) => {\r\n    if(optionsData.reverseOptions[index])\r\n      return optionsData.reverseOptions[index]\r\n    else\r\n      return null;      \r\n  }, [optionsData])\r\n\r\n  // Generate abilities\r\n  useEffect(() => {\r\n    let cancel = false;\r\n\r\n    // Get a set of ability options.\r\n    async function getAbilityOptions() {      \r\n      let abilities = [];            \r\n\r\n      for (let index = 0; index < team.randomOptions.abilities; index++) {\r\n        const ability = await getNewAbility(abilities);\r\n        abilities.push(ability);\r\n        if(!cancel)\r\n          setAbilityOptions([...abilities]); \r\n      }                 \r\n      if(!cancel)\r\n        setGenerationStep(4);\r\n    }\r\n\r\n    // Get a new ability option.\r\n    async function getNewAbility(currentAbilities) {    \r\n      let newAbility = ''; \r\n      let usable = true;      \r\n    \r\n      do{        \r\n        let ability = abilityList[Math.floor(Math.random()*abilityList.length)];      \r\n        newAbility = await axios.get(`${api.url}ability/${ability.name}`);     \r\n        usable = true;    \r\n                               \r\n        switch(newAbility.data.name){\r\n          case 'iron-fist':\r\n            // Check for punch moves.\r\n            usable = getMoveMechanicUsability('punch');            \r\n            break;                       \r\n          case 'skill-link':\r\n            // Check for multistrike moves.\r\n            usable = getMoveMechanicUsability('multistrike');            \r\n            break;\r\n          case 'reckless':\r\n            // Check for recoil/crash moves.\r\n            usable = getMoveMechanicUsability('recoil');            \r\n            break;\r\n          case 'strong-jaw':\r\n            // Check for bite moves.\r\n            usable = getMoveMechanicUsability('bite');            \r\n            break;\r\n          case 'mega-launcher':\r\n            // Check for pulse/aura moves.\r\n            usable = getMoveMechanicUsability('pulse');            \r\n            break;\r\n          case 'liquid-voice':\r\n            // Check for sound moves.\r\n            usable = getMoveMechanicUsability('sound');\r\n            break;\r\n          case 'punk-rock':\r\n            // Check for sound moves.\r\n            usable = (getMoveMechanicUsability('sound') || getMoveMechanicUsability('', ['sparkling-aria']));\r\n            break;\r\n          case 'triage':\r\n            // Check for heal moves.\r\n            usable = getMoveMechanicUsability('heal');\r\n            break;          \r\n          case 'flash-fire':\r\n          case 'blaze':\r\n            // Check for fire moves.\r\n            usable = getMovesetTypeUsability(['fire']);\r\n            break;\r\n          case 'overgrow':\r\n            // Check for grass moves.\r\n            usable = getMovesetTypeUsability(['grass']);\r\n            break;\r\n          case 'torrent':\r\n            // Check for water moves.\r\n            usable = getMovesetTypeUsability(['water']);\r\n            break;\r\n          case 'swarm':\r\n            // Check for bug moves.\r\n            usable = getMovesetTypeUsability(['bug']);\r\n            break;\r\n          case 'scrappy':\r\n            // Check for normal or fighting moves.\r\n            usable = getMovesetTypeUsability(['normal', 'fighting']);\r\n            break;\r\n          case 'sand-force':\r\n            // Check for rock, ground and steel moves.\r\n            usable = getMovesetTypeUsability(['rock', 'ground', 'steel']);\r\n            break;\r\n          case 'gale-wings':\r\n            // Check for flying moves.\r\n            usable = getMovesetTypeUsability(['flying']);\r\n            break;\r\n          case 'dark-aura':\r\n            // Check for dark moves.\r\n            usable = getMovesetTypeUsability(['dark']);\r\n            break;\r\n          case 'fairy-aura':\r\n            // Check for fairy moves.\r\n            usable = getMovesetTypeUsability(['fairy']);\r\n            break;\r\n          case 'steelworker':\r\n            // Check for steel moves.\r\n            usable = getMovesetTypeUsability(['steel']);\r\n            break;\r\n          case 'transistor':\r\n            // Check for electric moves.\r\n            usable = getMovesetTypeUsability(['electric']);\r\n            break;\r\n          case 'dragons-maw':\r\n            // Check for dragon moves.\r\n            usable = getMovesetTypeUsability(['dragon']);\r\n            break;            \r\n          case 'refrigerate':\r\n          case 'pixilate':\r\n          case 'galvanize':\r\n          case 'aerilate': \r\n            // Check for normal moves.\r\n            usable = getMovesetTypeUsability(['normal']);\r\n            break;\r\n          case 'tough-claws':\r\n          case 'unseen-fist':\r\n            // Check for contact moves.\r\n            usable = getMoveMechanicUsability('contact');\r\n            break; \r\n          case 'multitype':\r\n            // Check for specific pokemon.\r\n            usable = getPokemonUsability(['arceus']);\r\n            break;\r\n          case 'rks-system':\r\n            // Check for specific pokemon.\r\n            usable = getPokemonUsability(['silvally']);\r\n            break;\r\n          case 'ice-face':\r\n            // Check for specific pokemon.\r\n            usable = getPokemonUsability(['eiscue-ice', 'eiscue-noice']);\r\n            break;\r\n          case 'hunger-switch':\r\n            // Check for specific pokemon.\r\n            usable = getPokemonUsability(['morpeko']);\r\n            break;\r\n          case 'forecast':\r\n            // Check for specific pokemon.\r\n            usable = getPokemonUsability(['castform', 'castform-sunny', 'castform-rainy', 'castform-snowy']);\r\n            break;\r\n          case 'flower-gift':\r\n            // Check for specific pokemon.\r\n            usable = getPokemonUsability(['cherrim']);\r\n            break;\r\n          case 'zen-mode':\r\n            // Check for specific pokemon. No effect: 'darmanitan-zen', 'darmanitan-zen-galar'\r\n            usable = getPokemonUsability(['darmanitan-standard', 'darmanitan-standard-galar']);\r\n            break;\r\n          case 'battle-bond':\r\n            // Check for specific pokemon.\r\n            usable = getPokemonUsability(['greninja']);\r\n            break;\r\n          case 'stance-change':\r\n            // Check for specific pokemon.\r\n            usable = (getPokemonUsability(['aegislash-shield']) || (getPokemonUsability(['aegislash-blade']) && getMoveMechanicUsability('', ['kings-shield'])));\r\n            break;\r\n          case 'power-construct':\r\n            // Check for specific pokemon. No effect: 'zygarde-complete'\r\n            usable = getPokemonUsability(['zygarde-10', 'zygarde-50',]);\r\n            break;\r\n          case 'shields-down':\r\n            // Check for specific pokemon.\r\n            usable = getPokemonUsability(['minior-meteror', 'minior-core']);\r\n            break;\r\n          case 'disguise':\r\n            // Check for specific pokemon. No effect: 'mimikyu-busted'\r\n            usable = getPokemonUsability(['mimikyu-disguised']);\r\n            break;\r\n          case 'gulp-missile':\r\n            // Check for specific pokemon.\r\n            usable = (getPokemonUsability(['cramorant']) && getMoveMechanicUsability('', ['surf', 'dive']));\r\n            break;\r\n          case 'truant':\r\n          case 'stall':\r\n          case 'klutz':\r\n          case 'slow-start':\r\n          case 'defeatist': \r\n            // Check for bad abilities.\r\n            usable = getMoveMechanicUsability('bad-ability');\r\n            break;\r\n          default:\r\n            break;\r\n        }                  \r\n      } while (checkDuplicatedName(currentAbilities, newAbility.data.name) || \r\n              FindKeywords(newAbility.data.name, '-', filters.abilityFilter, filters.abilityAllow) || !usable)      \r\n\r\n      return newAbility.data;\r\n    }\r\n\r\n    if(generating && generationStep === 3 && abilityList.length > 0){      \r\n      getAbilityOptions();\r\n    }\r\n    return () => cancel = true;\r\n  }, [generating, generationStep, abilityList, \r\n      getMoveMechanicUsability, getMovesetTypeUsability, getPokemonUsability]);\r\n\r\n  // Respond to ability options generated completely.\r\n  useEffect (() => {  \r\n    let cancel = false;\r\n\r\n    if(generating && generationStep === 4 && abilityOptions.length >= team.randomOptions.abilities){\r\n\r\n      // Check abilities that change move types.\r\n      let msPerType = optionsData.movesetsPerType;            \r\n      msPerType.forEach(ms => {\r\n        switch(ms.name){\r\n          case 'normal':\r\n            if (abilityOptions.find(a => a.name === 'normalize'))\r\n              ms.movesets += 1;\r\n            break;\r\n          case 'ice':\r\n            if (abilityOptions.find(a => a.name === 'refrigerate'))\r\n              ms.movesets += 1;              \r\n            break;\r\n          case 'fairy':\r\n            if (abilityOptions.find(a => a.name === 'pixilate'))\r\n              ms.movesets += 1;              \r\n            break;\r\n          case 'electric':\r\n            if (abilityOptions.find(a => a.name === 'galvanize'))\r\n              ms.movesets += 1;              \r\n            break;\r\n          case 'flying':\r\n            if (abilityOptions.find(a => a.name === 'aerilate'))\r\n              ms.movesets += 1;              \r\n            break;\r\n          default:          \r\n            break;\r\n        }\r\n      })                                   \r\n      let uTypes = msPerType.filter(t => t.movesets !== 0).map(t => {return t.name});     \r\n\r\n      // Prepare options for possible reverse branch logic.\r\n      let rOptions = []; \r\n      let options =  movesetOptions.map(ms => ms.map(m => {return m.name}));\r\n      options.push(abilityOptions.map(a => {return a.name}));\r\n      options = [].concat.apply([], options);   \r\n\r\n      // Check for reverse branch logic options. \r\n      options.forEach(opt => {\r\n        if(!rOptions.includes('consumable') && [...usability.consumableItemMoves, ...usability.consumableItemAbilities].includes(opt))\r\n          rOptions.push('consumable');\r\n        else if(!rOptions.includes('plate') && opt === 'multitype')\r\n          rOptions.push('plate');\r\n        else if(!rOptions.includes('memory') && opt === 'rks-system')\r\n          rOptions.push('memory');\r\n      });          \r\n\r\n      if(!cancel){\r\n        setOptionsData(s => {return {...s, movesetsPerType: msPerType, usableTypes: uTypes, reverseOptions: rOptions} });     \r\n        setGenerationStep(5);\r\n      }\r\n    }    \r\n    return () => cancel = true;\r\n  }, [generating, generationStep, movesetOptions, abilityOptions, optionsData]);\r\n\r\n  // Generate items\r\n  useEffect(() => {\r\n    let cancel = false;\r\n\r\n    // Get a set of item options.\r\n    async function getItemOptions() {          \r\n      let items = [];                  \r\n      for (let index = 0; index < team.randomOptions.items; index++) {\r\n        let itemType = getReverseOption(index);\r\n        let item = \"\";\r\n        if(itemType)\r\n          item = await getNewItem(items, itemType);\r\n        else\r\n          item = await getNewItem(items);\r\n        items.push(item);\r\n        if(!cancel)\r\n          setItemOptions([...items]); \r\n      }                 \r\n      if(!cancel)\r\n        setGenerationStep(6); \r\n    }\r\n\r\n    // Get a new item option.\r\n    async function getNewItem(currentItems, itemType) {    \r\n      let newItem = '';    \r\n      let usable = true; \r\n            \r\n      do{        \r\n        let item = \"\";\r\n        switch(itemType){\r\n          case 'consumable':\r\n            item = {name: usability.consumableItems[Math.floor(Math.random()*usability.consumableItems.length)]};\r\n            break;\r\n          case 'plate':\r\n            item = {name: usability.plateItems[Math.floor(Math.random()*usability.plateItems.length)]};\r\n            break;\r\n          case 'memory':\r\n            item = {name: usability.memoryItems[Math.floor(Math.random()*usability.memoryItems.length)]};\r\n            break;\r\n          default:\r\n            item = itemList[Math.floor(Math.random()*itemList.length)];      \r\n            break;\r\n        }        \r\n        newItem = await axios.get(`${api.url}item/${item.name}`);   \r\n        usable = true;    \r\n                               \r\n        switch(newItem.data.category.name){\r\n          case 'held-items':\r\n            switch(newItem.data.name){\r\n              case 'power-herb': \r\n                // Check for charge moves.               \r\n                usable = getMoveMechanicUsability('charge');                \r\n                break;\r\n              case 'grip-claw':\r\n                // Check for bind moves.\r\n                usable = getMoveMechanicUsability('bind');               \r\n                break;\r\n              case 'binding-band':\r\n                // Check for bind moves.\r\n                usable = getMoveMechanicUsability('bind');\r\n                break;\r\n              case 'big-root':\r\n                // Check for drain moves.\r\n                usable = getMoveMechanicUsability('drain');                \r\n                break;\r\n              case 'terrain-extender':\r\n                // Check for terrain moves or abilities.\r\n                usable = (getMoveMechanicUsability('terrain') || getAbilityMechanicUsability('terrain'));\r\n                break;\r\n              case 'heat-rock':                \r\n                // Check for harsh sunlight weather moves or abilities.\r\n                usable = (getMoveMechanicUsability('', ['sunny-day']) || getAbilityMechanicUsability('', ['drought']));\r\n                break;\r\n              case 'damp-rock':                \r\n                // Check for rain weather moves or abilities.\r\n                usable = (getMoveMechanicUsability('', ['rain-dance']) || getAbilityMechanicUsability('', ['drizzle']));\r\n                break;\r\n              case 'icy-rock':                \r\n                // Check for hail weather moves or abilities.\r\n                usable = (getMoveMechanicUsability('', ['hail']) || getAbilityMechanicUsability('', ['snow-warning']));\r\n                break;\r\n              case 'smooth-rock':                \r\n                // Check for sandstorm weather moves or abilities.\r\n                usable = (getMoveMechanicUsability('', ['sandstorm']) || getAbilityMechanicUsability('', ['sand-stream', 'sand-spit']));\r\n                break;\r\n              case 'black-sludge':                \r\n                // Check for poison pokemons.\r\n                usable = getPokemonTypeUsability('poison');                \r\n                break;\r\n              case 'light-clay':                \r\n                // Check for barrier moves.\r\n                usable = getMoveMechanicUsability('barrier');                \r\n                break;    \r\n              case 'ring-target':                \r\n                // Check for bad item moves.\r\n                usable = getMoveMechanicUsability('bad-item');\r\n                break;            \r\n              default:\r\n                break;\r\n            }\r\n            break;\r\n          case 'bad-held-items':\r\n            switch(newItem.data.name){\r\n              case 'toxic-orb':                   \r\n                // Check for orb moves or abilities.\r\n                usable = (getMoveMechanicUsability('orb') || getMoveMechanicUsability('bad-item') || \r\n                          getAbilityMechanicUsability('orb') || getAbilityMechanicUsability('', ['poison-heal', 'toxic-boost']));                                          \r\n                break;\r\n              case 'flame-orb':                                               \r\n                // Check for orb moves or abilities.\r\n                usable = (getMoveMechanicUsability('orb') || getMoveMechanicUsability('bad-item') || \r\n                          getAbilityMechanicUsability('orb') || getAbilityMechanicUsability('', ['flare-boost']));                \r\n                break;\r\n              case 'iron-ball':\r\n              case 'lagging-tail':\r\n              case 'sticky-barb':\r\n              case 'full-incense': \r\n                // Check for bad item moves.\r\n                usable = getMoveMechanicUsability('bad-item');\r\n                break; \r\n              default:\r\n                break;\r\n            }\r\n            break;\r\n          case 'plates':\r\n            // Check for movesets with that type, a specific move or a specific ability.\r\n            usable = (getMovesetTypeUsabilityForItems(newItem.data, currentItems) ||\r\n                      getSpecificOptionsUsabilityForItems(['judgment'], ['multitype'], '', currentItems));\r\n            break;\r\n          case 'memories':                        \r\n            // Check for a specific move or a specific ability.            \r\n            usable = getSpecificOptionsUsabilityForItems(['multi-attack'], ['rks-system'], ['memory'], currentItems);\r\n            break;\r\n          case 'type-enhancement':\r\n            // Check for movesets with that type.\r\n            usable = getMovesetTypeUsabilityForItems(newItem.data, currentItems);\r\n            break; \r\n          case 'jewels':                        \r\n            // Check for a specific move type\r\n            usable = getMovesetTypeUsabilityForItems(newItem.data, currentItems);\r\n            break;           \r\n          case 'species-specific':\r\n              switch(newItem.data.name){\r\n                case 'douse-drive':                                     \r\n                case 'shock-drive':\r\n                case 'burn-drive':\r\n                case 'chill-drive':                                               \r\n                  // Check for a specific move.\r\n                  usable = getSpecificOptionsUsabilityForItems(['techno-blast'], '', ['drive'], currentItems);\r\n                  break;\r\n                case 'stick':\r\n                  // Check for a specific pokemon.\r\n                  usable = getPokemonUsability(['sirfetchd']);\r\n                  break;\r\n                case 'thick-club':\r\n                  // Check for a specific pokemon.\r\n                  usable = getPokemonUsability(['marowak', 'marowak-alola']);\r\n                  break;\r\n                case 'soul-dew':\r\n                  // Check for a specific pokemon.\r\n                  usable = getPokemonUsability(['latios', 'latias']);\r\n                  break;\r\n                case 'griseous-orb':\r\n                  // Check for a specific pokemon and move types.\r\n                  usable = (getPokemonUsability(['giratina-origin', 'giratina-altered']) && getMovesetTypeUsability(['dragon', 'ghost']));\r\n                  break;\r\n                case 'adamant-orb':\r\n                  // Check for a specific pokemon and move types.\r\n                  usable = (getPokemonUsability(['dialga']) && getMovesetTypeUsability(['dragon', 'steel']));\r\n                  break;\r\n                case 'lustrous-orb':\r\n                  // Check for a specific pokemon and move types.\r\n                  usable = (getPokemonUsability(['palkia']) && getMovesetTypeUsability(['dragon', 'water']));\r\n                  break;\r\n                default:\r\n                  break;\r\n              }\r\n            break;\r\n          default:\r\n            break;\r\n        }                      \r\n      } while (checkDuplicatedName(currentItems, newItem.data.name) || \r\n              FindKeywords(newItem.data.name, '-', filters.itemFilter, filters.itemAllow) || !usable)\r\n      \r\n      return newItem.data;\r\n    } \r\n\r\n    if(generating && generationStep === 5 && itemList.length > 0){      \r\n      getItemOptions();\r\n    }\r\n    return () => cancel = true;\r\n  }, [generating, generationStep, itemList,\r\n      getMovesetTypeUsabilityForItems, getMoveMechanicUsability, getAbilityMechanicUsability, getPokemonTypeUsability,\r\n      getReverseOption, getSpecificOptionsUsabilityForItems, getPokemonUsability, getMovesetTypeUsability])\r\n\r\n  useEffect(() => {\r\n    let cancel = false;\r\n\r\n    if(generating && generationStep === 6){\r\n      setToast('Actions', 'Options generated, build your team!', {success: true});\r\n      if(!cancel)\r\n        setGenerating(false);   \r\n    }\r\n    return () => cancel = true;\r\n  }, [generating, generationStep])  \r\n\r\n  // ----- SELECTIONS & ASSIGNMENTS -----\r\n  // Select a pokemon.\r\n  const selectPokemon = (pokemon) => {\r\n    if(!generating){\r\n      let change = false;\r\n      let options = pokemonOptions;\r\n      options = options.map(p => {\r\n        if(p.name === pokemon.name){\r\n          if(p.selected) {      \r\n            p.selected = false;\r\n            p.moveset = null;\r\n            p.ability = null;\r\n            p.item = null;          \r\n            change = true;\r\n          }\r\n          else if(!p.selected && selectionsMade.pokemons < team.selectionsNeeded.pokemons) {\r\n            p.selected = true;\r\n            change = true;\r\n          }\r\n          else {\r\n            setToast('Pokémon Options', `Only ${team.selectionsNeeded.pokemons} pokémon can be selected.`, {warning: true});\r\n          }\r\n        }\r\n        return p;\r\n      })\r\n      if(change){\r\n        setPokemonOptions(options); \r\n      }\r\n    }\r\n    else\r\n      setToast('Actions', 'Your options are still being generated.', {warning: true});\r\n  }   \r\n\r\n  // Select a move.\r\n  const selectMove = (move, moveset) => {  \r\n    if(!generating){\r\n      let change = false;  \r\n      let msOptions = movesetOptions;    \r\n      msOptions[moveset] = msOptions[moveset].map(m => {\r\n        if(m.name === move.name){\r\n          if(m.selected){      \r\n            m.selected = false;\r\n            change = true;\r\n          }\r\n          else if(!m.selected && selectionsMade.moves[moveset] < team.selectionsNeeded.moves){\r\n            m.selected = true;\r\n            change = true;\r\n          }\r\n          else {\r\n            setToast('Moveset Options', `Only ${team.selectionsNeeded.moves} moves can be selected in a moveset.`, {warning: true});\r\n          }\r\n        }\r\n        return m;\r\n      });\r\n      if(change){\r\n        setMovesetOptions([...msOptions]);\r\n      }\r\n    }\r\n    else\r\n      setToast('Actions', 'Your options are still being generated.', {warning: true});\r\n  }\r\n\r\n  // Assign a pokemon to a moveset, ability or item.\r\n  const assignPokemon = (pokemon, assignable) => {\r\n    if(!generating){\r\n      let change = false;\r\n      let pokemons = pokemonOptions;\r\n      pokemons = pokemons.map(p => {\r\n        if(p.name === pokemon.name){\r\n          if(assignable.moveset != null){\r\n            if(p.moveset !== assignable.moveset)\r\n              p.moveset = assignable.moveset;\r\n            else\r\n              p.moveset = null;\r\n            change = true;\r\n          }\r\n          else if(assignable.ability != null){\r\n            if(p.ability !== assignable.ability)\r\n              p.ability = assignable.ability;\r\n            else\r\n              p.ability = null;\r\n            change = true;\r\n          }\r\n          else if(assignable.item != null){\r\n            if(p.item !== assignable.item)\r\n              p.item = assignable.item;\r\n            else\r\n              p.item = null;\r\n            change = true;\r\n          }\r\n        }\r\n        else{\r\n          if(assignable.moveset != null){\r\n            if(p.moveset === assignable.moveset) {\r\n              p.moveset = null;\r\n              change = true;\r\n              setToast('Moveset Options',\r\n              `Assigned ${upperCaseWords(pokemon.name)} instead of ${upperCaseWords(p.name)} to moveset ${assignable.moveset+1}.`,\r\n              {warning: true});\r\n            }\r\n          }\r\n          if(assignable.ability != null){\r\n            if(p.ability === assignable.ability) {\r\n              p.ability = null;\r\n              change = true;\r\n              setToast('Ability Options',\r\n              `Assigned ${upperCaseWords(pokemon.name)} instead of ${upperCaseWords(p.name)} to ability ${upperCaseWords(abilityOptions[assignable.ability].name)}.`,\r\n              {warning: true});\r\n            }\r\n          }\r\n          if(assignable.item != null){\r\n            if(p.item === assignable.item) {\r\n              p.item = null;\r\n              change = true;\r\n              setToast('Item Options',\r\n              `Assigned ${upperCaseWords(pokemon.name)} instead of ${upperCaseWords(p.name)} to item ${upperCaseWords(itemOptions[assignable.item].name)}.`,\r\n              {warning: true});\r\n            }\r\n          }\r\n        }\r\n        return p;\r\n      })\r\n      if(change){   \r\n        setPokemonOptions(pokemons);\r\n      }\r\n    }\r\n    else\r\n      setToast('Actions', 'Your options are still being generated.', {warning: true});\r\n  }    \r\n\r\n  // Clear all selections and assignments.\r\n  const clearChoices = () => {\r\n    const choicesMade = Object.values(selectionsMade).some(val => Array.isArray(val) ? val.some(i => i) : val);\r\n    if(choicesMade){\r\n      let options = pokemonOptions;\r\n      options = options.map(p => {      \r\n        p.selected = false;\r\n        p.moveset = null;\r\n        p.ability = null;\r\n        p.item = null;                  \r\n        return p;\r\n      });\r\n      setPokemonOptions(options);\r\n \r\n      let msOptions = movesetOptions;    \r\n      msOptions.forEach(ms => {\r\n        ms = ms.map(m => {   \r\n          m.selected = false;\r\n          return m;\r\n        });\r\n      });          \r\n      setMovesetOptions([...msOptions]);\r\n\r\n      setToast('Actions', 'Choices cleared, start again!', {success: true});\r\n    }\r\n    else {\r\n      setToast('Actions', 'There are no choices to clear.', {warning: true});\r\n    }\r\n  }\r\n\r\n  // ----- RESPONSES -----\r\n  // Respond to completed sections.\r\n  const checkSectionCompleted = useCallback((string, val) => {\r\n    let sCompleted = sectionsCompleted;\r\n    let change = false;\r\n    switch(string){\r\n      case 'pokemons':\r\n        if(!sCompleted.pokemons && val >= team.selectionsNeeded.pokemons){\r\n          sCompleted.pokemons = true;\r\n          change = true;\r\n          setToast('Pokémon Options', `All ${team.selectionsNeeded.pokemons} pokémon have been selected.`, {success: true});\r\n        }\r\n        else if(sCompleted.pokemons && val < team.selectionsNeeded.pokemons){\r\n          sCompleted.pokemons = false;\r\n          change = true;\r\n          setToast('Pokémon Options', `There must be ${team.selectionsNeeded.pokemons} pokémon selected.`, {warning: true});\r\n        }\r\n        break;\r\n      case 'movesets':\r\n        if(!sCompleted.movesets && val >= team.selectionsNeeded.movesets){\r\n          sCompleted.movesets = true;\r\n          change = true;\r\n          setToast('Moveset Options', `All ${team.selectionsNeeded.movesets} pokémon have been assigned to a moveset.`, {success: true});\r\n        }\r\n        else if(sCompleted.movesets && val < team.selectionsNeeded.movesets){\r\n          sCompleted.movesets = false;\r\n          change = true;\r\n          setToast('Moveset Options', `There must be ${team.selectionsNeeded.movesets} pokémon assigned to a moveset.`, {warning: true});\r\n        }\r\n        break;\r\n      case 'moves':\r\n        if(!sCompleted.moves && val >= team.selectionsNeeded.movesets * team.selectionsNeeded.moves){\r\n          sCompleted.moves = true;\r\n          change = true;\r\n          setToast('Moveset Options', `All ${team.selectionsNeeded.movesets * team.selectionsNeeded.moves} moves have been selected.`, {success: true});    \r\n        }\r\n        else if(sCompleted.moves && val < team.selectionsNeeded.movesets * team.selectionsNeeded.moves){\r\n          sCompleted.moves = false;\r\n          change = true;\r\n          setToast('Moveset Options', `There must be ${team.selectionsNeeded.movesets * team.selectionsNeeded.moves} moves selected.`, {warning: true});    \r\n        }\r\n        break;\r\n      case 'abilities':\r\n        if(!sCompleted.abilities && val >= team.selectionsNeeded.abilities){\r\n          sCompleted.abilities = true;\r\n          change = true;\r\n          setToast('Ability Options', `All ${team.selectionsNeeded.abilities} pokémon have been assigned to an ability.`, {success: true});\r\n        }\r\n        else if(sCompleted.abilities && val < team.selectionsNeeded.abilities){\r\n          sCompleted.abilities = false;\r\n          change = true;\r\n          setToast('Ability Options', `There must be ${team.selectionsNeeded.abilities} pokémon assigned to an ability.`, {warning: true});\r\n        }\r\n        break;\r\n      case 'items':\r\n        if(!sCompleted.items && val >= team.selectionsNeeded.items){\r\n          sCompleted.items = true;\r\n          change = true;\r\n          setToast('Item Options', `All ${team.selectionsNeeded.items} pokémon have been assigned to an item.`, {success: true});\r\n        }\r\n        else if(sCompleted.items && val < team.selectionsNeeded.items){\r\n          sCompleted.items = false;\r\n          change = true;\r\n          setToast('Item Options', `There must be ${team.selectionsNeeded.items} pokémon assigned to an item.`, {warning: true});\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    if(change){\r\n      setSectionsCompleted(sCompleted);\r\n      if(Object.values(sCompleted).every(val => val))\r\n        setToast('Actions', `Team completely built, export it!`, {success: true});\r\n    }\r\n  }, [sectionsCompleted]);\r\n\r\n  // Respond to changes in slections/assignments for pokemon, movesets, abilities and items.\r\n  useEffect (() => {\r\n    let pSelected = 0;\r\n    let msAssigned = 0;    \r\n    let aAssigned = 0;\r\n    let iAssigned = 0;\r\n\r\n    pokemonOptions.forEach(p => {\r\n      if(p.selected)\r\n        pSelected = pSelected + 1;\r\n      if(p.moveset != null)\r\n        msAssigned = msAssigned + 1;\r\n      if(p.ability != null)\r\n        aAssigned = aAssigned + 1;\r\n      if(p.item != null)\r\n        iAssigned = iAssigned + 1;\r\n    });    \r\n    \r\n    checkSectionCompleted('pokemons', pSelected);\r\n    checkSectionCompleted('movesets', msAssigned);\r\n    checkSectionCompleted('abilities', aAssigned);\r\n    checkSectionCompleted('items', iAssigned);\r\n\r\n    setSelectionsMade(s => { return {\r\n      ...s,\r\n      pokemons: pSelected,\r\n      movesets: msAssigned,\r\n      abilities: aAssigned,\r\n      items: iAssigned\r\n    }});\r\n  }, [pokemonOptions, checkSectionCompleted]); \r\n\r\n  // Respond to changes in selections for moves.\r\n  useEffect (() => {\r\n    let mSelected = [];\r\n    let mSelectedAmount = 0;\r\n\r\n    movesetOptions.forEach(ms => {\r\n      let msSelected = ms.filter(m => m.selected).length;\r\n      mSelected.push(msSelected);\r\n      mSelectedAmount = mSelectedAmount + msSelected;\r\n    });\r\n\r\n    checkSectionCompleted('moves', mSelectedAmount);\r\n\r\n    setSelectionsMade(s => {return {...s, moves: mSelected}});\r\n  }, [movesetOptions, checkSectionCompleted]);    \r\n\r\n  // ----- HELPER FUNCTIONS -----  \r\n  // Get total stats for a pokemon.\r\n  const getTotalStats = (stats) => {\r\n    let total = 0;\r\n    stats.forEach(s => {\r\n        total = total + s.base_stat; \r\n    });        \r\n    return total;\r\n  }  \r\n\r\n  const getStatDisplay = (name) => {\r\n    switch(name){\r\n      case \"hp\":\r\n        return \"HP\";\r\n      case \"attack\":\r\n        return \"Atk\";\r\n        case \"defense\":\r\n          return \"Def\";\r\n          case \"special-attack\":\r\n          return \"SpA\";\r\n          case \"special-defense\":\r\n          return \"SpD\";\r\n          case \"speed\":\r\n          return \"Spe\";\r\n      default:\r\n        return \"\";\r\n    }\r\n  }\r\n\r\n  const checkDuplicatedName = (currentObjects, newObjectName) => {\r\n    return currentObjects.find(co => co.name === newObjectName)\r\n  }\r\n\r\n  // Filter by keywords.\r\n  const FindKeywords = (string, separator, filter, allow) => {\r\n    let found = false;\r\n    found = string.split(separator).some(keyword => filter.includes(keyword))\r\n    if(found && allow)\r\n      found = !string.split(separator).some(keyword => allow.includes(keyword))\r\n    return found;\r\n  }\r\n\r\n  const capitalizeWords = (text, separator) => {\r\n    return text.split(separator).map((word) => {return word[0].toUpperCase() + word.substring(1)}).join(\" \");\r\n  }\r\n\r\n  const upperCaseWords = (string) => {\r\n    return string.replace(/\\b\\w/g, l => l.toUpperCase())\r\n  }      \r\n\r\n  // ----- OTHERS -----\r\n  // Show a toast notification.\r\n  const setToast = (title, content, type) => {    \r\n    toast.custom((t) => (\r\n      <div onClick={() => toast.dismiss(t.id)}\r\n        className={`cursor-pointer max-w-md w-full flex flex-col gap-2 bg-white p-2 rounded-md pointer-events-auto flex border-2 border-gray-200 hover:bg-gray-200 transition duration-150 ease-in-out \r\n        ${t.visible ? 'animate-enter' : 'animate-leave'}\r\n        ${type.success ? 'bg-green-100 border-green-200 ring ring-green-100' : ''}\r\n        ${type.warning ? 'bg-yellow-100 border-yellow-200 ring ring-yellow-100' : ''}\r\n        ${type.error ? 'bg-red-200 border-red-300 ring ring-red-200' : ''}`}\r\n      >\r\n        <div className=\"flex justify-between items-center w-full\">\r\n          <p className=\"text-base capitalize\">{title}</p>\r\n          {/* <HiOutlineX className=\"cursor-pointer text-2xl hover:text-gray-600\" onClick={() => toast.dismiss(t.id)}/> */}\r\n        </div>          \r\n        <div className=\"flex text-sm\">\r\n          <p>{content}</p>\r\n        </div>\r\n      </div>\r\n    ));\r\n  }\r\n\r\n  // Create an export of the team.\r\n  const exportTeam = () => {\r\n    if(Object.values(sectionsCompleted).every(val => val)) {\r\n      let exportText = \"\";         \r\n      pokemonOptions.forEach(p => {\r\n        if(p.selected){\r\n          let moveset = movesetOptions[p.moveset].filter(m => m.selected).map(m => {return m.name});\r\n          exportText += capitalizeWords(p.name, \"-\");\r\n          if(p.gender !== \"genderless\"){\r\n            exportText += \" (\" + (p.gender === \"male\" ? \"M\" : \"F\") + \")\";\r\n          }\r\n          exportText += \" @ \" + capitalizeWords(itemOptions[p.item].name, \"-\");\r\n          exportText += \"\\r\\nAbility: \" + capitalizeWords(abilityOptions[p.ability].name, \"-\");\r\n          exportText += \"\\r\\nLevel: \" + p.level;\r\n          if(p.shiny)\r\n            exportText += \"\\r\\nShiny: Yes\";\r\n          exportText += \"\\r\\nEVs:\";\r\n          p.stats.forEach(s => {\r\n            if(s.ev != null && s.ev > 0)\r\n              exportText += \" \" + s.ev + \" \" + getStatDisplay(s.stat.name) + \" /\";\r\n          });\r\n          exportText = exportText.slice(0, -1);\r\n          exportText += \"\\r\\n\" + capitalizeWords(p.nature.name, \"-\") + \" Nature\";\r\n          exportText += \"\\r\\nIVs:\";\r\n          p.stats.forEach(s => {\r\n            if(s.iv != null && s.iv < 31)\r\n              exportText += \" \" + s.iv + \" \" + getStatDisplay(s.stat.name) + \" /\";\r\n          });\r\n          exportText = exportText.slice(0, -1);\r\n          exportText += \"\\r\\n- \" + capitalizeWords(moveset[0], \"-\");\r\n          exportText += \"\\r\\n- \" + capitalizeWords(moveset[1], \"-\");\r\n          exportText += \"\\r\\n- \" + capitalizeWords(moveset[2], \"-\");\r\n          exportText += \"\\r\\n- \" + capitalizeWords(moveset[3], \"-\");    \r\n          exportText += \"\\r\\n\\r\\n\";                             \r\n        }\r\n      });\r\n      copyTextToClipboard(exportText);      \r\n    }\r\n    else {\r\n      setToast('Actions', 'The team is not completely built!', {warning: true});      \r\n    }\r\n  }  \r\n\r\n  // Copy the exported team to clipboard.\r\n  function fallbackCopyTextToClipboard(text) {\r\n    var textArea = document.createElement(\"textarea\");\r\n    textArea.value = text;\r\n    document.body.appendChild(textArea);\r\n    textArea.focus();\r\n    textArea.select();  \r\n    try {\r\n      var successful = document.execCommand(\"copy\");\r\n      if(successful)\r\n        setToast('Actions', 'Team copied to clipboard!', {success: true});      \r\n      else\r\n        setToast('Actions', 'Error copying the team to clipboard!', {error: true});\r\n    } catch (err) {\r\n      setToast('Actions', 'Unable to copy the team to clipboard!', {error: true});\r\n    }  \r\n    document.body.removeChild(textArea);\r\n  }\r\n  function copyTextToClipboard(text) {\r\n    if (!navigator.clipboard) {\r\n      fallbackCopyTextToClipboard(text);\r\n      return;\r\n    }\r\n    navigator.clipboard.writeText(text).then(\r\n      function() {\r\n        setToast('Actions', 'Team copied to clipboard!', {success: true});\r\n      },\r\n      function(err) {\r\n        setToast('Actions', 'Error copying the team to clipboard!', {error: true});\r\n      }\r\n    );\r\n  }\r\n\r\n  // Render.\r\n  return (        \r\n    <TeamBuilderContext.Provider value={{\r\n      pokemonOptions: pokemonOptions,\r\n      selectionsNeeded: team.selectionsNeeded,\r\n      selectionsMade: selectionsMade,\r\n      sectionsCompleted: sectionsCompleted,\r\n      selectPokemon: selectPokemon,\r\n      selectMove: selectMove,\r\n      assignPokemon: assignPokemon\r\n    }}>\r\n      <div className=\"bg-gray-50 bg-unown-pattern-tiled min-h-screen\">        \r\n        <Router basename=\"/React-Procedural-Pokemon\">\r\n          <div className=\"flex w-full\">\r\n            <div className=\"h-screen sticky top-0\">\r\n              <Sidebar />\r\n            </div>\r\n            <div className=\"w-full flex flex-col\">\r\n              <Switch>          \r\n                <Route path=\"/format\">\r\n                  <Format />\r\n                </Route>\r\n                <Route path=\"/builder\">        \r\n                  <TeamBuilder\r\n                    loading={loading}\r\n                    randomOptions={team.randomOptions}\r\n                    pokemonOptions={pokemonOptions}\r\n                    movesetOptions={movesetOptions}\r\n                    abilityOptions={abilityOptions}\r\n                    itemOptions={itemOptions}\r\n                    generating={generating}\r\n                    generateOptions={generateOptions}                \r\n                    clearChoices={clearChoices}\r\n                    exportTeam={exportTeam}                  \r\n                  /> \r\n                  <Tooltips />                                  \r\n                </Route>\r\n                <Route path=\"/about\">\r\n                  <About />\r\n                </Route>\r\n                <Route path=\"/\">\r\n                  <Home />\r\n                </Route>          \r\n              </Switch>\r\n              <Footer />\r\n            </div>\r\n          </div>           \r\n        </Router>      \r\n      </div>\r\n      <Toaster\r\n        position=\"bottom-right\"\r\n        reverseOrder={false}\r\n        gutter={8}\r\n      />           \r\n    </TeamBuilderContext.Provider>\r\n  );\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}