{"version":3,"sources":["context/TeamBuilderContext.js","assets/logo.png","components/Navbar.js","containers/Home.js","components/pokemon/PokemonType.js","components/pokemon/PokemonStats.js","components/pokemon/PokemonSprite.js","components/pokemon/Pokemon.js","components/pokemon/PokemonOptions.js","components/moves/MoveCategory.js","components/moves/Move.js","components/pokemon/SelectedPokemon.js","components/moves/Moveset.js","components/moves/MovesetOptions.js","components/abilities/Ability.js","components/abilities/AbilityOptions.js","components/items/Item.js","components/items/ItemOptions.js","containers/TeamBuilder.js","containers/About.js","App.js","reportWebVitals.js","index.js"],"names":["TeamBuilderContext","React","createContext","Navbar","className","to","src","logo","alt","width","style","minWidth","exact","activeClassName","Home","PokemonType","type","getColor","PokemonStats","stats","getStatName","stat","getStatColor","getStatWidth","total","map","s","i","base_stat","length","PokemonSprite","pokemon","assign","opacity","onClick","is_legendary","is_mythical","shiny","sprites","front_shiny","front_default","height","Pokemon","context","useContext","selectPokemon","selected","name","replace","types","t","weight","gender_rate","PokemonOptions","options","id","selectionsMade","pokemons","selectionsNeeded","p","MoveCategory","category","Move","move","moveset","formatEffect","effect","formattedEffect","effect_chance","priority","concat","selectMove","damage_class","pp","power","accuracy","effect_entries","e","short_effect","stopPropagation","href","l","toUpperCase","target","rel","SelectedPokemon","assignable","selectedPokemon","pokemonOptions","filter","assignedPokemon","find","ability","item","assignPokemon","Moveset","index","moves","m","MovesetOptions","movesets","sm","forEach","selectedMoves","Ability","language","getEffects","AbilityOptions","abilities","a","Item","split","includes","join","default","ItemOptions","items","it","TeamBuilder","loading","randomRolls","movesetOptions","abilityOptions","itemOptions","generating","generateOptions","clearChoices","exportTeam","generationProgress","About","App","apiUrl","itemCount","itemOffset","useState","setLoading","pokemonList","setPokemonList","moveList","setMoveList","abilityList","setAbilityList","itemList","setItemList","typeList","setTypeList","setGenerating","generationStep","setGenerationStep","setPokemonOptions","setMovesetOptions","setAbilityOptions","setItemOptions","movesetsPerType","usableTypes","reverseOptions","optionsData","setOptionsData","pokemonFilter","moveFilter","moveAllow","moveStatusLimit","abilityFilter","abilityAllow","itemFilter","itemAllow","chargeMoves","bindMoves","drainMoves","terrainMoves","barrierMoves","orbMoves","punchMoves","multistrikeMoves","recoilMoves","biteMoves","pulseMoves","soundMoves","healMoves","contactMoves","consumableItemMoves","terrainAbilities","orbAbilities","consumableItemAbilities","consumableItems","plateItems","memoryItems","setSelectionsMade","sectionsCompleted","setSectionsCompleted","useEffect","cancel","axios","get","pokemonResults","moveResults","abilityResults","itemResults","data","results","push","apply","typeResults","fetchData","shinyIndex","Math","round","random","getNewPokemon","species","url","getTotalStats","currentPokemons","newPokemon","finalPokemon","floor","initialPokemon","evolution_chain","evolutions","evoChain","evoData","chain","numberOfEvolutions","nextSpecies","lastSpecies","evolves_to","hasOwnProperty","finalEvolution","Array","isArray","finalSpecies","varieties","v","some","keyword","checkDuplicatedName","getPokemonOptions","getPokemonUsability","useCallback","getNewMoveset","newMoveset","status","statusMoves","usable","combo","FindKeywords","getMovesetOptions","msPerType","msInType","ms","uTypes","getPokemonTypeUsability","getMovesetTypeUsability","getTypeFromEffect","getMovesetTypeUsabilityForItems","currentItems","toLowerCase","itemsOfType","ci","mt","getSpecificOptionsUsabilityForItems","maxOptions","mo","getMoveMechanicUsability","mechanic","exactMoves","moveNames","getAbilityMechanicUsability","exactAbilities","abilityNames","getReverseOption","getNewAbility","currentAbilities","newAbility","getAbilityOptions","rOptions","opt","itemType","getNewItem","newItem","getItemOptions","setToast","success","checkSectionCompleted","string","val","sCompleted","change","warning","Object","values","every","pSelected","msAssigned","aAssigned","iAssigned","mSelected","mSelectedAmount","msSelected","currentObjects","newObjectName","co","separator","allow","found","capitalizeWords","text","word","substring","upperCaseWords","title","content","toast","custom","dismiss","visible","error","Provider","value","msOptions","basename","path","exportText","navigator","clipboard","textArea","document","createElement","body","appendChild","focus","select","execCommand","err","removeChild","fallbackCopyTextToClipboard","writeText","then","copyTextToClipboard","position","reverseOrder","gutter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"8RAEMA,EAAqBC,IAAMC,cAAc,MCFhC,MAA0B,iC,OCmC1BC,MA/Bf,WACI,OACI,mCACI,sBAAKC,UAAU,8IAAf,UACI,cAAC,IAAD,CAAMC,GAAG,IACLD,UAAU,oDADd,SAEI,qBAAKE,IAAKC,EAAMC,IAAI,OAAOC,MAAM,QAAQC,MAAO,CAACC,SAAU,aAE/D,sBAAKP,UAAU,2BAAf,UACI,cAAC,IAAD,CAASQ,OAAK,EAACP,GAAG,IACdD,UAAU,+IACVS,gBAAgB,8BAFpB,SAGI,uCAEJ,cAAC,IAAD,CAASR,GAAG,WACRD,UAAU,+IACVS,gBAAgB,8BAFpB,SAGI,+CAEJ,cAAC,IAAD,CAASR,GAAG,SACRD,UAAU,+IACVS,gBAAgB,8BAFpB,SAGI,iDCxBT,SAASC,IACpB,OACI,uCCFO,SAASC,EAAT,GAA8B,IAARC,EAAO,EAAPA,KAyBjC,OACI,mBAAGZ,UAAS,qHAzBC,WACb,OAAOY,GACH,IAAK,SAAU,MAAO,YACtB,IAAK,OAAQ,MAAO,UACpB,IAAK,QAAS,MAAO,WACrB,IAAK,QAAS,MAAO,WACrB,IAAK,WAAY,MAAO,cACxB,IAAK,MAAO,MAAO,SACnB,IAAK,WAAY,MAAO,cACxB,IAAK,SAAU,MAAO,YACtB,IAAK,SAAU,MAAO,YACtB,IAAK,SAAU,MAAO,YACtB,IAAK,UAAW,MAAO,aACvB,IAAK,MAAO,MAAO,SACnB,IAAK,OAAQ,MAAO,UACpB,IAAK,QAAS,MAAO,WACrB,IAAK,OAAQ,MAAO,UACpB,IAAK,SAAU,MAAO,YACtB,IAAK,QAAS,MAAO,WACrB,IAAK,QAAS,MAAO,WACrB,QAAS,MAAO,IAKwGC,IAA5H,SACKD,IC3BE,SAASE,EAAT,GAAgC,IAATC,EAAQ,EAARA,MAC5BC,EAAc,SAACC,GACjB,OAAQA,GACJ,KAAK,EAAG,MAAO,KACf,KAAK,EAAG,MAAO,MACf,KAAK,EAAG,MAAO,MACf,KAAK,EAAG,MAAO,KACf,KAAK,EAAG,MAAO,KACf,KAAK,EAAG,MAAO,MACf,KAAK,EAAG,MAAO,UAKjBC,EAAe,SAACD,GAClB,OAAQA,GACJ,KAAK,EAAG,MAAO,aACf,KAAK,EAAG,MAAO,gBACf,KAAK,EAAG,MAAO,gBACf,KAAK,EAAG,MAAO,cACf,KAAK,EAAG,MAAO,eACf,KAAK,EAAG,MAAO,gBACf,KAAK,EAAG,MAAO,gBAKjBE,EAAe,SAACF,GAAyB,IAAnBG,EAAkB,wDAC1C,OAAGH,GAAQ,IAAOG,GAASH,GAAQ,IACxB,SACHA,GAAQ,IAAOG,GAASH,GAAQ,IAC7B,SACHA,GAAQ,IAAOG,GAASH,GAAQ,IAC7B,SACHA,GAAQ,IAAOG,GAASH,GAAQ,IAC7B,SACHA,GAAQ,IAAOG,GAASH,GAAQ,IAC7B,SACHA,GAAQ,IAAOG,GAASH,GAAQ,IAC7B,SACHA,GAAQ,KAAQG,GAASH,GAAQ,IAC9B,SACHA,GAAQ,KAAQG,GAASH,GAAQ,IAC9B,SACHA,GAAQ,KAAQG,GAASH,GAAQ,IAC9B,UACHA,GAAQ,KAAQG,GAASH,GAAQ,IAC9B,UAEA,UAGf,OACI,qBAAKjB,UAAU,0DAAf,SACKe,EAAMM,KAAI,SAACC,EAAGC,GACX,OACI,sBAAavB,UAAU,cAAvB,UACI,sBAAKA,UAAU,aAAf,UACI,oBAAGA,UAAU,OAAb,UAAqBgB,EAAYO,GAAjC,OACA,4BAAID,EAAEE,eAEV,qBAAKxB,UAAU,aAAf,SACI,qBAAKA,UAAS,eAAUkB,EAAaK,GAAvB,4BAA6CJ,EAAaG,EAAEE,UAAYD,IAAMR,EAAMU,OAAS,UANzGF,Q,YCvDf,SAASG,EAAT,GAAoD,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,QAYpD,OACI,sBAAKC,QAASF,EACV5B,UAAS,6BAAwB6B,EAAU,aAAe,GAAjD,wCADb,UAEI,sBAAM7B,UAAS,+DAbhB2B,EAAQI,aACA,8EACHJ,EAAQK,YACL,8EACHL,EAAQZ,MAAM,GAAGS,WAAa,IAC3B,wEAEA,kBAONG,EAAQM,MAAQ,cAAC,IAAD,CAAYjC,UAAS,kFAAwF,KAC9H,qBACIE,IAAKyB,EAAQM,MAAQN,EAAQO,QAAQC,YAAcR,EAAQO,QAAQE,cAAehC,IAAI,GAAGC,MAAM,OAAOgC,OAAO,OAC7GrC,UAAU,+B,oBCdX,SAASsC,EAAT,GAA6B,IAAXX,EAAU,EAAVA,QACvBY,EAAU1C,IAAM2C,WAAW5C,GAajC,OACI,sBAAKkC,QAAS,kBAAMS,EAAQE,cAAcd,IACtC3B,UAAS,sNACP2B,EAAQe,SAAW,oDAAsD,IAF/E,UAII,cAAChB,EAAD,CAAeC,QAASA,IAExB,sBAAK3B,UAAU,yBAAf,UAAyC2B,EAAQgB,KAAKC,QAAQ,KAAM,KAApE,IAA2EjB,EAAQM,MAAQ,OAAS,UACpG,qBAAKjC,UAAU,yCAAf,SACK2B,EAAQkB,MAAMxB,KAAI,SAACyB,EAAGvB,GACnB,OACI,cAACZ,EAAD,CAAqBC,KAAMkC,EAAElC,KAAK+B,MAAhBpB,QAI9B,cAACT,EAAD,CAAcC,MAAOY,EAAQZ,QAC7B,sBAAKf,UAAU,mDAAf,UACI,8BAAI2B,EAAQU,OAAO,GAAnB,OACA,8BAAIV,EAAQoB,OAAO,GAAnB,QACA,mBAAG/C,UAAU,YAAb,SA7BL2B,EAAQqB,YAAc,EACd,cAAC,IAAD,IACsB,IAAxBrB,EAAQqB,YACN,cAAC,IAAD,IACsB,IAAxBrB,EAAQqB,YACN,cAAC,IAAD,IAEA,uBAAMhD,UAAU,OAAhB,UAAuB,cAAC,IAAD,IAAgB,cAAC,IAAD,eCf3C,SAASiD,EAAT,GAAsC,IAAZC,EAAW,EAAXA,QAC/BX,EAAU1C,IAAM2C,WAAW5C,GAmBjC,OACI,sBAAKuD,GAAG,WAAWnD,UAAU,uBAA7B,UACI,sBAAKA,UAAU,sDAAf,UACI,uBAAMA,UAAU,0BAAhB,UACI,mBAAGA,UAAU,UAAb,6BACA,mBAAGA,UAAU,0BAAb,+CAEJ,oBAAGA,UAAU,UAAb,UAAwBuC,EAAQa,eAAeC,SAA/C,IAA0Dd,EAAQe,iBAAiBD,SAAnF,2BAEJ,qBAAKrD,UAAS,8JACRuC,EAAQa,eAAeC,UAAYd,EAAQe,iBAAiBD,SAAW,uCAAyC,IADtH,SAzBAH,EAAQzB,OAEJyB,EAAQ7B,KAAI,SAAAkC,GAAC,OACT,cAACjB,EAAD,CAAoBX,QAAS4B,GAAfA,EAAEJ,OAKpB,qBAAKnD,UAAU,oBAAf,wBCdD,SAASwD,EAAT,GAAmC,IAAZC,EAAW,EAAXA,SAUlC,OACI,mBAAGzD,UAAS,qHAVC,WACb,OAAOyD,GACH,IAAK,WAAY,MAAO,aACxB,IAAK,UAAW,MAAO,cACvB,IAAK,SAAU,MAAO,eAMkG5C,IAA5H,SACK4C,ICTE,SAASC,EAAT,GAAgC,IAAjBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,QAC1BrB,EAAU1C,IAAM2C,WAAW5C,GAyB3BiE,EAAe,SAACC,GAClB,IAAIC,EAAkBD,EAEtB,OAAOH,EAAKhB,MACR,IAAK,eACDoB,EAAkBA,EAAgBnB,QAAQ,YAAa,IACvD,MACJ,IAAK,WACDmB,EAAkBA,EAAgBnB,QAAQ,YAAa,IACvD,MACJ,IAAK,eACDmB,EAAkBA,EAAgBnB,QAAQ,iBAAkB,UASpE,OAHAmB,EAAkBA,EAAgBnB,QAAQ,mBAAoBe,EAAKK,eAC9C,IAAlBL,EAAKM,WACJF,EAAkBA,EAAgBG,OAAO,aAAaP,EAAKM,WACxDF,GAGX,OACI,sBAAKjC,QAAS,kBAAMS,EAAQ4B,WAAWR,EAAMC,IACzC5D,UAAS,2MACP2D,EAAKjB,SAAW,oDAAsD,IAF5E,UAGI,sBAAK1C,UAAU,iDAAf,UACI,mBAAGA,UAAU,aAAb,SAA2B2D,EAAKhB,KAAKC,QAAQ,KAAM,OACnD,sBAAK5C,UAAU,4BAAf,UACI,cAACW,EAAD,CAAaC,KAAM+C,EAAK/C,KAAK+B,OAC5BgB,EAAKS,aAAe,cAACZ,EAAD,CAAcC,SAAUE,EAAKS,aAAazB,OAAW,SAGlF,sBAAK3C,UAAU,4CAAf,UACI,qCAAQ2D,EAAKU,MACb,sCAASV,EAAKW,MAAQX,EAAKW,MAAQ,OACnC,sCAASX,EAAKY,SAAWZ,EAAKY,SAAW,UAE7C,qBAAKvE,UAAU,0DAAf,SA7DD2D,EAAKa,eAAe/C,OAAS,EACrBkC,EAAKa,eAAenD,KAAI,SAACoD,EAAGlD,GAC/B,OACI,mBAAWvB,UAAU,cAArB,SACK6D,EAAaY,EAAEC,eADZnD,MAQZ,oBAAGvB,UAAU,4BAAb,sDAEI,mBAAG8B,QAAS,SAAC2C,GAAD,OAAOA,EAAEE,mBAAmBC,KAAI,kDAA6CjB,EAAKhB,KAAKC,QAAQ,KAAM,KAAKA,QAAQ,SAAS,SAAAiC,GAAC,OAAIA,EAAEC,iBAAelC,QAAQ,KAAM,KAA/H,WAA8ImC,OAAO,SAASC,IAAI,aAC1MhF,UAAU,oCADd,mDClBL,SAASiF,EAAT,GAA0C,IAAfC,EAAc,EAAdA,WAChC3C,EAAU1C,IAAM2C,WAAW5C,GAC3BuF,EAAkB5C,EAAQ6C,eAAeC,QAAO,SAAA9B,GAAC,OAAIA,EAAEb,YAYzD4C,EATyB,MAAtBJ,EAAWtB,QACHuB,EAAgBI,MAAK,SAAAhC,GAAC,OAAIA,EAAEK,UAAYsB,EAAWtB,WAChC,MAAtBsB,EAAWM,QACRL,EAAgBI,MAAK,SAAAhC,GAAC,OAAIA,EAAEiC,UAAYN,EAAWM,WACnC,MAAnBN,EAAWO,KACRN,EAAgBI,MAAK,SAAAhC,GAAC,OAAIA,EAAEkC,OAASP,EAAWO,QAEhD,KAsCf,OACI,qBAAKzF,UAAS,6MACRsF,EAAkB,oDAAsD,IAD9E,SAvBGH,EAAgB1D,OAAS,IAAM6D,EACvBH,EAAgB9D,KAAI,SAACkC,EAAGhC,GAC3B,OACI,cAACG,EAAD,CAAuBC,QAAS4B,EAAG3B,OAAQ,kBAAMW,EAAQmD,cAAcnC,EAAG2B,IACtErD,QAAUyD,GAAmB/B,EAAEZ,OAAS2C,EAAgB3C,OACtD2C,IAjBM3D,EAiBgC4B,EAhB/B,MAAtB2B,EAAWtB,QACiB,OAApBjC,EAAQiC,QACY,MAAtBsB,EAAWM,QACW,OAApB7D,EAAQ6D,QACS,MAAnBN,EAAWO,KACQ,OAAjB9D,EAAQ8D,KAER,OAOqBlE,GAfT,IAACI,KAsBhBwD,EAAgB1D,OAAS,GAAK6D,EAC3B,cAAC5D,EAAD,CAAeC,QAAS2D,EAAiB1D,OAAQ,kBAAMW,EAAQmD,cAAcJ,EAAiBJ,MAIjG,qBAAKlF,UAAU,oBAAf,mCC1CD,SAAS2F,EAAT,GAAsC,IAAnB/B,EAAkB,EAAlBA,QAASgC,EAAS,EAATA,MACjCrD,EAAU1C,IAAM2C,WAAW5C,GAkBjC,OACI,sBAAKI,UAAU,sDAAf,UACI,qBAAKA,UAAU,uCAAf,SAEI,oBAAGA,UAAU,YAAb,UAA0BuC,EAAQa,eAAeyC,MAAMD,GAAvD,IAAgErD,EAAQe,iBAAiBuC,MAAzF,uBAEJ,sBAAK7F,UAAS,mKACRuC,EAAQa,eAAeyC,MAAMD,IAAUrD,EAAQe,iBAAiBuC,OAClEtD,EAAQ6C,eAAeG,MAAK,SAAAhC,GAAC,OAAIA,EAAEK,UAAYgC,KAAS,uCAAyC,IAFrG,UAGI,cAACX,EAAD,CAAiBC,WAAY,CAACtB,QAASgC,KAxB3ChC,EAAQnC,OAEJmC,EAAQvC,KAAI,SAAAyE,GAAC,OACT,cAACpC,EAAD,CAAME,QAASgC,EAAkBjC,KAAMmC,GAAZA,EAAE3C,OAKjC,qBAAKnD,UAAU,oBAAf,yBCbD,SAAS+F,EAAT,GAAsC,IAAZ7C,EAAW,EAAXA,QAC/BX,EAAU1C,IAAM2C,WAAW5C,GA0BjC,OACI,sBAAKuD,GAAG,WAAWnD,UAAU,uBAA7B,UACI,sBAAKA,UAAU,sDAAf,UACI,uBAAMA,UAAU,0BAAhB,UACI,mBAAGA,UAAU,UAAb,6BACA,mBAAGA,UAAU,0BAAb,mFAEJ,sBAAMA,UAAU,0BAAhB,SACI,oBAAGA,UAAU,UAAb,UAAwBuC,EAAQa,eAAe4C,SAA/C,IAA0DzD,EAAQe,iBAAiB0C,SAAnF,6BAIR,qBAAKhG,UAAS,8JACRuC,EAAQa,eAAe4C,UAAYzD,EAAQe,iBAAiB0C,UArCnD,WACnB,IAAIC,EAAK,EAIT,OAHA1D,EAAQa,eAAeyC,MAAMK,SAAQ,SAAAJ,GACjCG,GAAUH,KAEPG,EAiCCE,IAAmB5D,EAAQe,iBAAiB0C,SAAWzD,EAAQe,iBAAiBuC,MAAQ,uCAAyC,IAFrI,SA3BA3C,EAAQzB,OAEJyB,EAAQ7B,KAAI,SAACyE,EAAGvE,GAAJ,OACR,cAACoE,EAAD,CAAiBC,MAAOrE,EAAGqC,QAASkC,GAAtBvE,MAKlB,qBAAKvB,UAAU,oBAAf,wBCpBD,SAASoG,EAAT,GAAoC,IAAlBZ,EAAiB,EAAjBA,QAASI,EAAQ,EAARA,MAEhClD,EADU7C,IAAM2C,WAAW5C,GACRwF,eAAeG,MAAK,SAAAhC,GAAC,OAAIA,EAAEiC,UAAYI,KAwB1D/B,EAAe,SAACC,GAClB,IAAIC,EAAkBD,EAEtB,OAAO0B,EAAQ7C,MACX,IAAK,cACL,IAAK,UACL,IAAK,eACL,IAAK,UACDoB,EAAkBA,EAAgBnB,QAAQ,eAAgB,WAOlE,OAAOmB,GAGX,OACI,qBAAK/D,UAAU,sDAAf,SAII,sBAAKA,UAAS,oKACR0C,EAAW,uCAAyC,IAD1D,UAEI,cAACuC,EAAD,CAAiBC,WAAY,CAACM,QAASI,KACvC,sBAAK5F,UAAS,kLACR0C,EAAW,oDAAsD,IADvE,UAEI,qBAAK1C,UAAU,gDAAf,SACI,mBAAGA,UAAU,aAAb,SAA2BwF,EAAQ7C,KAAKC,QAAQ,KAAM,SAE1D,qBAAK5C,UAAU,0DAAf,SArDG,WACf,IAAM8D,EAAS0B,EAAQhB,eAAee,MAAK,SAAAd,GAAC,MAAwB,OAApBA,EAAE4B,SAAS1D,QAC3D,OAAGmB,EAEK,mBAAG9D,UAAU,cAAb,SACK6D,EAAaC,EAAOY,gBAMzB,oBAAG1E,UAAU,4BAAb,sDAEI,mBAAG8B,QAAS,SAAC2C,GAAD,OAAOA,EAAEE,mBAAmBC,KAAI,kDAA6CY,EAAQ7C,KAAKC,QAAQ,KAAM,KAAKA,QAAQ,SAAS,SAAAiC,GAAC,OAAIA,EAAEC,iBAAelC,QAAQ,KAAM,KAAlI,cAAoJmC,OAAO,SAASC,IAAI,aAChNhF,UAAU,oCADd,iDAyCKsG,aC1DV,SAASC,EAAT,GAAoC,IAAXrD,EAAU,EAAVA,QAC9BX,EAAU1C,IAAM2C,WAAW5C,GAkBjC,OACI,sBAAKuD,GAAG,YAAYnD,UAAU,uBAA9B,UACI,sBAAKA,UAAU,sDAAf,UACI,uBAAMA,UAAU,0BAAhB,UACI,mBAAGA,UAAU,UAAb,6BACA,mBAAGA,UAAU,0BAAb,6DAEJ,sBAAMA,UAAU,0BAAhB,SACI,oBAAGA,UAAU,UAAb,UAAwBuC,EAAQa,eAAeoD,UAA/C,IAA2DjE,EAAQe,iBAAiBkD,UAApF,6BAGR,qBAAKxG,UAAS,8JACRuC,EAAQa,eAAeoD,WAAajE,EAAQe,iBAAiBkD,UAAY,uCAAyC,IADxH,SA1BAtD,EAAQzB,OAEJyB,EAAQ7B,KAAI,SAACoF,EAAGlF,GAAJ,OACR,cAAC6E,EAAD,CAAiBR,MAAOrE,EAAGiE,QAASiB,GAAtBlF,MAKlB,qBAAKvB,UAAU,oBAAf,wBCZD,SAAS0G,EAAT,GAA8B,IAAfjB,EAAc,EAAdA,KAAMG,EAAQ,EAARA,MAE1BlD,EADU7C,IAAM2C,WAAW5C,GACRwF,eAAeG,MAAK,SAAAhC,GAAC,OAAIA,EAAEkC,OAASG,KAwBvD/B,EAAe,SAACC,GAClB,IAAIC,EAAkBD,EAAO6C,MAAM,KAAKtB,QAAO,SAAAZ,GAC3C,OAAQA,EAAEmC,SAAS,eAAiBnC,EAAEmC,SAAS,eAAiBnC,EAAEmC,SAAS,aAAenC,EAAEmC,SAAS,YAAcnC,EAAEmC,SAAS,UAC/HvF,KAAI,SAAAoD,GACH,OAAOA,EAAE7B,QAAQ,SAAU,OAC5BiE,KAAK,KAER,OAAOpB,EAAK9C,MACR,IAAK,aACDoB,EAAkBA,EAAgBnB,QAAQ,WAAY,SACtD,MACJ,IAAK,gBACDmB,EAAkBA,EAAgBnB,QAAQ,YAAa,SACvD,MACJ,IAAK,cACDmB,EAAkBA,EAAgBnB,QAAQ,mCAAoC,gBAC9E,MACJ,IAAK,aACDmB,EAAkBA,EAAgBnB,QAAQ,eAAgB,6BAC1D,MACJ,IAAK,eACL,IAAK,cACL,IAAK,WACL,IAAK,eACDmB,EAAkBA,EAAgBG,OAAO,wBAYjD,OANGuB,EAAK9C,KAAKgE,MAAM,KAAKC,SAAS,WAC7B7C,EAAkBA,EAAgBnB,QAAQ,eAAgB,8BAC3D6C,EAAK9C,KAAKgE,MAAM,KAAKC,SAAS,YAC7B7C,EAAkBA,EAAgBnB,QAAQ,cAAe,gCAC1D6C,EAAK9C,KAAKgE,MAAM,KAAKC,SAAS,WAC7B7C,EAAkBA,EAAgBnB,QAAQ,gBAAiB,IAAIA,QAAQ,kBAAmB,qCAAqCA,QAAQ,YAAa,OACjJmB,GAGX,OACI,qBAAK/D,UAAU,sDAAf,SAII,sBAAKA,UAAS,oKACR0C,EAAW,uCAAyC,IAD1D,UAEI,cAACuC,EAAD,CAAiBC,WAAY,CAACO,KAAMG,KACpC,sBAAK5F,UAAS,kLACR0C,EAAW,oDAAsD,IADvE,UAEI,sBAAK1C,UAAU,gDAAf,UACI,qBAAKE,IAAKuF,EAAKvD,QAAQ4E,QAAS1G,IAAI,GAAGC,MAAM,OAAOgC,OAAO,SAC3D,mBAAGrC,UAAU,aAAb,SAA2ByF,EAAK9C,KAAKC,QAAQ,KAAM,UAEvD,qBAAK5C,UAAU,0DAAf,SA3EG,WACf,IAAM8D,EAAS2B,EAAKjB,eAAee,MAAK,SAAAd,GAAC,MAAwB,OAApBA,EAAE4B,SAAS1D,QACxD,OAAGmB,EAEK,mBAAG9D,UAAU,cAAb,SACK6D,EAAaC,EAAOY,gBAMzB,mBAAG1E,UAAU,4BAAb,uDAiESsG,aChFV,SAASS,EAAT,GAAiC,IAAX7D,EAAU,EAAVA,QAC3BX,EAAU1C,IAAM2C,WAAW5C,GAkBjC,OACI,sBAAKuD,GAAG,QAAQnD,UAAU,uBAA1B,UACI,sBAAKA,UAAU,sDAAf,UACI,uBAAMA,UAAU,0BAAhB,UACI,mBAAGA,UAAU,UAAb,0BACA,mBAAGA,UAAU,0BAAb,0DAEJ,sBAAMA,UAAU,0BAAhB,SACI,oBAAGA,UAAU,UAAb,UAAwBuC,EAAQa,eAAe4D,MAA/C,IAAuDzE,EAAQe,iBAAiB0D,MAAhF,6BAGR,qBAAKhH,UAAS,8JACRuC,EAAQa,eAAe4D,OAASzE,EAAQe,iBAAiB0D,MAAQ,uCAAyC,IADhH,SA1BA9D,EAAQzB,OAEJyB,EAAQ7B,KAAI,SAAC4F,EAAI1F,GAAL,OACR,cAACmF,EAAD,CAAcd,MAAOrE,EAAGkE,KAAMwB,GAAnB1F,MAKf,qBAAKvB,UAAU,oBAAf,wB,YCTD,SAASkH,EAAT,GAEP,IADJC,EACG,EADHA,QAASC,EACN,EADMA,YAAahC,EACnB,EADmBA,eAAgBiC,EACnC,EADmCA,eAAgBC,EACnD,EADmDA,eAAgBC,EACnE,EADmEA,YAAaC,EAChF,EADgFA,WAAYC,EAC5F,EAD4FA,gBAAiBC,EAC7G,EAD6GA,aAAcC,EAC3H,EAD2HA,WAiCxHC,EAAqB,WACvB,OAAGxC,EAAe3D,OAAS2F,EAAY/D,SAC7B,wBAAN,OAA+B+B,EAAe3D,OAA9C,YAAwD2F,EAAY/D,SAApE,KACIgE,EAAe5F,OAAS2F,EAAYpB,SAClC,wBAAN,OAA+BqB,EAAe5F,OAA9C,YAAwD2F,EAAYpB,SAApE,KACIsB,EAAe7F,OAAS2F,EAAYZ,UAClC,yBAAN,OAAgCc,EAAe7F,OAA/C,YAAyD2F,EAAYZ,UAArE,KACIe,EAAY9F,OAAS2F,EAAYJ,MAC/B,qBAAN,OAA4BO,EAAY9F,OAAxC,YAAkD2F,EAAYJ,MAA9D,KAEO,SAGf,OACI,sBAAKhH,UAAU,4DAAf,UACI,sBAAKmD,GAAG,WAAWnD,UAAU,uBAA7B,UACI,sBAAKA,UAAU,oDAAf,UACI,mBAAGA,UAAU,UAAb,sBACA,mBAAGA,UAAU,0BAAb,gDAEJ,qBAAKA,UAAU,gGAAf,SACI,qBAAKA,UAAU,mDAAf,SAlDTmH,GAAWK,EAEN,oBAAGxH,UAAU,iFAAb,UACI,cAAC,IAAD,CAAaA,UAAU,0BACtBmH,EAAU,6BAAgCK,EAAaI,IAAuB,sBAMnF,qCACI,wBAAQhH,KAAK,SAASkB,QAAS,kBAAM4F,KACjC1H,UAAU,6JADd,2BAIA,wBAAQY,KAAK,SAASkB,QAAS,kBAAM2F,KACjCzH,UAAU,6JADd,8BAIA,wBAAQY,KAAK,SAASkB,QAAS,kBAAM6F,KACjC3H,UAAU,sKADd,mCAoCR,cAACiD,EAAD,CAAgBC,QAASkC,IACzB,cAACW,EAAD,CAAgB7C,QAASmE,IACzB,cAACd,EAAD,CAAgBrD,QAASoE,IACzB,cAACP,EAAD,CAAa7D,QAASqE,OCpEnB,SAASM,IACpB,OACI,wBCMO,SAASC,IAGtB,IAAMC,EAAS,6BAITC,EAAY,CAAC,IAAK,EAAG,EAAG,EAAG,IAC3BC,EAAa,CAAC,IAAK,IAAK,IAAK,IAAK,KAKxC,EAA8BC,oBAAS,GAAvC,mBAAOf,EAAP,KAAgBgB,EAAhB,KACA,EAAsCD,mBAAS,IAA/C,mBAAOE,EAAP,KAAoBC,EAApB,KACA,EAAgCH,mBAAS,IAAzC,mBAAOI,EAAP,KAAiBC,EAAjB,KACA,EAAsCL,mBAAS,IAA/C,mBAAOM,EAAP,KAAoBC,EAApB,KACA,EAAgCP,mBAAS,IAAzC,mBAAOQ,EAAP,KAAiBC,EAAjB,KACA,EAAgCT,mBAAS,IAAzC,mBAAOU,EAAP,KAAiBC,EAAjB,KAGA,EAAoCX,oBAAS,GAA7C,mBAAOV,EAAP,KAAmBsB,EAAnB,KACA,EAA4CZ,mBAAS,GAArD,mBAAOa,EAAP,KAAuBC,EAAvB,KACA,EAAsBd,mBAAS,CAC7B7E,SAAU,EACV2C,SAAU,EACVH,MAAO,EACPW,UAAW,EACXQ,MAAO,IALFI,EAAP,oBAOA,EAA4Cc,mBAAS,IAArD,oBAAO9C,GAAP,MAAuB6D,GAAvB,MACA,GAA4Cf,mBAAS,IAArD,qBAAOb,GAAP,MAAuB6B,GAAvB,MACA,GAA4ChB,mBAAS,IAArD,qBAAOZ,GAAP,MAAuB6B,GAAvB,MACA,GAAsCjB,mBAAS,IAA/C,qBAAOX,GAAP,MAAoB6B,GAApB,MACA,GAAsClB,mBAAS,CAC7CmB,gBAAiB,GACjBC,YAAa,GACbC,eAAgB,KAHlB,qBAAOC,GAAP,MAAoBC,GAApB,MAOA,GAAwBvB,mBAAS,CAE/B,YAAa,SAAU,QAEvB,OAAQ,OAAQ,UAAW,MAE3B,OAAQ,WAAY,WAAY,QAAS,WAAY,UAAW,QAEhE,QAAS,SARJwB,GAAP,qBAUA,GAAqBxB,mBAAU,CAE7B,MAAO,WAAY,UAEnB,eAAgB,YAAa,OAAQ,MAAO,cAAe,WAAY,UAAW,UAAW,WAAY,cACzG,UAAW,YAAa,WAAY,UAAW,WAAY,QAAS,WAEpE,UAAW,QAAS,UAEpB,SAAU,YAAa,QAAS,aAT3ByB,GAAP,qBAqBA,GAAoBzB,mBAAS,CAC3B,QADK0B,GAAP,qBAGA,GAA0B1B,mBAAS,GAA5B2B,GAAP,qBACA,GAAwB3B,mBAAS,CAE/B,aAAc,MAAO,OAAQ,QAAS,WAAY,QAAS,UAAW,SAAU,SAAU,UAC1F,YAAa,OAAQ,QAAS,UAAW,WAAY,UAAW,OAAQ,QAAS,OACjF,WAAY,MAAO,YAEnB,MAAO,SAAU,UAAW,YAAa,OAAQ,YAAa,OAAQ,SAAU,OAEhF,SAAU,QAAS,QAAS,OAAQ,YAEpC,eAAgB,WAAY,UAVvB4B,GAAP,qBA0BA,GAAuB5B,mBAAS,CAC9B,aADK6B,GAAP,qBAGA,GAAqB7B,mBAAS,CAE5B,QAAS,QAAS,OAAQ,QAAS,MAAO,SAAU,OAAQ,UAAW,MAAO,OAC9E,OAAQ,UAER,OAAQ,QAAS,SAAU,YAAa,QAAS,QAAS,YAAa,OAAQ,aAAc,cAC7F,SAAU,UAAW,SAErB,OAAQ,UAAW,SAAU,WARxB8B,GAAP,qBAeA,GAAoB9B,mBAAS,CAC3B,OAAQ,SAAU,SAAU,SAAU,SADjC+B,GAAP,qBAMA,GAAsB/B,mBAAS,CAC7B,SAAU,MAAO,OAAQ,MAAO,eAAgB,WAAY,WAAY,cAAe,gBAAiB,aACxG,eAAgB,aAAc,aAAc,aAAc,gBAFrDgC,GAAP,qBAIA,GAAoBhC,mBAAS,CAC3B,OAAQ,QAAS,YAAa,cAAe,cAAe,YAAa,YAAa,eAAgB,YAAa,SAD9GiC,GAAP,qBAGA,GAAqBjC,mBAAS,CAC5B,SAAU,gBAAiB,cAAe,gBAAiB,cAAe,aAAc,aAAc,aAAc,aACpH,aAAc,gBAAiB,mBAAoB,eAAgB,UAAW,cAFzEkC,GAAP,qBAIA,GAAuBlC,mBAAS,CAC9B,mBAAoB,iBAAkB,gBAAiB,oBADlDmC,GAAP,qBAGA,GAAuBnC,mBAAS,CAC9B,eAAgB,UAAW,gBADtBoC,GAAP,qBAGA,GAAmBpC,mBAAS,CAC1B,SAAU,eAAgB,aAAc,QAAS,QAAS,WADrDqC,GAAP,qBAGA,GAAqBrC,mBAAS,CAC5B,eAAgB,cAAe,cAAe,mBAAoB,cAAe,gBAAiB,aAAc,cAChH,aAAc,aAAc,YAAa,aAAc,aAAc,cAAe,eAAgB,iBACpG,eAAgB,eAAgB,kBAH3BsC,GAAP,qBAKA,GAA2BtC,mBAAS,CAClC,aAAc,UAAW,YAAa,cAAe,cAAe,cAAe,cAAe,cAAe,eACjH,cAAe,aAAc,aAAc,eAAgB,YAAa,cAAe,cAAe,mBAFjGuC,GAAP,qBAIA,GAAsBvC,mBAAS,CAC7B,aAAc,cAAe,cAAe,cAAe,aAAc,iBAAkB,YAAa,aAAc,YACtH,cAAe,gBAAiB,cAAe,gBAF1CwC,GAAP,qBAIA,GAAoBxC,mBAAS,CAC3B,OAAQ,SAAU,YAAa,gBAAiB,aAAc,WAAY,WAAY,cAAe,gBAAiB,iBADjHyC,GAAP,qBAGA,GAAqBzC,mBAAS,CAC5B,cAAe,aAAc,eAAgB,aAAc,eAAgB,gBAAiB,gBADvF0C,GAAP,qBAGA,GAAqB1C,mBAAS,CAC5B,YAAa,WAAY,UAAW,kBAAmB,kBAAmB,eAAgB,cAAe,cACzG,YAAa,aAAc,QAAS,QAAS,QAAS,WAFjD2C,GAAP,qBAIA,GAAoB3C,mBAAS,CAC3B,gBAAiB,iBAAkB,aAAc,OAAQ,YAAa,SAAU,cAAe,cAAe,aAC9G,aAAc,eAAgB,aAAc,aAAc,cAAe,aAAc,aAAc,YAAa,cAClH,gBAAiB,mBAAoB,SAAU,UAAW,QAAS,WAAY,YAAa,cAAe,eAC3G,UAAW,SAJN4C,GAAP,qBAMA,GAAuB5C,mBAAS,CAC9B,aAAc,aAAc,aAAc,cAAe,WAAY,YAAa,aAAc,YAAa,WAAY,YACzH,gBAAiB,iBAAkB,OAAQ,OAAQ,OAAQ,aAAc,aAAc,YAAa,YAAa,cAAe,SAAU,cAAe,aAAc,iBAAkB,cAAe,eAAgB,WAAY,eACpO,YAAa,eAAgB,QAAS,eAAgB,cAAe,YAAa,UAAW,QAAS,aAAc,aAAc,eAAgB,SAAU,aAAc,aAAc,MACxL,iBAAkB,MAAO,OAAQ,cAAe,cAAe,aAAc,mBAAoB,cAAe,cAAe,gBAAiB,cAAe,gBAAiB,cAAe,cAAe,gBAAiB,cAAe,aAAc,YAAa,YAAa,gBAAiB,gBACvS,WAAY,gBACZ,SAAU,WAAY,kBAAmB,cAAe,eAAgB,eAAgB,YAAa,YAAa,aAAc,mBAAoB,gBAAiB,QAAS,eAAgB,cAAe,cAAe,YAAa,cAAe,MAAO,eAAgB,cAAe,aAAc,YAAa,cAAe,cAAe,cAAe,cACtW,aAAc,cAAe,aAAc,eAAgB,aAAc,YACzE,aAAc,WAAY,cAAe,aAAc,cAAe,aAAc,aAAc,kBAAmB,iBAAkB,YAAa,cAAe,aAAc,aAAc,aAC/L,WAAY,WAAY,aAAc,YAAa,cAAe,YAAa,YAC/E,WAAY,YACZ,cAAe,YACf,WAAY,cAAe,aAAc,aAAc,OAAQ,cAAe,WAAY,YAAa,QACvG,aAAc,WAAY,YAAa,aAAc,aAAc,cAAe,eAClF,aAAc,cAAe,SAC7B,UACA,UAAW,OAAQ,cAAe,gBAAiB,eAAgB,aAAc,QAAS,cAAe,aAAc,cAAe,QAAS,aAAc,iBAAkB,aAAc,gBAAiB,aAAc,UAC5N,eACA,OAAQ,aAAc,cAAe,YAAa,SAAU,UAAW,WAAY,aAAc,aAAc,eAAgB,UAC/H,eAAgB,UAAW,eAAgB,cAAe,eAAgB,eAAgB,eAAgB,gBAAiB,eAAgB,gBAAiB,aAAc,WAAY,eAAgB,OAAQ,QAAS,eAAgB,iBAAkB,YAAa,cAAe,QAAS,iBAAkB,eAAgB,cAAe,eAAgB,aAAc,QAAS,mBAAoB,cAAe,WAAY,WAAY,aAAc,eAAgB,kBAAmB,aAAc,aAAc,kBAC9f,SAAU,YAAa,YAAa,QAAS,SAAU,cAAe,eAAgB,kBAAmB,gBAAiB,cAAe,cAAe,YAAa,aACrK,SACA,WACA,gBAAiB,YAAa,YAAa,cAAe,cAC1D,eAAgB,YAAa,cAAe,cAAe,cAAe,cAAe,OAAQ,YACjG,YACA,eAAgB,WAAY,cA1BvB6C,GAAP,qBA4BA,GAA8B7C,mBAAS,CACrC,YADK8C,GAAP,qBAIA,GAA2B9C,mBAAS,CAClC,iBAAkB,eAAgB,cAAe,kBAD5C+C,GAAP,qBAGA,GAAuB/C,mBAAS,CAC9B,OAAQ,cAAe,aAAc,iBADhCgD,GAAP,qBAGA,GAAkChD,mBAAS,CACzC,SAAU,WAAY,aAAc,aAD/BiD,GAAP,qBAIA,GAA0BjD,mBAAS,CACjC,cAAe,cAAe,eAAgB,eAAgB,gBAAiB,aAAc,cAC7F,gBAAiB,cAAe,aAAc,aAAc,eAAgB,WAAY,aAAc,WAAY,oBAF7GkD,GAAP,qBAIA,GAAqBlD,mBAAS,CAC5B,cAAe,cAAe,cAAe,aAAc,cAAe,eAAgB,eAAgB,aAC1G,eAAgB,aAAc,cAAe,YAAa,eAAgB,eAAgB,cAAe,cAAe,cAFnHmD,GAAP,qBAIA,GAAsBnD,mBAAS,CAC7B,aAAc,cAAe,gBAAiB,kBAAmB,eAAgB,kBAAmB,cAAe,gBACnH,eAAgB,eAAgB,gBAAiB,aAAc,gBAAiB,iBAAkB,cAAe,eAAgB,iBAF5HoD,GAAP,qBAMA,GAA2BpD,mBAAS,CAClC7E,SAAU,EACV2C,SAAU,EACVH,MAAO,EACPW,UAAW,EACXQ,MAAO,IALF1D,GAAP,qBAOA,GAA4C4E,mBAAS,CACnD7E,SAAU,EACV2C,SAAU,EACVH,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GACvBW,UAAW,EACXQ,MAAO,IALT,qBAAO5D,GAAP,MAAuBmI,GAAvB,MAOA,GAAkDrD,mBAAS,CACzD7E,UAAU,EACV2C,UAAU,EACVH,OAAO,EACPW,WAAW,EACXQ,OAAO,IALT,qBAAOwE,GAAP,MAA0BC,GAA1B,MAUAC,qBAAW,WACT,IAAIC,GAAS,EADE,4CAIf,sCAAAlF,EAAA,sEAC+BmF,IAAMC,IAAN,UAAa9D,EAAb,yBAhQZ,MA+PnB,cACQ+D,EADR,gBAE4BF,IAAMC,IAAN,UAAa9D,EAAb,sBAhQZ,MA8PhB,cAEQgE,EAFR,gBAG+BH,IAAMC,IAAN,UAAa9D,EAAb,yBAhQZ,MA6PnB,OAGQiE,EAHR,OAIMC,EAAc,GACV1K,EAAI,EALd,aAKiBA,EAAIyG,EAAUvG,QAL/B,6BAMIwK,EANJ,UAMkCL,IAAMC,IAAN,UAAa9D,EAAb,sBAAiCC,EAAUzG,GAA3C,mBAAwD0G,EAAW1G,KANrG,gCAM4G2K,KAAKC,QANjH,yBAMgBC,KANhB,wBAKuC7K,IALvC,+BAQE0K,EAAc,GAAG/H,OAAOmI,MAAM,GAAIJ,GARpC,UAS4BL,IAAMC,IAAN,UAAa9D,EAAb,sBAnQZ,KA0PhB,QASQuE,EATR,OAUMX,IACFtD,EAAeyD,EAAeI,KAAKC,SACnC5D,EAAYwD,EAAYG,KAAKC,SAC7B1D,EAAeuD,EAAeE,KAAKC,SACnCxD,EAAYsD,GACZpD,EAAYyD,EAAYJ,KAAKC,SAC7BhE,GAAW,IAhBf,6CAJe,sBAyBf,OAvBAA,GAAW,GAFI,mCAuBfoE,GAEO,kBAAMZ,GAAS,KAGrB,IAgBHD,qBAAU,WACR,IAAIC,GAAS,EADC,4CAId,oCAAAlF,EAAA,sDACMpD,EAAW,GACXmJ,EAAaC,KAAKC,MAAqB,IAAdD,KAAKE,SAAe,MAExC/G,EAAQ,EAJnB,YAIsBA,EAAQwB,EAAY/D,UAJ1C,iCAK0BuJ,EAAcvJ,EAAUuC,GALlD,cAKUjE,EALV,gBAM0BiK,IAAMC,IAAIlK,EAAQkL,QAAQC,KANpD,OAMUD,EANV,OAOIlL,EAAQqB,YAAc6J,EAAQX,KAAKlJ,YACnCrB,EAAQK,YAAc6K,EAAQX,KAAKlK,YACnCL,EAAQI,aAAe8K,EAAQX,KAAKnK,aACpCJ,EAAQZ,MAAMqL,KAAK,CAACzJ,KAAM,QAASnB,UAAWuL,GAAcpL,EAAQZ,SACpEY,EAAQM,MAAS2D,IAAU4G,EAC3B7K,EAAQe,UAAW,EACnBf,EAAQiC,QAAU,KAClBjC,EAAQ6D,QAAU,KAClB7D,EAAQ8D,KAAO,KAEfpC,EAAS+I,KAAKzK,GACVgK,GACF1C,GAAkB,GAAD,OAAK5F,IAnB5B,QAIoDuC,IAJpD,uBAqBM+F,GACF3C,EAAkB,GAtBtB,6CAJc,+BA8BC4D,EA9BD,8EA8Bd,WAA6BI,GAA7B,mBAAAvG,EAAA,sDACMwG,EAAa,GACbC,EAAe,GAFrB,IAAAzG,EAAA,0DAAAA,EAAA,6DAKU9E,EAAUyG,EAAYqE,KAAKU,MAAMV,KAAKE,SAASvE,EAAY3G,SALrE,SAQmCmK,IAAMC,IAAN,UAAa9D,EAAb,mBAA8BpG,EAAQgB,OARzE,cAQYyK,EARZ,gBAS4BxB,IAAMC,IAAIuB,EAAelB,KAAKW,QAAQC,KATlE,cASYD,EATZ,gBAU+BjB,IAAMC,IAAIgB,EAAQX,KAAKmB,gBAAgBP,KAVtE,OAUYQ,EAVZ,OAaUC,EAAW,GACXC,EAAUF,EAAWpB,KAAKuB,MAC9B,GAMI,GAJAF,EAASnB,KAAKoB,EAAQX,QAAQlK,OAC1B+K,EAAqBF,EAAO,WAAe/L,QAGvB,EAAG,CAGzB,IAFIkM,EAAc,GACdC,EAAc,GACTrM,EAAI,EAAGA,EAAImM,EAAoBnM,IACtCoM,EAAYvB,KAAKoB,EAAQK,WAAWtM,GAAGsL,QAAQlK,MAG5C6K,EAAQK,WAAWtM,GAAGuM,eAAe,eAAiBN,EAAQK,WAAWtM,GAAGsM,WAAWpM,OAAS,GACjGmM,EAAYxB,KAAKoB,EAAQK,WAAWtM,GAAGsM,WAAW,GAAGhB,QAAQlK,MAEjE4K,EAASnB,KAAKuB,GAEXC,EAAYnM,OAAS,GACxB8L,EAASnB,KAAKwB,GAGdJ,EAAU,UAIVA,EAAUA,EAAO,WAAe,SAG3BA,GAAWA,EAAQM,eAAe,eA5CnD,OAgDUC,EAAiBR,EAASA,EAAS9L,OAAS,GAC7CuM,MAAMC,QAAQF,KACfA,EAAiBA,EAAetB,KAAKU,MAAMV,KAAKE,SAASoB,EAAetM,UAlDhF,UAuDiCmK,IAAMC,IAAN,UAAa9D,EAAb,2BAAsCgG,IAvDvE,QAuDYG,EAvDZ,OAwDUC,EAAY,GAChBD,EAAahC,KAAKiC,UAAUjI,SAAQ,SAACkI,EAAG7M,GACtC4M,EAAU/B,KAAK8B,EAAahC,KAAKiC,UAAU5M,GAAGI,QAAQgB,SAKxDwL,EAAYA,EAAU9I,QAAO,SAAA+I,GAC3B,OAAQA,EAAEzH,MAAM,KAAK0H,MAAK,SAAAC,GAAO,OAAI5E,GAAc9C,SAAS0H,SAK9DpB,EAAeiB,EAAU1B,KAAKU,MAAMV,KAAKE,SAASwB,EAAU1M,SArElE,gGAwEYyL,GAAgBqB,GAAoBvB,EAAiBE,GAxEjE,uCA0EqBtB,IAAMC,IAAN,UAAa9D,EAAb,mBAA8BmF,IA1EnD,cA0EED,EA1EF,yBA2ESA,EAAWf,MA3EpB,4CA9Bc,sBA+Gd,OAHG1E,GAAiC,IAAnBuB,GAAwBX,EAAY3G,OAAS,GA5GhD,mCA6GZ+M,GAEK,kBAAM7C,GAAS,KACrB,CAACnE,EAAYuB,EAAgBX,EAAahB,EAAasC,KAG1D,IAAM+E,GAAsBC,uBAAY,SAACrL,GACvC,OAAO+B,GAAeG,MAAK,SAAAhC,GAAC,OAAIF,EAASuD,SAASrD,EAAEZ,WACnD,CAACyC,KAEJsG,qBAAU,WACR,IAAIC,GAAS,EADC,4CAId,gCAAAlF,EAAA,sDACMT,EAAW,GAENJ,EAAQ,EAHnB,YAGsBA,EAAQwB,EAAYpB,UAH1C,iCAI0B2I,IAJ1B,OAIU/K,EAJV,OAKIoC,EAASoG,KAAKxI,GACV+H,GACFzC,GAAkB,GAAD,OAAKlD,IAP5B,OAGoDJ,IAHpD,uBASM+F,GACF3C,EAAkB,GAVtB,6CAJc,+BAkBC2F,IAlBD,2EAkBd,wCAAAlI,EAAA,sDACMmI,EAAa,GACbjL,EAAO,GACPkL,GAAS,EACTC,EAAc,EACdC,GAAS,EACTC,EAAQ,GAEHpJ,EAAQ,EARnB,YAQsBA,EAAQwB,EAAYvB,OAR1C,+BAUSmJ,GACDrL,EAAO,CAAChB,KAAMqM,GACdA,EAAQ,IAGRrL,EAAO2E,EAASmE,KAAKU,MAAMV,KAAKE,SAASrE,EAAS7G,SAf1D,UAgBmBmK,IAAMC,IAAN,UAAa9D,EAAb,gBAA2BpE,EAAKhB,OAhBnD,QAgBMgB,EAhBN,OAiBMkL,EAASlL,EAAKuI,KAAK9H,cAAgD,WAAhCT,EAAKuI,KAAK9H,aAAazB,KAC1DoM,GAAS,EAlBf,KAoBapL,EAAKuI,KAAKvJ,KApBvB,OAqBa,YArBb,MAsBa,YAtBb,QAqCa,cArCb,QAoDa,oBApDb,gCAwBciM,EAAWrJ,MAAK,SAAAO,GAAC,MAAe,cAAXA,EAAEnD,UACzBoM,EAAU3H,EAAYvB,MAAQ+I,EAAWnN,QAAW,KAE5B,YAAnBkC,EAAKuI,KAAKvJ,MAAuBkH,GAAkBiF,GAAgB,GAE3C,YAAnBnL,EAAKuI,KAAKvJ,MAAuBkH,GAAkBiF,GAAgB,EADzEE,EAAQ,YAGDnF,GAAkBiF,GAAgB,IACzCC,GAAS,IAhCzB,oCAuCcH,EAAWrJ,MAAK,SAAAO,GAAC,MAAe,YAAXA,EAAEnD,SAAwBiM,EAAWrJ,MAAK,SAAAO,GAAC,MAAe,YAAXA,EAAEnD,UACxEoM,EAAU3H,EAAYvB,MAAQ+I,EAAWnN,QAAW,KAE9CoI,GAAkBiF,GAAgB,EACpCE,EAAQvC,KAAKE,SAAW,GAAM,UAAY,UACnC9C,GAAkBiF,GAAgB,EACzCE,EAAQ,UACDnF,GAAkBiF,GAAgB,IACzCC,GAAS,IA/CzB,oCAsDUA,EAASN,GAAoB,CAAC,kBAtDxC,oEA2DaF,GAAoBK,EAAYjL,EAAKuI,KAAKvJ,OAASsM,GAAatL,EAAKuI,KAAKvJ,KAAM,IAAKgH,GAAYC,KACjGiF,GAAUC,GAAejF,KAAqBkF,EA5D3D,wBA6DIpL,EAAKuI,KAAKxJ,UAAW,EACrBkM,EAAWxC,KAAKzI,EAAKuI,MAClB2C,IACDC,GAA4B,EAC5BD,GAAS,GAjEf,QAQiDjJ,IARjD,gDAuESgJ,GAvET,6CAlBc,sBA+Fd,OAHGpH,GAAiC,IAAnBuB,GAAwBT,EAAS7G,OAAS,GA5F7C,mCA6FZyN,GAEK,kBAAMvD,GAAS,KACrB,CAACnE,EAAYuB,EAAgBT,EAAUlB,EAAauC,GAAYC,GAAWC,GAC1E4E,KAGJ/C,qBAAW,WACT,IAAIC,GAAS,EAEb,GAAGnE,GAAiC,IAAnBuB,GAAwB1B,GAAe5F,QAAU2F,EAAYpB,SAAS,CACrF,IAAImJ,EAAY,GAEhBvG,EAAS1C,SAAQ,SAAAtF,GACf,IAAIwO,EAAW,CAACzM,KAAM/B,EAAK+B,KAAMqD,SAAU,GAC3CqB,GAAenB,SAAQ,SAAAmJ,GAClBA,EAAG9J,MAAK,SAAAO,GAAC,OAAIA,EAAElF,KAAK+B,OAAS/B,EAAK+B,MAAgC,WAAxBmD,EAAE1B,aAAazB,UAC1DyM,EAASpJ,UAAY,MAGzBmJ,EAAU/C,KAAKgD,MAEjB,IAAIE,EAASH,EAAU9J,QAAO,SAAAvC,GAAC,OAAmB,IAAfA,EAAEkD,YAAgB3E,KAAI,SAAAyB,GAAM,OAAOA,EAAEH,QAEpEgJ,IACFlC,IAAe,SAAAnI,GAAM,OAAO,2BAAIA,GAAX,IAAc+H,gBAAiB8F,EAAW7F,YAAagG,OAC5EtG,EAAkB,IAGtB,OAAO,kBAAM2C,GAAS,KACrB,CAACnE,EAAYuB,EAAgB1B,GAAgBD,EAAawB,IAG7D,IAAM2G,GAA0Bb,uBAAY,SAAC9N,GAC3C,OAAOwE,GAAeG,MAAK,SAAAhC,GAAC,OAAIA,EAAEV,MAAM0C,MAAK,SAAAzC,GAAC,OAAIA,EAAElC,KAAK+B,OAAS/B,UACjE,CAACwE,KAEEoK,GAA0Bd,uBAAY,SAAC7L,GAG3C,OADaA,EAAM0C,MAAK,SAAAzC,GAAC,OAAI0G,GAAYF,YAAY1C,SAAS9D,QAE7D,CAAC0G,KAEEiG,GAAoBf,uBAAY,SAAC5K,GACrC,OAAOA,EAAOlB,QAAQ,KAAM,KAAK+D,MAAM,KAAKpB,MAAK,SAAA+I,GAAO,OAAI9E,GAAYF,YAAY1C,SAAS0H,QAC5F,CAAC9E,KAEEkG,GAAkChB,uBAAY,SAACjJ,EAAMkK,GACzD,IAAIZ,GAAS,EACTnO,EAAO6O,GAAkBhK,EAAKjB,eAAee,MAAK,SAAAd,GAAC,MAAwB,OAApBA,EAAE4B,SAAS1D,QAAemB,OAAO8L,eAC5F,GAAGhP,EAAK,CAEN,IAAIiP,EAAc,EAClBF,EAAazJ,SAAQ,SAAA4J,GACM,qBAArBA,EAAGrM,SAASd,MAAoD,WAArBmN,EAAGrM,SAASd,MACzD8M,GAAkBK,EAAGtL,eAAee,MAAK,SAAAd,GAAC,MAAwB,OAApBA,EAAE4B,SAAS1D,QAAemB,OAAO8L,iBAAmBhP,IACpGiP,GAAe,MAEjBd,EAASvF,GAAYH,gBAAgB9D,MAAK,SAAAwK,GAAE,OAAIA,EAAGpN,OAAS/B,GAAQiP,EAAcE,EAAG/J,YAEvF,OAAO+I,IACN,CAACvF,GAAaiG,KAEXO,GAAsCtB,uBAAY,SAAC7I,EAAOW,EAAWQ,EAAO2I,GAChF,IAAIZ,GAAS,EACTkB,EAAa,EACbJ,EAAc,EAgClB,OA7BGhK,GACDwB,GAAenB,SAAQ,SAAAgK,GAClBA,EAAG3K,MAAK,SAAAO,GAAC,OAAID,EAAMe,SAASd,EAAEnD,WAC/BsN,GAAc,MAGjBzJ,GACEc,GAAe/B,MAAK,SAAAkB,GAAC,OAAID,EAAUI,SAASH,EAAE9D,WAC/CsN,GAAc,GAGfjJ,GACD2I,EAAazJ,SAAQ,SAAA4J,GAChBA,EAAGnN,KAAKgE,MAAM,KAAKpB,MAAK,SAAA+I,GAAO,OAAItH,EAAMJ,SAAS0H,QACnDuB,GAAe,MAEnBd,EAAUc,EAAcI,IAKxBN,EAAazJ,SAAQ,SAAA4J,GACK,WAArBA,EAAGrM,SAASd,MACZ6G,GAAYF,YAAY1C,SAAS6I,GAAkBK,EAAGtL,eAAee,MAAK,SAAAd,GAAC,MAAwB,OAApBA,EAAE4B,SAAS1D,QAAemB,OAAO8L,kBACjHC,GAAe,MAEnBd,EAAUc,EAAcI,GAGnBlB,IACN,CAACvF,GAAanC,GAAgBC,GAAgBmI,KAE3CU,GAA2BzB,uBAAY,SAAC0B,EAAUC,GACtD,IAAIC,EAAYjJ,GAAehG,KAAI,SAAAgO,GAAQ,OAAOA,EAAGhO,KAAI,SAAAyE,GAAO,OAAOA,EAAEnD,WAGzE,GAFA2N,EAAY,GAAGpM,OAAOmI,MAAM,GAAIiE,GAE7BD,GAAcA,EAAW5O,OAAS,EACnC,OAAO6O,EAAU/K,MAAK,SAAA5C,GAAI,OAAI0N,EAAWzJ,SAASjE,MAGlD,OAAOyN,GACL,IAAK,SACH,OAAOE,EAAU/K,MAAK,SAAA5C,GAAI,OAAIuH,GAAYtD,SAASjE,MACrD,IAAK,OACH,OAAO2N,EAAU/K,MAAK,SAAA5C,GAAI,OAAIwH,GAAUvD,SAASjE,MACnD,IAAK,QACH,OAAO2N,EAAU/K,MAAK,SAAA5C,GAAI,OAAIyH,GAAWxD,SAASjE,MACpD,IAAK,UACH,OAAO2N,EAAU/K,MAAK,SAAA5C,GAAI,OAAI0H,GAAazD,SAASjE,MACtD,IAAK,UACH,OAAO2N,EAAU/K,MAAK,SAAA5C,GAAI,OAAI2H,GAAa1D,SAASjE,MACtD,IAAK,MACH,OAAO2N,EAAU/K,MAAK,SAAA5C,GAAI,OAAI4H,GAAS3D,SAASjE,MAClD,IAAK,QACH,OAAO2N,EAAU/K,MAAK,SAAA5C,GAAI,OAAI6H,GAAW5D,SAASjE,MACpD,IAAK,cACH,OAAO2N,EAAU/K,MAAK,SAAA5C,GAAI,OAAI8H,GAAiB7D,SAASjE,MAC1D,IAAK,SACH,OAAO2N,EAAU/K,MAAK,SAAA5C,GAAI,OAAI+H,GAAY9D,SAASjE,MACrD,IAAK,OACH,OAAO2N,EAAU/K,MAAK,SAAA5C,GAAI,OAAIgI,GAAU/D,SAASjE,MACnD,IAAK,QACH,OAAO2N,EAAU/K,MAAK,SAAA5C,GAAI,OAAIiI,GAAWhE,SAASjE,MACpD,IAAK,QACH,OAAO2N,EAAU/K,MAAK,SAAA5C,GAAI,OAAIkI,GAAWjE,SAASjE,MACpD,IAAK,OACH,OAAO2N,EAAU/K,MAAK,SAAA5C,GAAI,OAAImI,GAAUlE,SAASjE,MACnD,IAAK,UACH,OAAO2N,EAAU/K,MAAK,SAAA5C,GAAI,OAAIoI,GAAanE,SAASjE,MACtD,QACE,OAAO,KAGZ,CAAC0E,GAAgB6C,GAAaC,GAAWC,GAAYC,GAAcC,GAAcC,GAAUC,GAC1FC,GAAkBC,GAAaC,GAAWC,GAAYC,GAAYC,GAAWC,KAE3EwF,GAA8B7B,uBAAY,SAAC0B,EAAUI,GACzD,IAAIC,EAAenJ,GAAejG,KAAI,SAAAoF,GAAO,OAAOA,EAAE9D,QAEtD,GAAG6N,GAAkBA,EAAe/O,OAAS,EAC3C,OAAOgP,EAAalL,MAAK,SAAA5C,GAAI,OAAI6N,EAAe5J,SAASjE,MAGzD,OAAOyN,GACL,IAAK,UACH,OAAOK,EAAalL,MAAK,SAAA5C,GAAI,OAAIsI,GAAiBrE,SAASjE,MAC7D,IAAK,MACH,OAAO8N,EAAalL,MAAK,SAAA5C,GAAI,OAAIuI,GAAatE,SAASjE,MACzD,QACE,OAAO,KAGZ,CAAC2E,GAAgB2D,GAAkBC,KAGhCwF,GAAmBhC,uBAAY,SAAC9I,GACpC,OAAG4D,GAAYD,eAAe3D,GACrB4D,GAAYD,eAAe3D,GAE3B,OACR,CAAC4D,KAEJkC,qBAAU,WACR,IAAIC,GAAS,EADC,4CAId,gCAAAlF,EAAA,sDACMD,EAAY,GAEPZ,EAAQ,EAHnB,YAGsBA,EAAQwB,EAAYZ,WAH1C,iCAI0BmK,EAAcnK,GAJxC,OAIUhB,EAJV,OAKIgB,EAAU4F,KAAK5G,GACXmG,GACFxC,GAAkB,GAAD,OAAK3C,IAP5B,OAGqDZ,IAHrD,uBASM+F,GACF3C,EAAkB,GAVtB,6CAJc,+BAkBC2H,EAlBD,8EAkBd,WAA6BC,GAA7B,mBAAAnK,EAAA,sDACMoK,EAAa,GACb9B,GAAS,EAFf,cAKQvJ,EAAUgD,EAAYiE,KAAKU,MAAMV,KAAKE,SAASnE,EAAY/G,SALnE,SAMuBmK,IAAMC,IAAN,UAAa9D,EAAb,mBAA8BvC,EAAQ7C,OAN7D,OAMIkO,EANJ,OAOI9B,GAAS,EAPb,KASW8B,EAAW3E,KAAKvJ,KAT3B,OAUW,cAVX,QAcW,eAdX,QAkBW,aAlBX,QAsBW,eAtBX,QA0BW,kBA1BX,QA8BW,iBA9BX,QAkCW,cAlCX,QAsCW,WAtCX,QA0CW,eA1CX,MA2CW,UA3CX,QA+CW,aA/CX,QAmDW,YAnDX,QAuDW,UAvDX,QA2DW,YA3DX,QA+DW,eA/DX,QAmEW,eAnEX,QAuEW,cAvEX,QA2EW,eA3EX,QA+EW,gBA/EX,QAmFW,eAnFX,QAuFW,gBAvFX,QA2FW,gBA3FX,MA4FW,aA5FX,MA6FW,cA7FX,MA8FW,aA9FX,QAkGW,gBAlGX,MAmGW,gBAnGX,QAuGW,cAvGX,QA2GW,eA3GX,gCAYQoM,EAASoB,GAAyB,SAZ1C,oCAgBQpB,EAASoB,GAAyB,eAhB1C,oCAoBQpB,EAASoB,GAAyB,UApB1C,oCAwBQpB,EAASoB,GAAyB,QAxB1C,oCA4BQpB,EAASoB,GAAyB,SA5B1C,oCAgCQpB,EAASoB,GAAyB,SAhC1C,oCAoCQpB,EAAUoB,GAAyB,UAAYA,GAAyB,GAAI,CAAC,mBApCrF,oCAwCQpB,EAASoB,GAAyB,QAxC1C,oCA6CQpB,EAASS,GAAwB,CAAC,SA7C1C,oCAiDQT,EAASS,GAAwB,CAAC,UAjD1C,oCAqDQT,EAASS,GAAwB,CAAC,UArD1C,oCAyDQT,EAASS,GAAwB,CAAC,QAzD1C,oCA6DQT,EAASS,GAAwB,CAAC,SAAU,aA7DpD,oCAiEQT,EAASS,GAAwB,CAAC,OAAQ,SAAU,UAjE5D,oCAqEQT,EAASS,GAAwB,CAAC,WArE1C,oCAyEQT,EAASS,GAAwB,CAAC,SAzE1C,oCA6EQT,EAASS,GAAwB,CAAC,UA7E1C,oCAiFQT,EAASS,GAAwB,CAAC,UAjF1C,oCAqFQT,EAASS,GAAwB,CAAC,aArF1C,oCAyFQT,EAASS,GAAwB,CAAC,WAzF1C,oCAgGQT,EAASS,GAAwB,CAAC,WAhG1C,oCAqGQT,EAASoB,GAAyB,WArG1C,oCAyGQpB,EAASN,GAAoB,CAAC,WAzGtC,oCA6GQM,EAASN,GAAoB,CAAC,aA7GtC,oEAkHWF,GAAoBqC,EAAkBC,EAAW3E,KAAKvJ,OAASsM,GAAa4B,EAAW3E,KAAKvJ,KAAM,IAAKmH,GAAeC,MAAkBgF,EAlHnJ,iDAqHS8B,EAAW3E,MArHpB,6CAlBc,sBA6Id,OAHG1E,GAAiC,IAAnBuB,GAAwBP,EAAY/G,OAAS,GA1IhD,mCA2IZqP,GAEK,kBAAMnF,GAAS,KACrB,CAACnE,EAAYuB,EAAgBP,EAAapB,EAAa0C,GAAeC,GACrEoG,GAA0BX,GAAyBf,KAGvD/C,qBAAW,WACT,IAAIC,GAAS,EAEb,GAAGnE,GAAiC,IAAnBuB,GAAwBzB,GAAe7F,QAAU2F,EAAYZ,UAAU,CAGtF,IAAI2I,EAAY3F,GAAYH,gBAC5B8F,EAAUjJ,SAAQ,SAAAmJ,GAChB,OAAOA,EAAG1M,MACR,IAAK,SACC2E,GAAe/B,MAAK,SAAAkB,GAAC,MAAe,cAAXA,EAAE9D,UAC7B0M,EAAGrJ,UAAY,GACjB,MACF,IAAK,MACCsB,GAAe/B,MAAK,SAAAkB,GAAC,MAAe,gBAAXA,EAAE9D,UAC7B0M,EAAGrJ,UAAY,GACjB,MACF,IAAK,QACCsB,GAAe/B,MAAK,SAAAkB,GAAC,MAAe,aAAXA,EAAE9D,UAC7B0M,EAAGrJ,UAAY,GACjB,MACF,IAAK,WACCsB,GAAe/B,MAAK,SAAAkB,GAAC,MAAe,cAAXA,EAAE9D,UAC7B0M,EAAGrJ,UAAY,GACjB,MACF,IAAK,SACCsB,GAAe/B,MAAK,SAAAkB,GAAC,MAAe,aAAXA,EAAE9D,UAC7B0M,EAAGrJ,UAAY,OAMvB,IAAIsJ,EAASH,EAAU9J,QAAO,SAAAvC,GAAC,OAAmB,IAAfA,EAAEkD,YAAgB3E,KAAI,SAAAyB,GAAM,OAAOA,EAAEH,QAGpEoO,EAAW,GACX7N,EAAWmE,GAAehG,KAAI,SAAAgO,GAAE,OAAIA,EAAGhO,KAAI,SAAAyE,GAAM,OAAOA,EAAEnD,WAC9DO,EAAQkJ,KAAK9E,GAAejG,KAAI,SAAAoF,GAAM,OAAOA,EAAE9D,UAC/CO,EAAU,GAAGgB,OAAOmI,MAAM,GAAInJ,IAGtBgD,SAAQ,SAAA8K,IACVD,EAASnK,SAAS,eAAiB,sBAAIoE,IAAJ,YAA4BG,KAAyBvE,SAASoK,GACnGD,EAAS3E,KAAK,cACP2E,EAASnK,SAAS,UAAoB,cAARoK,EAE9BD,EAASnK,SAAS,WAAqB,eAARoK,GACtCD,EAAS3E,KAAK,UAFd2E,EAAS3E,KAAK,YAKdT,IACFlC,IAAe,SAAAnI,GAAM,OAAO,2BAAIA,GAAX,IAAc+H,gBAAiB8F,EAAW7F,YAAagG,EAAQ/F,eAAgBwH,OACpG/H,EAAkB,IAGtB,OAAO,kBAAM2C,GAAS,KACrB,CAACnE,EAAYuB,EAAgB1B,GAAgBC,GAAgBF,EAAaoC,GACzEwB,GAAqBG,KAEzBO,qBAAU,WACR,IAAIC,GAAS,EADC,4CAId,kCAAAlF,EAAA,sDACMO,EAAQ,GACHpB,EAAQ,EAFnB,YAEsBA,EAAQwB,EAAYJ,OAF1C,oBAGQiK,EAAWP,GAAiB9K,GAC5BH,EAAO,IACRwL,EALP,iCAMmBC,EAAWlK,EAAOiK,GANrC,OAMMxL,EANN,gDAQmByL,EAAWlK,GAR9B,QAQMvB,EARN,eASIuB,EAAMoF,KAAK3G,GACPkG,GACFvC,GAAe,GAAD,OAAKpC,IAXzB,QAEiDpB,IAFjD,uBAaM+F,GACF3C,EAAkB,GAdtB,6CAJc,+BAsBCkI,EAtBD,gFAsBd,WAA0BvB,EAAcsB,GAAxC,mBAAAxK,EAAA,sDACM0K,EAAU,GACVpC,GAAS,EAFf,OAKQtJ,EAAO,GALf,KAMWwL,EANX,OAOW,eAPX,OAUW,UAVX,OAaW,WAbX,+BAQQxL,EAAO,CAAC9C,KAAMyI,GAAgBqB,KAAKU,MAAMV,KAAKE,SAASvB,GAAgB3J,UAR/E,mCAWQgE,EAAO,CAAC9C,KAAM0I,GAAWoB,KAAKU,MAAMV,KAAKE,SAAStB,GAAW5J,UAXrE,oCAcQgE,EAAO,CAAC9C,KAAM2I,GAAYmB,KAAKU,MAAMV,KAAKE,SAASrB,GAAY7J,UAdvE,oCAiBQgE,EAAOiD,EAAS+D,KAAKU,MAAMV,KAAKE,SAASjE,EAASjH,SAjB1D,8CAoBoBmK,IAAMC,IAAN,UAAa9D,EAAb,gBAA2BtC,EAAK9C,OApBpD,QAoBIwO,EApBJ,OAqBIpC,GAAS,EArBb,KAuBWoC,EAAQjF,KAAKzI,SAASd,KAvBjC,OAwBW,eAxBX,QA0EW,mBA1EX,QAwFW,WAxFX,QA6FW,aA7FX,QAiGW,qBAjGX,QAqGW,qBArGX,8BAyBewO,EAAQjF,KAAKvJ,KAzB5B,OA0Be,eA1Bf,QA8Be,cA9Bf,QAkCe,iBAlCf,QAsCe,aAtCf,QA0Ce,qBA1Cf,QA8Ce,cA9Cf,QAkDe,cAlDf,QAsDe,aAtDf,QA0De,gBA1Df,QA8De,iBA9Df,QAkEe,eAlEf,gCA4BYoM,EAASoB,GAAyB,UA5B9C,4CAoCYpB,EAASoB,GAAyB,QApC9C,oCAwCYpB,EAASoB,GAAyB,SAxC9C,oCA4CYpB,EAAUoB,GAAyB,YAAcI,GAA4B,WA5CzF,oCAgDYxB,EAAUoB,GAAyB,GAAI,CAAC,eAAiBI,GAA4B,GAAI,CAAC,YAhDtG,oCAoDYxB,EAAUoB,GAAyB,GAAI,CAAC,gBAAkBI,GAA4B,GAAI,CAAC,YApDvG,oCAwDYxB,EAAUoB,GAAyB,GAAI,CAAC,UAAYI,GAA4B,GAAI,CAAC,iBAxDjG,oCA4DYxB,EAAUoB,GAAyB,GAAI,CAAC,eAAiBI,GAA4B,GAAI,CAAC,cAAe,cA5DrH,oCAgEYxB,EAASQ,GAAwB,UAhE7C,oCAoEYR,EAASoB,GAAyB,WApE9C,0GA2EegB,EAAQjF,KAAKvJ,KA3E5B,OA4Ee,cA5Ef,QAgFe,cAhFf,gCA8EYoM,EAAUoB,GAAyB,QAAUI,GAA4B,QAAUA,GAA4B,GAAI,CAAC,cAAe,gBA9E/I,oCAkFYxB,EAAUoB,GAAyB,QAAUI,GAA4B,QAAUA,GAA4B,GAAI,CAAC,gBAlFhI,4GA0FQxB,EAAUW,GAAgCyB,EAAQjF,KAAMyD,IAC9CK,GAAoC,CAAC,YAAa,CAAC,aAAc,GAAIL,GA3FvF,oCA+FQZ,EAASiB,GAAoC,CAAC,gBAAiB,CAAC,cAAe,CAAC,UAAWL,GA/FnG,oCAmGQZ,EAASW,GAAgCyB,EAAQjF,KAAMyD,GAnG/D,kCAsGiBwB,EAAQjF,KAAKvJ,KAtG9B,OAuGiB,gBAvGjB,MAwGiB,gBAxGjB,MAyGiB,eAzGjB,MA0GiB,gBA1GjB,QA8GiB,UA9GjB,QAkHiB,eAlHjB,QAsHiB,aAtHjB,gCA4GcoM,EAASiB,GAAoC,CAAC,gBAAiB,GAAI,CAAC,SAAUL,GA5G5F,oCAgHcZ,EAASN,GAAoB,CAAC,cAhH5C,oCAoHcM,EAASN,GAAoB,CAAC,UAAW,kBApHvD,oCAwHcM,EAASN,GAAoB,CAAC,SAAU,WAxHtD,gHAiIWF,GAAoBoB,EAAcwB,EAAQjF,KAAKvJ,OAASsM,GAAakC,EAAQjF,KAAKvJ,KAAM,IAAKqH,GAAYC,MAAe8E,EAjInI,iDAoISoC,EAAQjF,MApIjB,6CAtBc,sBAgKd,OAHG1E,GAAiC,IAAnBuB,GAAwBL,EAASjH,OAAS,GA7J7C,mCA8JZ2P,GAEK,kBAAMzF,GAAS,KACrB,CAACnE,EAAYuB,EAAgBL,EAAUtB,EAAa4C,GAAYC,GAAWmB,GAAiBC,GAAYC,GACvGoE,GAAiCS,GAA0BI,GAA6BhB,GACxFmB,GAAkBV,GAAqCvB,KAE3D/C,qBAAU,WACR,IAAIC,GAAS,EAOb,OALGnE,GAAiC,IAAnBuB,IACfsI,GAAS,WAAY,sCAAuC,CAACC,SAAS,IAClE3F,GACF7C,GAAc,IAEX,kBAAM6C,GAAS,KACrB,CAACnE,EAAYuB,IAIhB,IAgKMwI,GAAwB7C,uBAAY,SAAC8C,EAAQC,GACjD,IAAIC,EAAalG,GACbmG,GAAS,EACb,OAAOH,GACL,IAAK,YACCE,EAAWrO,UAAYoO,GAAOnO,GAAiBD,UACjDqO,EAAWrO,UAAW,EACtBsO,GAAS,EACTN,GAAS,kBAAD,cAA2B/N,GAAiBD,SAA5C,iCAAqF,CAACiO,SAAS,KAEjGI,EAAWrO,UAAYoO,EAAMnO,GAAiBD,WACpDqO,EAAWrO,UAAW,EACtBsO,GAAS,EACTN,GAAS,kBAAD,wBAAqC/N,GAAiBD,SAAtD,uBAAqF,CAACuO,SAAS,KAEzG,MACF,IAAK,YACCF,EAAW1L,UAAYyL,GAAOnO,GAAiB0C,UACjD0L,EAAW1L,UAAW,EACtB2L,GAAS,EACTN,GAAS,kBAAD,cAA2B/N,GAAiB0C,SAA5C,8CAAkG,CAACsL,SAAS,KAE9GI,EAAW1L,UAAYyL,EAAMnO,GAAiB0C,WACpD0L,EAAW1L,UAAW,EACtB2L,GAAS,EACTN,GAAS,kBAAD,wBAAqC/N,GAAiB0C,SAAtD,oCAAkG,CAAC4L,SAAS,KAEtH,MACF,IAAK,SACCF,EAAW7L,OAAS4L,GAAOnO,GAAiB0C,SAAW1C,GAAiBuC,OAC1E6L,EAAW7L,OAAQ,EACnB8L,GAAS,EACTN,GAAS,kBAAD,cAA2B/N,GAAiB0C,SAAW1C,GAAiBuC,MAAxE,8BAA2G,CAACyL,SAAS,KAEvHI,EAAW7L,OAAS4L,EAAMnO,GAAiB0C,SAAW1C,GAAiBuC,QAC7E6L,EAAW7L,OAAQ,EACnB8L,GAAS,EACTN,GAAS,kBAAD,wBAAqC/N,GAAiB0C,SAAW1C,GAAiBuC,MAAlF,oBAA2G,CAAC+L,SAAS,KAE/H,MACF,IAAK,aACCF,EAAWlL,WAAaiL,GAAOnO,GAAiBkD,WAClDkL,EAAWlL,WAAY,EACvBmL,GAAS,EACTN,GAAS,kBAAD,cAA2B/N,GAAiBkD,UAA5C,+CAAoG,CAAC8K,SAAS,KAEhHI,EAAWlL,WAAaiL,EAAMnO,GAAiBkD,YACrDkL,EAAWlL,WAAY,EACvBmL,GAAS,EACTN,GAAS,kBAAD,wBAAqC/N,GAAiBkD,UAAtD,qCAAoG,CAACoL,SAAS,KAExH,MACF,IAAK,SACCF,EAAW1K,OAASyK,GAAOnO,GAAiB0D,OAC9C0K,EAAW1K,OAAQ,EACnB2K,GAAS,EACTN,GAAS,eAAD,cAAwB/N,GAAiB0D,MAAzC,4CAA0F,CAACsK,SAAS,KAEtGI,EAAW1K,OAASyK,EAAMnO,GAAiB0D,QACjD0K,EAAW1K,OAAQ,EACnB2K,GAAS,EACTN,GAAS,eAAD,wBAAkC/N,GAAiB0D,MAAnD,kCAA0F,CAAC4K,SAAS,KAM/GD,IACDlG,GAAqBiG,GAClBG,OAAOC,OAAOJ,GAAYK,OAAM,SAAAN,GAAG,OAAIA,MACxCJ,GAAS,eAAD,2CAA6D,CAACC,SAAS,OAElF,CAAC9F,GAAmBlI,KAGvBoI,qBAAW,WACT,IAAIsG,EAAY,EACZC,EAAa,EACbC,EAAY,EACZC,EAAY,EAEhB/M,GAAec,SAAQ,SAAA3C,GAClBA,EAAEb,WACHsP,GAAwB,GACV,MAAbzO,EAAEK,UACHqO,GAA0B,GACZ,MAAb1O,EAAEiC,UACH0M,GAAwB,GACb,MAAV3O,EAAEkC,OACH0M,GAAwB,MAG5BZ,GAAsB,WAAYS,GAClCT,GAAsB,WAAYU,GAClCV,GAAsB,YAAaW,GACnCX,GAAsB,QAASY,GAE/B5G,IAAkB,SAAAjK,GAAO,OAAO,2BAC3BA,GADoB,IAEvB+B,SAAU2O,EACVhM,SAAUiM,EACVzL,UAAW0L,EACXlL,MAAOmL,SAER,CAAC/M,GAAgBmM,KAGpB7F,qBAAW,WACT,IAAI0G,EAAY,GACZC,EAAkB,EAEtBhL,GAAenB,SAAQ,SAAAmJ,GACrB,IAAIiD,EAAajD,EAAGhK,QAAO,SAAAS,GAAC,OAAIA,EAAEpD,YAAUjB,OAC5C2Q,EAAUhG,KAAKkG,GACfD,GAAoCC,KAGtCf,GAAsB,QAASc,GAE/B9G,IAAkB,SAAAjK,GAAM,OAAO,2BAAIA,GAAX,IAAcuE,MAAOuM,SAC5C,CAAC/K,GAAgBkK,KAIpB,IAAMxE,GAAgB,SAAChM,GACrB,IAAIK,EAAQ,EAIZ,OAHAL,EAAMmF,SAAQ,SAAA5E,GACVF,GAAgBE,EAAEE,aAEfJ,GAGHmN,GAAsB,SAACgE,EAAgBC,GAC3C,OAAOD,EAAehN,MAAK,SAAAkN,GAAE,OAAIA,EAAG9P,OAAS6P,MAIzCvD,GAAe,SAACuC,EAAQkB,EAAWrN,EAAQsN,GAC/C,IAAIC,GAAQ,EAIZ,OAHAA,EAAQpB,EAAO7K,MAAM+L,GAAWrE,MAAK,SAAAC,GAAO,OAAIjJ,EAAOuB,SAAS0H,QACpDqE,IACVC,GAASpB,EAAO7K,MAAM+L,GAAWrE,MAAK,SAAAC,GAAO,OAAIqE,EAAM/L,SAAS0H,OAC3DsE,GAGHC,GAAkB,SAACC,EAAMJ,GAC7B,OAAOI,EAAKnM,MAAM+L,GAAWrR,KAAI,SAAC0R,GAAU,OAAOA,EAAK,GAAGjO,cAAgBiO,EAAKC,UAAU,MAAKnM,KAAK,MAGhGoM,GAAiB,SAACzB,GACtB,OAAOA,EAAO5O,QAAQ,SAAS,SAAAiC,GAAC,OAAIA,EAAEC,kBAKlCuM,GAAW,SAAC6B,EAAOC,EAASvS,GAChCwS,IAAMC,QAAO,SAACvQ,GAAD,OACX,sBAAKhB,QAAS,kBAAMsR,IAAME,QAAQxQ,EAAEK,KAClCnD,UAAS,uMACP8C,EAAEyQ,QAAU,gBAAkB,gBADvB,qBAEP3S,EAAK0Q,QAAU,oDAAsD,GAF9D,qBAGP1Q,EAAKgR,QAAU,uDAAyD,GAHjE,qBAIPhR,EAAK4S,MAAQ,8CAAgD,IALjE,UAOE,qBAAKxT,UAAU,2CAAf,SACE,mBAAGA,UAAU,uBAAb,SAAqCkT,MAGvC,qBAAKlT,UAAU,eAAf,SACE,4BAAImT,aAiEZ,OACE,eAACvT,EAAmB6T,SAApB,CAA6BC,MAAO,CAClCtO,eAAgBA,GAChB9B,iBAAkBA,GAClBF,eAAgBA,GAChBX,cA/YkB,SAACd,GACrB,GAAI6F,EA2BF6J,GAAS,eAAgB,0CAA2C,CAACO,SAAS,QA3BjE,CACb,IAAID,GAAS,EACTzO,EAAUkC,GACdlC,EAAUA,EAAQ7B,KAAI,SAAAkC,GAiBpB,OAhBGA,EAAEZ,OAAShB,EAAQgB,OACjBY,EAAEb,UACHa,EAAEb,UAAW,EACba,EAAEK,QAAU,KACZL,EAAEiC,QAAU,KACZjC,EAAEkC,KAAO,KACTkM,GAAS,IAEFpO,EAAEb,UAAYU,GAAeC,SAAWC,GAAiBD,UAChEE,EAAEb,UAAW,EACbiP,GAAS,GAGTN,GAAS,kBAAD,eAA4B/N,GAAiBD,SAA7C,8BAAmF,CAACuO,SAAS,KAGlGrO,KAENoO,GACD1I,GAAkB/F,KAwXpBiB,WAhXe,SAACR,EAAMC,GACxB,GAAI4D,EAwBF6J,GAAS,eAAgB,0CAA2C,CAACO,SAAS,QAxBjE,CACb,IAAID,GAAS,EACTgC,EAAYtM,GAChBsM,EAAU/P,GAAW+P,EAAU/P,GAASvC,KAAI,SAAAyE,GAc1C,OAbGA,EAAEnD,OAASgB,EAAKhB,OACdmD,EAAEpD,UACHoD,EAAEpD,UAAW,EACbiP,GAAS,IAEF7L,EAAEpD,UAAYU,GAAeyC,MAAMjC,GAAWN,GAAiBuC,OACtEC,EAAEpD,UAAW,EACbiP,GAAS,GAGTN,GAAS,kBAAD,eAA4B/N,GAAiBuC,MAA7C,wCAA0F,CAAC+L,SAAS,KAGzG9L,KAEN6L,GACDzI,GAAkB,YAAIyK,MA4VxBjO,cApVkB,SAAC/D,EAASuD,GAC9B,GAAIsC,EA+DF6J,GAAS,eAAgB,0CAA2C,CAACO,SAAS,QA/DjE,CACb,IAAID,GAAS,EACTtO,EAAW+B,GACf/B,EAAWA,EAAShC,KAAI,SAAAkC,GAqDtB,OApDGA,EAAEZ,OAAShB,EAAQgB,KACK,MAAtBuC,EAAWtB,SACTL,EAAEK,UAAYsB,EAAWtB,QAC1BL,EAAEK,QAAUsB,EAAWtB,QAEvBL,EAAEK,QAAU,KACd+N,GAAS,GAEmB,MAAtBzM,EAAWM,SACdjC,EAAEiC,UAAYN,EAAWM,QAC1BjC,EAAEiC,QAAUN,EAAWM,QAEvBjC,EAAEiC,QAAU,KACdmM,GAAS,GAEgB,MAAnBzM,EAAWO,OACdlC,EAAEkC,OAASP,EAAWO,KACvBlC,EAAEkC,KAAOP,EAAWO,KAEpBlC,EAAEkC,KAAO,KACXkM,GAAS,IAIc,MAAtBzM,EAAWtB,SACTL,EAAEK,UAAYsB,EAAWtB,UAC1BL,EAAEK,QAAU,KACZ+N,GAAS,EACTN,GAAS,kBAAD,mBACI4B,GAAetR,EAAQgB,MAD3B,uBAC+CsQ,GAAe1P,EAAEZ,MADhE,uBACoFuC,EAAWtB,QAAQ,EADvG,KAER,CAACgO,SAAS,KAGW,MAAtB1M,EAAWM,SACTjC,EAAEiC,UAAYN,EAAWM,UAC1BjC,EAAEiC,QAAU,KACZmM,GAAS,EACTN,GAAS,kBAAD,mBACI4B,GAAetR,EAAQgB,MAD3B,uBAC+CsQ,GAAe1P,EAAEZ,MADhE,uBACoFsQ,GAAe3L,GAAepC,EAAWM,SAAS7C,MADtI,KAER,CAACiP,SAAS,KAGQ,MAAnB1M,EAAWO,MACTlC,EAAEkC,OAASP,EAAWO,OACvBlC,EAAEkC,KAAO,KACTkM,GAAS,EACTN,GAAS,eAAD,mBACI4B,GAAetR,EAAQgB,MAD3B,uBAC+CsQ,GAAe1P,EAAEZ,MADhE,oBACiFsQ,GAAe1L,GAAYrC,EAAWO,MAAM9C,MAD7H,KAER,CAACiP,SAAS,MAITrO,KAENoO,GACD1I,GAAkB5F,MAkRtB,UAQE,qBAAKrD,UAAU,2BAAf,SACE,cAAC,IAAD,CAAQ4T,SAAS,4BAAjB,SACE,sBAAK5T,UAAU,gBAAf,UACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAO6T,KAAK,SAAZ,SACE,cAAChM,EAAD,MAEF,cAAC,IAAD,CAAOgM,KAAK,WAAZ,SACE,cAAC3M,EAAD,CACEC,QAASA,EACTC,YAAaA,EACbhC,eAAgBA,GAChBiC,eAAgBA,GAChBC,eAAgBA,GAChBC,YAAaA,GACbC,WAAYA,EACZC,gBAjrChB,WACEwB,GAAkB,IAClBC,GAAkB,IAClBC,GAAkB,IAClBC,GAAe,IACfK,GAAe,CACbJ,gBAAiB,GACjBC,YAAa,GACbC,eAAgB,KAElBP,EAAkB,GAClBF,GAAc,IAuqCApB,aApSK,WAEnB,GADoBmK,OAAOC,OAAO1O,IAAgBiL,MAAK,SAAAoD,GAAG,OAAIzD,MAAMC,QAAQwD,GAAOA,EAAIpD,MAAK,SAAA9M,GAAC,OAAIA,KAAKkQ,KACvF,CACb,IAAIvO,EAAUkC,GACdlC,EAAUA,EAAQ7B,KAAI,SAAAkC,GAKpB,OAJAA,EAAEb,UAAW,EACba,EAAEK,QAAU,KACZL,EAAEiC,QAAU,KACZjC,EAAEkC,KAAO,KACFlC,KAET0F,GAAkB/F,GAElB,IAAIyQ,EAAYtM,GAChBsM,EAAUzN,SAAQ,SAAAmJ,GAChBA,EAAKA,EAAGhO,KAAI,SAAAyE,GAEV,OADAA,EAAEpD,UAAW,EACNoD,QAGXoD,GAAkB,YAAIyK,IAEtBtC,GAAS,WAAY,gCAAiC,CAACC,SAAS,SAGhED,GAAS,WAAY,iCAAkC,CAACO,SAAS,KA4QrDjK,WAtFG,WACjB,GAAGkK,OAAOC,OAAOtG,IAAmBuG,OAAM,SAAAN,GAAG,OAAIA,KAAM,CACrD,IAAIqC,EAAa,GACjB1O,GAAec,SAAQ,SAAA3C,GACrB,GAAGA,EAAEb,SAAS,CACZ,IAAIkB,EAAUyD,GAAe9D,EAAEK,SAASyB,QAAO,SAAAS,GAAC,OAAIA,EAAEpD,YAAUrB,KAAI,SAAAyE,GAAM,OAAOA,EAAEnD,QACnFmR,GAAcjB,GAAgBtP,EAAEZ,KAAM,KACtCmR,GAAc,MAAQjB,GAAgBtL,GAAYhE,EAAEkC,MAAM9C,KAAM,KAChEmR,GAAc,gBAAkBjB,GAAgBvL,GAAe/D,EAAEiC,SAAS7C,KAAM,KAChFmR,GAAc,QAAUvQ,EAAEtB,MAAQ,0BAA4B,aAC9D6R,GAAc,SAAWjB,GAAgBjP,EAAQ,GAAI,KACrDkQ,GAAc,SAAWjB,GAAgBjP,EAAQ,GAAI,KACrDkQ,GAAc,SAAWjB,GAAgBjP,EAAQ,GAAI,KACrDkQ,GAAc,SAAWjB,GAAgBjP,EAAQ,GAAI,KACrDkQ,GAAc,eA4BtB,SAA6BhB,GAC3B,IAAKiB,UAAUC,UAEb,YApBJ,SAAqClB,GACnC,IAAImB,EAAWC,SAASC,cAAc,YACtCF,EAASP,MAAQZ,EACjBoB,SAASE,KAAKC,YAAYJ,GAC1BA,EAASK,QACTL,EAASM,SACT,IACmBL,SAASM,YAAY,QAEpCnD,GAAS,WAAY,4BAA6B,CAACC,SAAS,IAE5DD,GAAS,WAAY,uCAAwC,CAACmC,OAAO,IACvE,MAAOiB,GACPpD,GAAS,WAAY,wCAAyC,CAACmC,OAAO,IAExEU,SAASE,KAAKM,YAAYT,GAIxBU,CAA4B7B,GAG9BiB,UAAUC,UAAUY,UAAU9B,GAAM+B,MAClC,WACExD,GAAS,WAAY,4BAA6B,CAACC,SAAS,OAE9D,SAASmD,GACPpD,GAAS,WAAY,uCAAwC,CAACmC,OAAO,OAnCvEsB,CAAoBhB,QAGpBzC,GAAS,WAAY,oCAAqC,CAACO,SAAS,SAqE5D,cAAC,IAAD,CAAOiC,KAAK,IAAZ,SACE,cAACnT,EAAD,gBAMV,cAAC,IAAD,CACEqU,SAAS,eACTC,cAAc,EACdC,OAAQ,OCv+ChB,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC9N,EAAD,MAEFoM,SAAS2B,eAAe,SAM1BX,M","file":"static/js/main.6e4e06cd.chunk.js","sourcesContent":["import React from 'react';\r\n \r\nconst TeamBuilderContext = React.createContext(null);\r\n \r\nexport { TeamBuilderContext };","export default __webpack_public_path__ + \"static/media/logo.2c482028.png\";","import React from 'react';\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport logo from '../assets/logo.png';\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <>                        \r\n            <div className=\"flex justify-between items-center min-h-max w-full xs:px-0 sm:px-12 md:px-24 lg:px-48 xl:px-60 bg-white transition duration-150 ease-in-out\" >\r\n                <Link to='/'\r\n                    className=\"inline-flex items-center justify-center h-16 px-4\">\r\n                    <img src={logo} alt=\"logo\" width=\"150px\" style={{minWidth: '150px'}} />\r\n                </Link>            \r\n                <div className=\"flex justify-center h-16\">\r\n                    <NavLink exact to='/'\r\n                        className=\"inline-flex items-center justify-center h-full w-24 px-4 border-b-4 border-transparent hover:bg-gray-300 transition duration-150 ease-in-out\"\r\n                        activeClassName=\"bg-gray-300 border-gray-600\">\r\n                        <p>Home</p>\r\n                    </NavLink>\r\n                    <NavLink to='/builder' \r\n                        className=\"inline-flex items-center justify-center h-full w-32 px-4 border-b-4 border-transparent hover:bg-gray-300 transition duration-150 ease-in-out\"\r\n                        activeClassName=\"bg-gray-300 border-gray-600\">\r\n                        <p>Team Builder</p>\r\n                    </NavLink>\r\n                    <NavLink to='/about'\r\n                        className=\"inline-flex items-center justify-center h-full w-24 px-4 border-b-4 border-transparent hover:bg-gray-300 transition duration-150 ease-in-out\"\r\n                        activeClassName=\"bg-gray-300 border-gray-600\">\r\n                        <p>About</p>\r\n                    </NavLink>                \r\n                </div>\r\n            </div>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React from 'react'\r\n\r\nexport default function Home() {\r\n    return (\r\n        <div>\r\n            Home\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function PokemonType({type}) {\r\n    const getColor = () => {\r\n        switch(type) {\r\n            case 'normal': return 'bg-normal';\r\n            case 'fire': return 'bg-fire';\r\n            case 'water': return 'bg-water';\r\n            case 'grass': return 'bg-grass';\r\n            case 'electric': return 'bg-electric';\r\n            case 'ice': return 'bg-ice';\r\n            case 'fighting': return 'bg-fighting';\r\n            case 'poison': return 'bg-poison';\r\n            case 'ground': return 'bg-ground';\r\n            case 'flying': return 'bg-flying';\r\n            case 'psychic': return 'bg-psychic';\r\n            case 'bug': return 'bg-bug';\r\n            case 'rock': return 'bg-rock';\r\n            case 'ghost': return 'bg-ghost';\r\n            case 'dark': return 'bg-dark';\r\n            case 'dragon': return 'bg-dragon';\r\n            case 'steel': return 'bg-steel';\r\n            case 'fairy': return 'bg-fairy';\r\n            default: return '';\r\n        }\r\n    }\r\n\r\n    return (\r\n        <p className={`flex items-center justify-center w-16 capitalize text-sm px-1.5 py-0.5 rounded-md text-white font-semibold ${getColor()}`}>\r\n            {type}\r\n        </p>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function PokemonStats({stats}) {\r\n    const getStatName = (stat) => {\r\n        switch (stat) {\r\n            case 0: return 'HP';\r\n            case 1: return 'Atk';\r\n            case 2: return 'Def';\r\n            case 3: return 'SA';\r\n            case 4: return 'SD';\r\n            case 5: return 'Spe';\r\n            case 6: return 'Total';\r\n            default: break;\r\n        }\r\n    }\r\n\r\n    const getStatColor = (stat) => {\r\n        switch (stat) {\r\n            case 0: return 'bg-red-400';\r\n            case 1: return 'bg-yellow-500';\r\n            case 2: return 'bg-yellow-300';\r\n            case 3: return 'bg-blue-400';\r\n            case 4: return 'bg-green-400';\r\n            case 5: return 'bg-purple-400';\r\n            case 6: return 'bg-gray-300';\r\n            default: break;\r\n        }\r\n    }\r\n\r\n    const getStatWidth = (stat, total = false) => { \r\n        if(stat <= 33 || (total && stat <= 300))\r\n            return 'w-2/12';\r\n        else if(stat <= 46 || (total && stat <= 340))\r\n            return 'w-3/12';\r\n        else if(stat <= 59 || (total && stat <= 380))\r\n            return 'w-4/12';\r\n        else if(stat <= 72 || (total && stat <= 420))\r\n            return 'w-5/12';\r\n        else if(stat <= 85 || (total && stat <= 460))\r\n            return 'w-6/12';\r\n        else if(stat <= 98 || (total && stat <= 500))\r\n            return 'w-7/12';\r\n        else if(stat <= 111 || (total && stat <= 540))\r\n            return 'w-8/12';\r\n        else if(stat <= 124 || (total && stat <= 580))\r\n            return 'w-9/12';\r\n        else if(stat <= 137 || (total && stat <= 620))\r\n            return 'w-10/12';\r\n        else if(stat <= 150 || (total && stat <= 660))\r\n            return 'w-11/12';\r\n        else\r\n            return 'w-full';            \r\n    }    \r\n\r\n    return (\r\n        <div className=\"flex flex-col justify-center items-start w-full text-sm\">\r\n            {stats.map((s, i) => {\r\n                return (\r\n                    <div key={i} className=\"flex w-full\">\r\n                        <div className=\"flex w-1/2\">\r\n                            <p className=\"w-10\">{getStatName(i)}:</p>\r\n                            <p>{s.base_stat}</p>                                        \r\n                        </div>\r\n                        <div className=\"flex w-1/2\">\r\n                            <div className={`flex ${getStatColor(i)} rounded-md my-1 ${getStatWidth(s.base_stat, (i === stats.length - 1))}`}/>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })}                            \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {GiSparkles} from 'react-icons/gi';\r\n\r\nexport default function PokemonSprite({pokemon, assign, opacity}) {\r\n    const getRarity = () => {\r\n        if(pokemon.is_legendary)\r\n            return \"bg-yellow-100 border-2 border-yellow-200 ring ring-yellow-100 animate-pulse\"\r\n        else if(pokemon.is_mythical)\r\n            return \"bg-purple-100 border-2 border-purple-200 ring ring-purple-100 animate-pulse\"\r\n        else if(pokemon.stats[6].base_stat >= 600)\r\n            return \"bg-blue-100 border-2 border-blue-200 ring ring-blue-100 animate-pulse\"\r\n        else\r\n            return 'animate-none'\r\n    }\r\n\r\n    return (                 \r\n        <div onClick={assign} \r\n            className={`relative w-24 h-24 ${opacity ? 'opacity-20' : ''} transition duration-150 ease-in-out`}>\r\n            <span className={`absolute w-24 h-24 absolute rounded-full opacity-100 ${getRarity()}`} />\r\n            {pokemon.shiny ? <GiSparkles className={`absolute right-0 w-24 h-24 absolute opacity-100 text-yellow-200 animate-pulse`} /> : null}\r\n            <img \r\n                src={pokemon.shiny ? pokemon.sprites.front_shiny : pokemon.sprites.front_default} alt=\"\" width=\"96px\" height=\"96px\"\r\n                className=\"absolute animate-wiggle\"\r\n            />            \r\n        </div>        \r\n    )\r\n}\r\n","import React from 'react'\r\nimport { TeamBuilderContext } from '../../context/TeamBuilderContext';\r\nimport PokemonType from './PokemonType';\r\nimport PokemonStats from './PokemonStats';\r\nimport PokemonSprite from './PokemonSprite';\r\nimport { FaGenderless } from 'react-icons/fa';\r\nimport { CgGenderMale, CgGenderFemale } from 'react-icons/cg';\r\n\r\nexport default function Pokemon({pokemon}) {\r\n    const context = React.useContext(TeamBuilderContext);\r\n\r\n    const getGenders = () => {\r\n        if(pokemon.gender_rate < 0)\r\n            return <FaGenderless />\r\n        else if (pokemon.gender_rate === 0)\r\n            return <CgGenderMale />\r\n        else if (pokemon.gender_rate === 8)\r\n            return <CgGenderFemale />\r\n        else \r\n            return <span className=\"flex\"><CgGenderMale /><CgGenderFemale /></span>\r\n    }    \r\n\r\n    return (\r\n        <div onClick={() => context.selectPokemon(pokemon)} \r\n            className={`animate-enter cursor-pointer flex flex-col gap-2 justify-start items-center bg-white rounded-md p-2 w-48 h-auto border-2 border-gray-200 hover:bg-gray-200 transition duration-150 ease-in-out\r\n            ${pokemon.selected ? 'bg-green-100 border-green-200 ring ring-green-100' : ''}`}>                        \r\n\r\n            <PokemonSprite pokemon={pokemon} />            \r\n\r\n            <div className=\"capitalize text-center\">{pokemon.name.replace(/-/g, \" \")} {pokemon.shiny ? 'Lv60' : 'Lv50'}</div>\r\n            <div className=\"flex justify-center items-center gap-2\">\r\n                {pokemon.types.map((t, i) => {\r\n                    return (                                    \r\n                        <PokemonType key={i} type={t.type.name} />\r\n                    )\r\n                })}                           \r\n            </div>\r\n            <PokemonStats stats={pokemon.stats}/> \r\n            <div className=\"flex w-full justify-between items-center text-xs\">\r\n                <p>{pokemon.height/10}m</p>\r\n                <p>{pokemon.weight/10}kg</p>\r\n                <p className=\"text-base\">{getGenders()}</p>\r\n            </div>                       \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { TeamBuilderContext } from '../../context/TeamBuilderContext';\r\nimport Pokemon from './Pokemon';\r\n\r\nexport default function PokemonOptions({ options }) {\r\n    const context = React.useContext(TeamBuilderContext);\r\n    \r\n    const setOptions = () => {\r\n        if (options.length) {\r\n            return (\r\n                options.map(p => (\r\n                    <Pokemon key={p.id} pokemon={p} />\r\n                ))\r\n            );\r\n        } else {\r\n            return (                \r\n                <div className=\"p-4 text-gray-300\">\r\n                    Empty\r\n                </div>            \r\n            );\r\n        }\r\n    }\r\n\r\n    // Render.\r\n    return (\r\n        <div id=\"pokemons\" className=\"flex flex-col w-full\">\r\n            <div className=\"flex justify-between items-center gap-4 text-center\">\r\n                <span className=\"flex gap-4 items-center\">\r\n                    <p className=\"text-lg\">Pokemon Options</p>\r\n                    <p className=\"text-base text-gray-300\">Select pokemons for your team.</p>\r\n                </span>\r\n                <p className=\"text-lg\">{context.selectionsMade.pokemons}/{context.selectionsNeeded.pokemons} Pokemons Selected</p>\r\n            </div>            \r\n            <div className={`flex flex-wrap justify-center items-start gap-4 p-4 w-full border-2 rounded-md border-gray-200 transition duration-150 ease-in-out\r\n                ${context.selectionsMade.pokemons >= context.selectionsNeeded.pokemons ? 'border-green-200 ring ring-green-100' : ''}`}>\r\n                {setOptions()}\r\n            </div>\r\n        </div>\r\n    );    \r\n}\r\n","import React from 'react'\r\n\r\nexport default function MoveCategory({category}) {\r\n    const getColor = () => {\r\n        switch(category){\r\n            case 'physical': return 'bg-red-600';\r\n            case 'special': return 'bg-blue-600';\r\n            case 'status': return 'bg-gray-400';\r\n            default: break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <p className={`flex items-center justify-center w-16 capitalize text-sm px-1.5 py-0.5 rounded-md text-white font-semibold ${getColor()}`}>\r\n            {category}\r\n        </p>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { TeamBuilderContext } from '../../context/TeamBuilderContext';\r\nimport PokemonType from '../pokemon/PokemonType';\r\nimport MoveCategory from './MoveCategory';\r\n\r\nexport default function Move({move, moveset}) {\r\n    const context = React.useContext(TeamBuilderContext);\r\n\r\n    const getEffects = () => {\r\n        if(move.effect_entries.length > 0) {\r\n            return move.effect_entries.map((e, i) => {\r\n                return (\r\n                    <p key={i} className=\"text-center\">\r\n                        {formatEffect(e.short_effect)}                        \r\n                    </p>\r\n                )\r\n            })\r\n        }\r\n        else {\r\n            return (\r\n                <p className=\"text-center flex flex-col\">\r\n                    No available effect entries from PokeAPI.\r\n                    <a onClick={(e) => e.stopPropagation()} href={`https://bulbapedia.bulbagarden.net/wiki/${move.name.replace(/-/g, \" \").replace(/\\b\\w/g, l => l.toUpperCase()).replace(/ /g, \"_\")}_(move)`} target=\"_blank\" rel=\"noreferrer\"\r\n                        className=\"text-blue-400 hover:text-blue-500\">\r\n                        Check the move in Bulbapedia.\r\n                    </a>\r\n                </p>\r\n            )\r\n        }\r\n    }\r\n\r\n    const formatEffect = (effect) => {\r\n        let formattedEffect = effect;\r\n        // Adjust specific items.      \r\n        switch(move.name){\r\n            case 'techno-blast':\r\n                formattedEffect = formattedEffect.replace('plate or ', '');\r\n                break;\r\n            case 'judgment':\r\n                formattedEffect = formattedEffect.replace(' or drive', '');\r\n                break;\r\n            case 'multi-attack':\r\n                formattedEffect = formattedEffect.replace('plate or drive', 'memory');\r\n                break;\r\n            default:\r\n                break;\r\n        }           \r\n        // Adjust general moves.\r\n        formattedEffect = formattedEffect.replace(/\\$effect_chance/g, move.effect_chance);\r\n        if(move.priority !== 0)\r\n            formattedEffect = formattedEffect.concat(' Priority '+move.priority);\r\n        return formattedEffect;\r\n    }\r\n\r\n    return (\r\n        <div onClick={() => context.selectMove(move, moveset)}\r\n            className={`cursor-pointer flex flex-col gap-2 justify-start items-center bg-white rounded-md p-2 w-full h-auto border-2 border-gray-200 hover:bg-gray-200 transition duration-150 ease-in-out \r\n            ${move.selected ? 'bg-green-100 border-green-200 ring ring-green-100' : ''}`}>            \r\n            <div className=\"flex justify-between items-center w-full gap-2\">\r\n                <p className=\"capitalize\">{move.name.replace(/-/g, \" \")}</p>\r\n                <div className=\"flex justify-center gap-2\">\r\n                    <PokemonType type={move.type.name} />\r\n                    {move.damage_class ? <MoveCategory category={move.damage_class.name} /> : ''}\r\n                </div>                                \r\n            </div>\r\n            <div className=\"flex w-full gap-2 justify-between text-sm\">\r\n                <p>PP: {move.pp}</p>\r\n                <p>Pwr: {move.power ? move.power : '-'}</p>\r\n                <p>Acc: {move.accuracy ? move.accuracy : '-'}</p>                \r\n            </div>\r\n            <div className=\"flex flex-col justify-start items-center text-sm w-full\">\r\n                {getEffects()}\r\n            </div>\r\n            {/* <div className=\"flex justify-center items-center text-xs w-full gap-2\">\r\n                {move.priority !== 0 ? 'Priority: '+move.priority : ''}\r\n                {move.meta && move.meta.crit_rate !== 0 ? 'CR: '+move.meta.crit_rate : ''}\r\n            </div> */}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { TeamBuilderContext } from '../../context/TeamBuilderContext';\r\nimport PokemonSprite from './PokemonSprite'\r\n\r\nexport default function SelectedPokemon({ assignable }) {\r\n    const context = React.useContext(TeamBuilderContext);   \r\n    const selectedPokemon = context.pokemonOptions.filter(p => p.selected);      \r\n\r\n    const getAssigned = () => {\r\n        if(assignable.moveset != null)            \r\n            return selectedPokemon.find(p => p.moveset === assignable.moveset)\r\n        else if(assignable.ability != null)            \r\n            return selectedPokemon.find(p => p.ability === assignable.ability)\r\n        else if(assignable.item != null)            \r\n            return selectedPokemon.find(p => p.item === assignable.item)\r\n        else\r\n            return null;\r\n    }\r\n    let assignedPokemon = getAssigned();\r\n\r\n    const getAssignedOutside = (pokemon) => {\r\n        if(assignable.moveset != null)\r\n            return pokemon.moveset !== null;\r\n        else if (assignable.ability != null)\r\n            return pokemon.ability !== null;\r\n        else if (assignable.item != null)\r\n            return pokemon.item !== null;\r\n        else\r\n            return null;\r\n    }\r\n\r\n    const getSelectedPokemons = () => {        \r\n        if(selectedPokemon.length > 0 && !assignedPokemon) {\r\n            return selectedPokemon.map((p, i) => {\r\n                return (\r\n                    <PokemonSprite key={i} pokemon={p} assign={() => context.assignPokemon(p, assignable)}\r\n                        opacity={(assignedPokemon && p.name !== assignedPokemon.name) ||\r\n                        (!assignedPokemon && getAssignedOutside(p))}\r\n                    />\r\n                )\r\n            })            \r\n        }\r\n        else if(selectedPokemon.length > 0 && assignedPokemon) {\r\n            return <PokemonSprite pokemon={assignedPokemon} assign={() => context.assignPokemon(assignedPokemon, assignable)} />            \r\n        }\r\n        else {\r\n            return (\r\n                <div className=\"p-4 text-gray-300\">\r\n                    No selected pokemon\r\n                </div> \r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={`cursor-pointer flex flex-wrap gap-2 justify-center items-center bg-white rounded-md p-2 w-full h-auto border-2 border-gray-200 hover:bg-gray-200 transition duration-150 ease-in-out \r\n            ${assignedPokemon ? 'bg-green-100 border-green-200 ring ring-green-100' : ''}`}>\r\n            {getSelectedPokemons()}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { TeamBuilderContext } from '../../context/TeamBuilderContext';\r\nimport Move from './Move';\r\nimport SelectedPokemon from '../pokemon/SelectedPokemon';\r\n\r\nexport default function Moveset({ moveset, index }) {\r\n    const context = React.useContext(TeamBuilderContext);\r\n\r\n    const setMoves = () => {\r\n        if (moveset.length) {\r\n            return (\r\n                moveset.map(m => (\r\n                    <Move moveset={index} key={m.id} move={m} />\r\n                ))\r\n            );\r\n        } else {\r\n            return (                \r\n                <div className=\"p-4 text-gray-300\">\r\n                    Empty\r\n                </div>            \r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"animate-enter flex flex-col justify-start items-end\">\r\n            <div className=\"flex w-full justify-end items-center\">\r\n                {/* <p className=\"text-base\">{!context.pokemonOptions.find(p => p.moveset === index) ? 'No ' : ''}Pokemon Assigned</p> */}\r\n                <p className=\"text-base\">{context.selectionsMade.moves[index]}/{context.selectionsNeeded.moves} Moves Selected</p>\r\n            </div>\r\n            <div className={`flex flex-col gap-2 justify-start items-center rounded-md p-2 w-96 h-auto border-2 border-gray-200 transition duration-150 ease-in-out \r\n                ${context.selectionsMade.moves[index] >= context.selectionsNeeded.moves &&\r\n                context.pokemonOptions.find(p => p.moveset === index) ? 'border-green-200 ring ring-green-100' : ''}`}>\r\n                <SelectedPokemon assignable={{moveset: index}} />\r\n                {setMoves()}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { TeamBuilderContext } from '../../context/TeamBuilderContext';\r\nimport Moveset from './Moveset';\r\n\r\nexport default function MovesetOptions({ options }) {\r\n    const context = React.useContext(TeamBuilderContext);\r\n\r\n    const selectedMoves  = () => {\r\n        let sm = 0;        \r\n        context.selectionsMade.moves.forEach(m => {\r\n            sm = sm + m\r\n        });\r\n        return sm;\r\n    }\r\n\r\n    const setOptions = () => {\r\n        if (options.length) {\r\n            return (\r\n                options.map((m, i) => (\r\n                    <Moveset key={i} index={i} moveset={m} />\r\n                ))\r\n            );\r\n        } else {\r\n            return (                \r\n                <div className=\"p-4 text-gray-300\">\r\n                    Empty\r\n                </div>            \r\n            );\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div id=\"movesets\" className=\"flex flex-col w-full\">\r\n            <div className=\"flex justify-between items-center gap-4 text-center\">\r\n                <span className=\"flex gap-4 items-center\">\r\n                    <p className=\"text-lg\">Moveset Options</p>\r\n                    <p className=\"text-base text-gray-300\">Assign your selected pokemons to a moveset and select their moves.</p>\r\n                </span>\r\n                <span className=\"flex gap-4 items-center\">\r\n                    <p className=\"text-lg\">{context.selectionsMade.movesets}/{context.selectionsNeeded.movesets} Pokemons Assigned</p>\r\n                    {/* <p className=\"text-lg\">{selectedMoves()}/{context.selectionsNeeded.movesets * context.selectionsNeeded.moves} Moves Selected</p> */}\r\n                </span>\r\n            </div>            \r\n            <div className={`flex flex-wrap justify-center items-start gap-4 p-4 w-full border-2 rounded-md border-gray-200 transition duration-150 ease-in-out\r\n                ${context.selectionsMade.movesets >= context.selectionsNeeded.movesets && \r\n                selectedMoves() >= context.selectionsNeeded.movesets * context.selectionsNeeded.moves ? 'border-green-200 ring ring-green-100' : ''}`}>\r\n                {setOptions()}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { TeamBuilderContext } from '../../context/TeamBuilderContext';\r\nimport SelectedPokemon from '../pokemon/SelectedPokemon';\r\n\r\nexport default function Ability({ability, index}) {\r\n    const context = React.useContext(TeamBuilderContext);\r\n    const selected = context.pokemonOptions.find(p => p.ability === index);\r\n\r\n    const getEffects = () => {\r\n        const effect = ability.effect_entries.find(e => e.language.name === 'en');\r\n        if(effect) {            \r\n            return (\r\n                <p className=\"text-center\">\r\n                    {formatEffect(effect.short_effect)} \r\n                </p>\r\n            )            \r\n        }\r\n        else {\r\n            return (\r\n                <p className=\"text-center flex flex-col\">\r\n                    No available effect entries from PokeAPI.\r\n                    <a onClick={(e) => e.stopPropagation()} href={`https://bulbapedia.bulbagarden.net/wiki/${ability.name.replace(/-/g, \" \").replace(/\\b\\w/g, l => l.toUpperCase()).replace(/ /g, \"_\")}_(Ability)`} target=\"_blank\" rel=\"noreferrer\"\r\n                        className=\"text-blue-400 hover:text-blue-500\">\r\n                        Check the ability in Bulbapedia.\r\n                    </a>\r\n                </p>\r\n            )\r\n        }\r\n    }\r\n\r\n    const formatEffect = (effect) => {\r\n        let formattedEffect = effect;\r\n        // Adjust specific items.      \r\n        switch(ability.name){\r\n            case 'sand-stream':\r\n            case 'drizzle':\r\n            case 'snow-warning':\r\n            case 'drought':\r\n                formattedEffect = formattedEffect.replace('indefinitely', '5 turns');\r\n                break;            \r\n            default:\r\n                break;\r\n        }           \r\n        // Adjust general abilities.\r\n        \r\n        return formattedEffect;\r\n    }\r\n\r\n    return (\r\n        <div className=\"animate-enter flex flex-col justify-start items-end\">\r\n            {/* <div className=\"flex w-full justify-start items-center\">\r\n                <p className=\"text-base\">{!selected ? 'No ' : ''}Pokemon Assigned</p>\r\n            </div> */}\r\n            <div className={`flex flex-col gap-2 justify-start items-center rounded-md p-2 w-96 h-auto border-2 border-gray-200 transition duration-150 ease-in-out  \r\n                ${selected ? 'border-green-200 ring ring-green-100' : ''}`}>            \r\n                <SelectedPokemon assignable={{ability: index}} />\r\n                <div className={`flex flex-col gap-2 justify-start items-center bg-white rounded-md p-2 w-full h-auto border-2 border-gray-200 transition duration-150 ease-in-out \r\n                    ${selected ? 'bg-green-100 border-green-200 ring ring-green-100' : ''}`}>\r\n                    <div className=\"flex justify-center items-center w-full gap-2\">\r\n                        <p className=\"capitalize\">{ability.name.replace(/-/g, \" \")}</p>                \r\n                    </div>            \r\n                    <div className=\"flex flex-col justify-start items-center text-sm w-full\">\r\n                        {getEffects()}\r\n                    </div>            \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { TeamBuilderContext } from '../../context/TeamBuilderContext';\r\nimport Ability from './Ability';\r\n\r\nexport default function AbilityOptions({options}) {\r\n    const context = React.useContext(TeamBuilderContext);\r\n\r\n    const setOptions = () => {\r\n        if (options.length) {\r\n            return (\r\n                options.map((a, i) => (\r\n                    <Ability key={i} index={i} ability={a} />\r\n                ))                \r\n            );\r\n        } else {\r\n            return (                \r\n                <div className=\"p-4 text-gray-300\">\r\n                    Empty\r\n                </div>            \r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div id=\"abilities\" className=\"flex flex-col w-full\">\r\n            <div className=\"flex justify-between items-center gap-4 text-center\">\r\n                <span className=\"flex gap-4 items-center\">\r\n                    <p className=\"text-lg\">Ability Options</p>\r\n                    <p className=\"text-base text-gray-300\">Assign your selected pokemons to an ability.</p>\r\n                </span>\r\n                <span className=\"flex gap-4 items-center\">\r\n                    <p className=\"text-lg\">{context.selectionsMade.abilities}/{context.selectionsNeeded.abilities} Pokemons Assigned</p>                    \r\n                </span>\r\n            </div>            \r\n            <div className={`flex flex-wrap justify-center items-start gap-4 p-4 w-full border-2 rounded-md border-gray-200 transition duration-150 ease-in-out\r\n                ${context.selectionsMade.abilities >= context.selectionsNeeded.abilities ? 'border-green-200 ring ring-green-100' : ''}`}>\r\n                {setOptions()}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { TeamBuilderContext } from '../../context/TeamBuilderContext';\r\nimport SelectedPokemon from '../pokemon/SelectedPokemon';\r\n\r\nexport default function Item({item, index}) {\r\n    const context = React.useContext(TeamBuilderContext);\r\n    const selected = context.pokemonOptions.find(p => p.item === index);\r\n\r\n    const getEffects = () => {\r\n        const effect = item.effect_entries.find(e => e.language.name === 'en');\r\n        if(effect) {                \r\n            return (\r\n                <p className=\"text-center\">\r\n                    {formatEffect(effect.short_effect)}  \r\n                </p>\r\n            )            \r\n        }\r\n        else {\r\n            return (\r\n                <p className=\"text-center flex flex-col\">\r\n                    No available effect entries from PokeAPI.\r\n                    {/* <a onClick={(e) => e.stopPropagation()} href={`https://bulbapedia.bulbagarden.net/wiki/${ability.name.replace(/-/g, \" \").replace(/\\b\\w/g, l => l.toUpperCase()).replace(/ /g, \"_\")}_(Ability)`} target=\"_blank\" rel=\"noreferrer\"\r\n                        className=\"text-blue-400 hover:text-blue-500\">\r\n                        Check the item in Bulbapedia.\r\n                    </a> */}\r\n                </p>\r\n            )\r\n        }\r\n    }\r\n\r\n    const formatEffect = (effect) => {\r\n        let formattedEffect = effect.split(\".\").filter(e => {\r\n            return !e.includes(\"Breeding:\") && !e.includes(\"Traded on\") && !e.includes(\"Held by\") && !e.includes(\"begets\") && !e.includes(\"Egg\")\r\n        }).map(e => {\r\n            return e.replace(\"Held: \", \"\")\r\n        }).join(\".\");  \r\n        // Adjust specific items.      \r\n        switch(item.name){\r\n            case 'shell-bell':                                \r\n                formattedEffect = formattedEffect.replace(\"receives\", \"heals\");\r\n                break;\r\n            case 'bright-powder':                                \r\n                formattedEffect = formattedEffect.replace(\"(11 1/9%)\", \"(11%)\");\r\n                break;\r\n            case 'mental-herb':\r\n                formattedEffect = formattedEffect.replace(\"infatuation. Gen V: Also removes\", \"Infatuation,\");\r\n                break;\r\n            case 'light-clay':\r\n                formattedEffect = formattedEffect.replace(\" and Reflect\", \", Reflect and Aurora Veil\");\r\n                break;\r\n            case 'cell-battery':\r\n            case 'absorb-bulb':\r\n            case 'snowball':\r\n            case 'eject-button':\r\n                formattedEffect = formattedEffect.concat(\" Consumed after use.\");\r\n                break;\r\n            default:\r\n                break;\r\n        }        \r\n        // Adjust group items.\r\n        if(item.name.split(\"-\").includes('plate'))\r\n            formattedEffect = formattedEffect.replace(\"Arceus's and\", \"Arceus with multitype and\");\r\n        if(item.name.split(\"-\").includes('memory'))\r\n            formattedEffect = formattedEffect.replace(\"Silvally to\", \"Silvally with RKS System to\");\r\n        if(item.name.split(\"-\").includes('drive'))\r\n            formattedEffect = formattedEffect.replace(\" Techno Blast\", \"\").replace(\"Grants Genesect\", \"Changes the holder's Techno Blast\").replace(\"a yellow,\", \"to\");\r\n        return formattedEffect;\r\n    }\r\n\r\n    return (\r\n        <div className=\"animate-enter flex flex-col justify-start items-end\">\r\n            {/* <div className=\"flex w-full justify-start items-center\">\r\n                <p className=\"text-base\">{!selected ? 'No ' : ''}Pokemon Assigned</p>\r\n            </div> */}\r\n            <div className={`flex flex-col gap-2 justify-start items-center rounded-md p-2 w-96 h-auto border-2 border-gray-200 transition duration-150 ease-in-out  \r\n                ${selected ? 'border-green-200 ring ring-green-100' : ''}`}>            \r\n                <SelectedPokemon assignable={{item: index}} />\r\n                <div className={`flex flex-col gap-2 justify-start items-center bg-white rounded-md p-2 w-full h-auto border-2 border-gray-200 transition duration-150 ease-in-out \r\n                    ${selected ? 'bg-green-100 border-green-200 ring ring-green-100' : ''}`}>                    \r\n                    <div className=\"flex justify-center items-center w-full gap-2\">\r\n                        <img src={item.sprites.default} alt=\"\" width=\"30px\" height=\"30px\"/>\r\n                        <p className=\"capitalize\">{item.name.replace(/-/g, \" \")}</p>                \r\n                    </div>            \r\n                    <div className=\"flex flex-col justify-start items-center text-sm w-full\">\r\n                        {getEffects()}\r\n                    </div>            \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { TeamBuilderContext } from '../../context/TeamBuilderContext';\r\nimport Item from './Item';\r\n\r\nexport default function ItemOptions({options}) {\r\n    const context = React.useContext(TeamBuilderContext);\r\n\r\n    const setOptions = () => {\r\n        if (options.length) {\r\n            return (\r\n                options.map((it, i) => (\r\n                    <Item key={i} index={i} item={it} />\r\n                ))                \r\n            );\r\n        } else {\r\n            return (                \r\n                <div className=\"p-4 text-gray-300\">\r\n                    Empty\r\n                </div>            \r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div id=\"items\" className=\"flex flex-col w-full\">\r\n            <div className=\"flex justify-between items-center gap-4 text-center\">\r\n                <span className=\"flex gap-4 items-center\">\r\n                    <p className=\"text-lg\">Item Options</p>\r\n                    <p className=\"text-base text-gray-300\">Assign your selected pokemons to an item.</p>\r\n                </span>\r\n                <span className=\"flex gap-4 items-center\">\r\n                    <p className=\"text-lg\">{context.selectionsMade.items}/{context.selectionsNeeded.items} Pokemons Assigned</p>                    \r\n                </span>\r\n            </div>            \r\n            <div className={`flex flex-wrap justify-center items-start gap-4 p-4 w-full border-2 rounded-md border-gray-200 transition duration-150 ease-in-out\r\n                ${context.selectionsMade.items >= context.selectionsNeeded.items ? 'border-green-200 ring ring-green-100' : ''}`}>\r\n                {setOptions()}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport PokemonOptions from '../components/pokemon/PokemonOptions';\r\nimport MovesetOptions from '../components/moves/MovesetOptions';\r\nimport AbilityOptions from '../components/abilities/AbilityOptions';\r\nimport ItemOptions from '../components/items/ItemOptions';\r\nimport { BiLoaderAlt, /* BiExport */ } from 'react-icons/bi';\r\n\r\nexport default function TeamBuilder({\r\n    loading, randomRolls, pokemonOptions, movesetOptions, abilityOptions, itemOptions, generating, generateOptions, clearChoices, exportTeam\r\n    }) {   \r\n\r\n    const getControls = () => {\r\n        if(loading || generating){\r\n            return (                \r\n                <p className=\"flex gap-4 items-center justify-center text-lg p-4 border-2 border-transparent\">\r\n                    <BiLoaderAlt className=\"animate-spin text-2xl\" />\r\n                    {loading ? 'Fetching data from PokeAPI' : (generating ? generationProgress() : 'Generate Options')}\r\n                </p>                \r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <>\r\n                    <button type=\"button\" onClick={() => clearChoices()}\r\n                        className=\"animate-enter flex items-center justify-center p-4 rounded-md bg-white hover:bg-gray-200 border-2 border-gray-200 w-48 transition duration-150 ease-in-out\">\r\n                        Clear Choices\r\n                    </button>\r\n                    <button type=\"button\" onClick={() => generateOptions()}\r\n                        className=\"animate-enter flex items-center justify-center p-4 rounded-md bg-white border-2 border-gray-200 w-48 hover:bg-gray-200 transition duration-150 ease-in-out\">\r\n                        Generate Options\r\n                    </button>\r\n                    <button type=\"button\" onClick={() => exportTeam()}\r\n                        className=\"animate-enter relative flex items-center justify-center p-4 rounded-md bg-white hover:bg-gray-200 border-2 border-gray-200 w-48 transition duration-150 ease-in-out\">\r\n                        Export Team\r\n                        {/* <div className=\"absolute right-2 rounded-full bg-green-100 p-1 text-2xl\"><BiExport className=\"text-green-300\" /></div> */}\r\n                    </button>\r\n                </>\r\n            )\r\n        }        \r\n    }\r\n    \r\n    const generationProgress = () => {\r\n        if(pokemonOptions.length < randomRolls.pokemons)\r\n            return `Generating Pokemons (${pokemonOptions.length}/${randomRolls.pokemons})`;   \r\n        else if(movesetOptions.length < randomRolls.movesets)\r\n            return `Generating Movesets (${movesetOptions.length}/${randomRolls.movesets})`;\r\n        else if(abilityOptions.length < randomRolls.abilities)\r\n            return `Generating Abilities (${abilityOptions.length}/${randomRolls.abilities})`;\r\n        else if(itemOptions.length < randomRolls.items)\r\n            return `Generating Items (${itemOptions.length}/${randomRolls.items})`;\r\n        else\r\n            return 'Done!';\r\n    }    \r\n\r\n    return (           \r\n        <div className=\"flex flex-col gap-8 justify-start items-center p-8 w-full\">  \r\n            <div id=\"controls\" className=\"flex flex-col w-full\">\r\n                <div className=\"flex justify-start items-center gap-4 text-center\">                    \r\n                    <p className=\"text-lg\">Controls</p>\r\n                    <p className=\"text-base text-gray-300\">Actions for building your team.</p>\r\n                </div>            \r\n                <div className=\"flex flex-col justify-start items-center gap-4 p-4 w-full border-2 rounded-md border-gray-200\">\r\n                    <div className=\"flex flex-wrap justify-center items-center gap-4\">\r\n                        {getControls()}\r\n                    </div>                                                                       \r\n                </div>                                                            \r\n            </div>\r\n            <PokemonOptions options={pokemonOptions} />\r\n            <MovesetOptions options={movesetOptions} />  \r\n            <AbilityOptions options={abilityOptions} />   \r\n            <ItemOptions options={itemOptions} />        \r\n\r\n        </div>                    \r\n    )\r\n}","import React from 'react'\r\n\r\nexport default function About() {\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React, {useState, useEffect, useCallback} from 'react';\r\nimport axios from 'axios';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport toast, { Toaster } from 'react-hot-toast';\r\nimport { TeamBuilderContext } from './context/TeamBuilderContext';\r\nimport Navbar from './components/Navbar';\r\nimport Home from './containers/Home';\r\nimport TeamBuilder from './containers/TeamBuilder';\r\nimport About from './containers/About';\r\n\r\nexport default function App() {\r\n  // ----- CONSTANTS -----\r\n  // API\r\n  const apiUrl = 'https://pokeapi.co/api/v2/';\r\n  const pokemonCount = 898;\r\n  const moveCount = 826;\r\n  const abilityCount = 267;\r\n  const itemCount = [115, 4, 9, 9, 23];\r\n  const itemOffset = [189, 562, 581, 678, 844];\r\n  const typeCount = 18; \r\n\r\n  // ----- STATE -----\r\n  // API\r\n  const [loading, setLoading] = useState(true);  \r\n  const [pokemonList, setPokemonList] = useState([]);\r\n  const [moveList, setMoveList] = useState([]);\r\n  const [abilityList, setAbilityList] = useState([]);  \r\n  const [itemList, setItemList] = useState([]);  \r\n  const [typeList, setTypeList] = useState([]);  \r\n\r\n  // Options.\r\n  const [generating, setGenerating] = useState(false);\r\n  const [generationStep, setGenerationStep] = useState(0);\r\n  const [randomRolls] = useState({\r\n    pokemons: 9,\r\n    movesets: 6,\r\n    moves: 6,\r\n    abilities: 9,\r\n    items: 9\r\n  });\r\n  const [pokemonOptions, setPokemonOptions] = useState([]);\r\n  const [movesetOptions, setMovesetOptions] = useState([]);\r\n  const [abilityOptions, setAbilityOptions] = useState([]);\r\n  const [itemOptions, setItemOptions] = useState([]);\r\n  const [optionsData, setOptionsData] = useState({\r\n    movesetsPerType: [],\r\n    usableTypes: [],\r\n    reverseOptions: []\r\n  });    \r\n\r\n  // Filters.  \r\n  const [pokemonFilter] = useState([ // Exclude pokemons with this keywords.\r\n    // Legendary forms above 720 total stats.\r\n    'eternamax', 'primal', 'ultra',\r\n    // General forms as strong as legendaries.\r\n    'mega', 'gmax', 'eternal', 'ash',\r\n    // Pokemons and forms below 360 total stats.\r\n    'solo', 'shedinja', 'smeargle', 'ditto', 'delibird', 'luvdisc', 'unown',\r\n    // Others.\r\n    'totem', 'bond'\r\n  ]);\r\n  const [moveFilter] = useState ([ // Exclude moves with this keywords.\r\n    // General max and z moves.\r\n    'max', 'physical', 'special',\r\n    // Specific z moves.\r\n    'catastropika', 'moonsault', 'raid', '000', 'sparksurfer', 'evoboost', 'pancake', 'genesis', 'operetta', 'stormshards',\r\n    'forever', 'soulblaze', 'guardian', 'sunraze', 'moonraze', 'burns', 'stealing',\r\n    // Unusable in format.\r\n    'natural', 'stuff', 'teatime', \r\n    // No effect.\r\n    'splash', 'celebrate', 'hands', 'struggle',    \r\n    // BRANCH LOGIC. All accounted for.\r\n    // Combo moves.\r\n    //'stockpile', 'swallow', 'spit',     \r\n    // Held items.\r\n    //'techno', 'judgement',\r\n    // Specific pokemons.\r\n    //'hyperspace'\r\n    // REVERSE BRANCH LOGIC. All accounted for.\r\n    // Need lost or consumed held items to work.\r\n    //'recycle',  \r\n  ]);\r\n  const [moveAllow] = useState([ // Include moves with this keywords even when excluded by filter.\r\n    'bug', \r\n  ]);\r\n  const [moveStatusLimit] = useState(3); // Max number of status moves in a moveset.\r\n  const [abilityFilter] = useState([ // Exclude abilities with this keywords.\r\n    // Unusable in format.\r\n    'illuminate', 'run', 'plus', 'minus', 'gluttony', 'honey', 'unnerve', 'healer', 'friend', 'harvest',\r\n    'telepathy', 'star', 'cheek', 'battery', 'receiver', 'alchemy', 'ball', 'ripen', 'spot',\r\n    'medicine', 'one', 'symbiosis',\r\n    // Pokemon forms specific.\r\n    'zen', 'stance', 'shields', 'schooling', 'bond', 'construct', 'face', 'hunger', 'gulp', \r\n    // Harmful to owner.\r\n    'truant', 'stall', 'klutz', 'slow', 'defeatist', \r\n    // Unusable in tournaments.\r\n    'anticipation', 'forewarn', 'frisk',     \r\n    // BRANCH LOGIC. All accounted for.\r\n    // Move mechanic. \r\n    // 'iron-fist', 'skill-link', 'reckless', 'strong-jaw', 'mega-launcher', 'liquid-voice', 'punk-rock', 'triage',\r\n    // 'tough-claws', 'unseen-fist',    \r\n    // Move type.\r\n    // 'flash-fire', 'overgrow', 'blaze', 'torrent', 'swarm', 'scrappy', 'sand-force', 'gale-wings', \r\n    // 'dark-aura', 'fairy-aura', 'steelworker', 'transistor', 'dragons-maw',\r\n    // Move type changes.\r\n    // 'normalize', 'refrigerate', 'pixilate', 'galvanize', 'aerilate',\r\n    // Specific pokemons.\r\n    //'multitype', 'rks',\r\n    // REVERSE BRANCH LOGIC. All accounted for.\r\n    // Need lost or consumed held items to work.\r\n    // 'pickup', 'unburden', 'pickpocket', 'magician',\r\n  ]);  \r\n  const [abilityAllow] = useState([ // Include abilities with this keywords even when excluded by filter.\r\n    'parental', \r\n  ]);\r\n  const [itemFilter] = useState([ // Exclude items with this keywords.\r\n    // Unusable in format.\r\n    'power', 'scarf', 'ball', 'macho', 'exp', 'soothe', 'coin', 'cleanse', 'egg', 'luck',\r\n    'pure', 'ability', \r\n    // Evolution related or filtered pokemon specific.    \r\n    'deep', 'scale', 'powder', 'everstone', 'grade', 'punch', 'protector', 'disc', 'magmarizer', 'electirizer', \r\n    'reaper', 'whipped', 'sachet', \r\n    // Harmful to user.\r\n    'full', 'lagging', 'sticky', 'target',\r\n    // BRANCH LOGIC. All accounted for.\r\n    // Pokemon specific.\r\n    // 'dew', 'thick', 'stick'\r\n    // Move or ability mechanic.\r\n    //'heat', 'smooth', 'icy', 'damp', 'sludge', 'clay', 'orb', \r\n  ]);\r\n  const [itemAllow] = useState([ // Include items with this keywords even when excluded by filter.    \r\n    'herb', 'choice', 'bright', 'silver', 'silk'\r\n  ]);\r\n\r\n  // Usability.  \r\n  // Moves.\r\n  const [chargeMoves] = useState([ // Power herb.\r\n    'bounce', 'dig', 'dive', 'fly', 'freeze-shock', 'geomancy', 'ice-burn', 'meteor-beam', 'phantom-force', 'razor-wind',\r\n    'shadow-force', 'skull-bash', 'sky-attack', 'solar-beam', 'solar-blade'\r\n  ]);\r\n  const [bindMoves] = useState([ // Grip claw, binding band.\r\n    'bind', 'clamp', 'fire-spin', 'infestation', 'magma-storm', 'sand-tomb', 'snap-trap', 'thunder-cage', 'whirlpool', 'wrap'\r\n  ]);\r\n  const [drainMoves] = useState([ // Big root.\r\n    'absorb', 'bouncy-bubble', 'drain-punch', 'draining-kiss', 'dream-eater', 'giga-drain', 'horn-leech', 'leech-life', 'leech-seed',\r\n    'mega-drain', 'oblivion-wing', 'parabolic-charge', 'strength-sap', 'ingrain', 'aqua-ring'\r\n  ]);\r\n  const [terrainMoves] = useState([ // Terrain extender.\r\n    'electric-terrain', 'grassy-terrain', 'misty-terrain', 'psychic-terrain'\r\n  ]);\r\n  const [barrierMoves] = useState([ // Light clay.\r\n    'light-screen', 'reflect', 'aurora-veil'\r\n  ]);  \r\n  const [orbMoves] = useState([ // Toxic and flame orb.\r\n    'facade', 'psycho-shift', 'switcheroo', 'trick', 'fling', 'bestow'\r\n  ]);\r\n  const [punchMoves] = useState([ // Iron fist.\r\n    'bullet-punch', 'comet-punch', 'dizzy-punch', 'double-iron-bash', 'drain-punch', 'dynamic-punch', 'fire-punch', 'focus-punch',\r\n    'hammer-arm', 'ice-hammer', 'ice-punch', 'mach-punch', 'mega-punch', 'meteor-mash', 'plasma-fists', 'power-up-punch',\r\n    'shadow-punch', 'sky-uppercut', 'thunder-punch'\r\n  ]);\r\n  const [multistrikeMoves] = useState([ // Skill link.\r\n    'arm-thrust', 'barrage', 'bone-rush', 'bullet-seed', 'comet-punch', 'double-slap', 'fury-attack', 'fury-swipes', 'icicle-spear',\r\n    'pin-missile', 'rock-blast', 'scale-shot', 'spike-cannon', 'tail-slap', 'triple-axel', 'triple-kick', 'water-shuriken'\r\n  ]);\r\n  const [recoilMoves] = useState([ // Reckless.\r\n    'brave-bird', 'double-edge', 'flare-blitz', 'head-charge', 'head-smash', 'high-jump-kick', 'jump-kick', 'submission', 'take-down',\r\n    'wild-charge', 'light-of-ruin', 'volt-tackle', 'wood-hammer'\r\n  ]);\r\n  const [biteMoves] = useState([ // Strong jaw.\r\n    'bite', 'crunch', 'fire-fang', 'fishious-rend', 'hyper-fang', 'ice-fang', 'jaw-lock', 'poison-fang', 'psychic-fangs', 'thunder-fang'\r\n  ]);\r\n  const [pulseMoves] = useState([ // Mega launcher.\r\n    'aura-sphere', 'dark-pulse', 'dragon-pulse', 'heal-pulse', 'origin-pulse', 'terrain-pulse', 'water-pulse'\r\n  ]);\r\n  const [soundMoves] = useState([ // Liquid voice.\r\n    'boomburst', 'bug-buzz', 'chatter', 'clanging-scales', 'disarming-voice', 'echoed-voice', 'eerie-spell', 'hyper-voice',\r\n    'overdrive', 'relic-song', 'round', 'snarl', 'snore', 'uproar'\r\n  ]);\r\n  const [healMoves] = useState([ // Triage.\r\n    'draining-kiss', 'floral-healing', 'giga-drain', 'rest', 'synthesis', 'absorb', 'drain-punch', 'dream-eater', 'heal-order',\r\n    'heal-pulse', 'healing-wish', 'horn-leech', 'leech-life', 'lunar-dance', 'mega-drain', 'milk-drink', 'moonlight', 'morning-sun',\r\n    'oblivion-wing', 'parabolic-charge', 'purify', 'recover', 'roost', 'shore-up', 'slack-off', 'soft-boiled', 'strength-sap',\r\n    'swallow', 'wish'\r\n  ]);\r\n  const [contactMoves] = useState([ // Tough claws, unseen fist.\r\n    'accelerock', 'acrobatics', 'aerial-ace', 'anchor-shot', 'aqua-jet', 'aqua-tail', 'arm-thrust', 'assurance', 'astonish', 'avalanche', \r\n    'behemoth-bash', 'behemoth-blade', 'bide', 'bind', 'bite', 'blaze-kick', 'body-press', 'body-slam', 'bolt-beak', 'bolt-strike', 'bounce', 'branch-poke', 'brave-bird', 'breaking-swipe', 'brick-break', 'brutal-swing', 'bug-bite', 'bullet-punch',\r\n    'chip-away', 'circle-throw', 'clamp', 'close-combat', 'comet-punch', 'constrict', 'counter', 'covet', 'crabhammer', 'cross-chop', 'cross-poison', 'crunch', 'crush-claw', 'crush-grip', 'cut',\r\n    'darkest-lariat', 'dig', 'dive', 'dizzy-punch', 'double-edge', 'double-hit', 'double-iron-bash', 'double-kick', 'double-slap', 'dragon-ascent', 'dragon-claw', 'dragon-hammer', 'dragon-rush', 'dragon-tail', 'draining-kiss', 'drain-punch', 'drill-peck', 'drill-run', 'dual-chop', 'dual-wingbeat', 'dynamic-punch',\r\n    'endeavor', 'extreme-speed',\r\n    'facade', 'fake-out', 'false-surrender', 'false-swipe', 'feint-attack', 'fell-stinger', 'fire-fang', 'fire-lash', 'fire-punch', 'first-impression', 'fishious-rend', 'flail', 'flame-charge', 'flame-wheel', 'flare-blitz', 'flip-turn', 'floaty-fall', 'fly', 'flying-press', 'focus-punch', 'force-palm', 'foul-play', 'frustration', 'fury-attack', 'fury-cutter', 'fury-swipes',\r\n    'gear-grind', 'giga-impact', 'grass-knot', 'grassy-glide', 'guillotine', 'gyro-ball',\r\n    'hammer-arm', 'headbutt', 'head-charge', 'head-smash', 'heart-stamp', 'heat-crash', 'heavy-slam', 'high-horsepower', 'high-jump-kick', 'hold-back', 'horn-attack', 'horn-drill', 'horn-leech', 'hyper-fang',\r\n    'ice-ball', 'ice-fang', 'ice-hammer', 'ice-punch', 'infestation', 'iron-head', 'iron-tail',\r\n    'jaw-lock', 'jump-kick', \r\n    'karate-chop', 'knock-off', \r\n    'lash-out', 'last-resort', 'leaf-blade', 'leech-life', 'lick', 'liquidation', 'low-kick', 'low-sweep', 'lunge',\r\n    'mach-punch', 'megahorn', 'mega-kick', 'mega-punch', 'metal-claw', 'meteor-mash', 'multi-attack', \r\n    'needle-arm', 'night-slash', 'nuzzle', \r\n    'outrage', \r\n    'payback', 'peck', 'petal-dance', 'phantom-force', 'plasma-fists', 'play-rough', 'pluck', 'poison-fang', 'poison-jab', 'poison-tail', 'pound', 'power-trip', 'power-up-punch', 'power-whip', 'psychic-fangs', 'punishment', 'pursuit', \r\n    'quick-attack', \r\n    'rage', 'rapid-spin', 'razor-shell', 'retaliate', 'return', 'revenge', 'reversal', 'rock-climb', 'rock-smash', 'rolling-kick', 'rollout', \r\n    'sacred-sword', 'scratch', 'seismic-toss', 'shadow-claw', 'shadow-force', 'shadow-punch', 'shadow-sneak', 'shadow-strike', 'sizzly-slide', 'skitter-smack', 'skull-bash', 'sky-drop', 'sky-uppercut', 'slam', 'slash', 'smart-strike', 'smelling-salts', 'snap-trap', 'solar-blade', 'spark', 'spectral-thief', 'spirit-break', 'steamroller', 'steel-roller', 'steel-wing', 'stomp', 'stomping-tantrum', 'storm-throw', 'strength', 'struggle', 'submission', 'sucker-punch', 'sunsteel-strike', 'super-fang', 'superpower', 'surging-strikes', \r\n    'tackle', 'tail-slap', 'take-down', 'thief', 'thrash', 'throat-chop', 'thunder-fang', 'thunderous-kick', 'thunder-punch', 'triple-axel', 'triple-kick', 'trop-kick', 'trump-card', \r\n    'u-turn', \r\n    'v-create',\r\n    'veevee-volley', 'vine-whip', 'vise-grip', 'vital-throw', 'volt-tackle',\r\n    'wake-up-slap', 'waterfall', 'wicked-blow', 'wild-charge', 'wing-attack', 'wood-hammer', 'wrap', 'wring-out', \r\n    'x-scissor',\r\n    'zen-headbutt', 'zing-zap', 'zippy-zap'\r\n  ]);\r\n  const [consumableItemMoves] = useState([ // Consumable items. Reverse branch logic trigger.\r\n    'recycle'\r\n  ]);\r\n  // Abilities.\r\n  const [terrainAbilities] = useState([ // Terrain extender.\r\n    'electric-surge', 'grassy-surge', 'misty-surge', 'psychic-surge'\r\n  ]);\r\n  const [orbAbilities] = useState([ // Toxic and flame orb.\r\n    'guts', 'magic-guard', 'quick-feet', 'marvel-scale'\r\n  ]);\r\n  const [consumableItemAbilities] = useState([ // Consumable items. Reverse branch logic trigger.\r\n    'pickup', 'unburden', 'pickpocket', 'magician'\r\n  ]);\r\n  // Items.\r\n  const [consumableItems] = useState([ // Consumable items. Reverse branch logic.\r\n    'absorb-bulb', 'air-balloon', 'cell-battery', 'eject-button' ,'electric-seed', 'focus-sash', 'grassy-seed',\r\n    'luminous-moss', 'mental-herb', 'misty-seed', 'power-herb', 'psychic-seed', 'red-card', 'white-herb', 'snowball', 'weakness-policy',\r\n  ]);  \r\n  const [plateItems] = useState([ // Plate items. Reverse branch logic.\r\n    'draco-plate', 'dread-plate', 'earth-plate', 'fist-plate', 'flame-plate', 'icicle-plate', 'insect-plate', 'iron-plate',\r\n    'meadow-plate', 'mind-plate', 'pixie-plate', 'sky-plate', 'splash-plate', 'spooky-plate', 'stone-plate', 'toxic-plate', 'zap-plate'\r\n  ]);  \r\n  const [memoryItems] = useState([ // Memory items. Reverse branch logic.\r\n    'bug-memory', 'dark-memory', 'dragon-memory', 'electric-memory', 'fairy-memory', 'fighting-memory', 'fire-memory', 'flying-memory',\r\n    'ghost-memory', 'grass-memory', 'ground-memory', 'ice-memory', 'poison-memory', 'psychic-memory', 'rock-memory', 'steel-memory', 'water-memory'\r\n  ]);\r\n\r\n  // Selections.\r\n  const [selectionsNeeded] = useState({\r\n    pokemons: 6,    \r\n    movesets: 6,\r\n    moves: 4,\r\n    abilities: 6,\r\n    items: 6\r\n  });\r\n  const [selectionsMade, setSelectionsMade] = useState({\r\n    pokemons: 0,\r\n    movesets: 0,\r\n    moves: [0, 0, 0, 0, 0, 0],\r\n    abilities: 0,\r\n    items: 0\r\n  });\r\n  const [sectionsCompleted, setSectionsCompleted] = useState({\r\n    pokemons: false,\r\n    movesets: false,\r\n    moves: false,\r\n    abilities: false,\r\n    items: false\r\n  });  \r\n\r\n  // ----- GENERATION -----\r\n  // Fetch lists from api on mount.\r\n  useEffect (() => {\r\n    let cancel = false;\r\n    setLoading(true);  \r\n\r\n    async function fetchData() {      \r\n      const pokemonResults = await axios.get(`${apiUrl}pokemon?limit=${pokemonCount}`);\r\n      const moveResults = await axios.get(`${apiUrl}move?limit=${moveCount}`);\r\n      const abilityResults = await axios.get(`${apiUrl}ability?limit=${abilityCount}`);\r\n      let itemResults = [];\r\n      for(let i = 0; i < itemCount.length; i++){\r\n        itemResults.push(await (await axios.get(`${apiUrl}item?limit=${itemCount[i]}&offset=${itemOffset[i]}`)).data.results);\r\n      };      \r\n      itemResults = [].concat.apply([], itemResults);\r\n      const typeResults = await axios.get(`${apiUrl}type?limit=${typeCount}`);\r\n      if(!cancel) {\r\n        setPokemonList(pokemonResults.data.results);\r\n        setMoveList(moveResults.data.results);\r\n        setAbilityList(abilityResults.data.results);\r\n        setItemList(itemResults);\r\n        setTypeList(typeResults.data.results);\r\n        setLoading(false);              \r\n      }\r\n    };\r\n    fetchData();\r\n    \r\n    return () => cancel = true;\r\n    // Disable dependency warning, itemCount and itemOffset will never change.\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps    \r\n  }, []);\r\n\r\n  function generateOptions() {        \r\n    setPokemonOptions([]);\r\n    setMovesetOptions([]); \r\n    setAbilityOptions([]);\r\n    setItemOptions([]);\r\n    setOptionsData({\r\n      movesetsPerType: [],\r\n      usableTypes: [],\r\n      reverseOptions: []\r\n    });\r\n    setGenerationStep(0);\r\n    setGenerating(true);    \r\n  }\r\n\r\n  useEffect(() => {\r\n    let cancel = false;\r\n\r\n    // Get a new set of pokemon options.\r\n    async function getPokemonOptions() {\r\n      let pokemons = [];                           \r\n      let shinyIndex = Math.round((Math.random()*100 / 12.5));\r\n\r\n      for (let index = 0; index < randomRolls.pokemons; index++) {\r\n        const pokemon = await getNewPokemon(pokemons, index);\r\n        const species = await axios.get(pokemon.species.url);\r\n        pokemon.gender_rate = species.data.gender_rate;\r\n        pokemon.is_mythical = species.data.is_mythical;\r\n        pokemon.is_legendary = species.data.is_legendary;        \r\n        pokemon.stats.push({name: 'total', base_stat: getTotalStats(pokemon.stats)});\r\n        pokemon.shiny = (index === shinyIndex);\r\n        pokemon.selected = false;\r\n        pokemon.moveset = null;\r\n        pokemon.ability = null;\r\n        pokemon.item = null;\r\n\r\n        pokemons.push(pokemon);\r\n        if(!cancel)\r\n          setPokemonOptions([...pokemons]); \r\n      }\r\n      if(!cancel)\r\n        setGenerationStep(1);\r\n    }\r\n\r\n    // Get a new single pokemon option.\r\n    async function getNewPokemon(currentPokemons) {    \r\n      let newPokemon = '';\r\n      let finalPokemon = '';\r\n  \r\n      do {          \r\n          let pokemon = pokemonList[Math.floor(Math.random()*pokemonList.length)];\r\n          //console.log('initial: '+pokemon.name);\r\n\r\n          const initialPokemon = await axios.get(`${apiUrl}pokemon/${pokemon.name}`);\r\n          const species = await axios.get(initialPokemon.data.species.url);\r\n          const evolutions = await axios.get(species.data.evolution_chain.url);\r\n          \r\n          // Get an array of evolutions.\r\n          let evoChain = [];\r\n          let evoData = evolutions.data.chain;\r\n          do {                        \r\n              // Current.\r\n              evoChain.push(evoData.species.name);            \r\n              let numberOfEvolutions = evoData['evolves_to'].length;  \r\n                                    \r\n              // Branching evolutions.\r\n              if(numberOfEvolutions > 1) {\r\n                let nextSpecies = [];\r\n                let lastSpecies = [];\r\n                for (let i = 0; i < numberOfEvolutions; i++) {                  \r\n                  nextSpecies.push(evoData.evolves_to[i].species.name);\r\n                  \r\n                  // Branch continuation.\r\n                  if(evoData.evolves_to[i].hasOwnProperty('evolves_to') && evoData.evolves_to[i].evolves_to.length > 0)\r\n                    lastSpecies.push(evoData.evolves_to[i].evolves_to[0].species.name);\r\n                }\r\n                evoChain.push(nextSpecies);\r\n  \r\n                if(lastSpecies.length > 0)\r\n                evoChain.push(lastSpecies);\r\n                \r\n                // Stop the chain, all branching evolutions are symmetrical.\r\n                evoData = null;\r\n              }\r\n              else {                \r\n                // Evolution.\r\n                evoData = evoData['evolves_to'][0];\r\n              }\r\n                        \r\n          } while (!!evoData && evoData.hasOwnProperty('evolves_to')); \r\n          //console.log('evolutions: '+evoChain);       \r\n          \r\n          // Get the/a final evolution.\r\n          let finalEvolution = evoChain[evoChain.length - 1];\r\n          if(Array.isArray(finalEvolution)){\r\n            finalEvolution = finalEvolution[Math.floor(Math.random()*finalEvolution.length)];        \r\n          }\r\n          //console.log('final evolution: '+finalEvolution);\r\n  \r\n          // Get the varieties for the final evolution.\r\n          const finalSpecies = await axios.get(`${apiUrl}pokemon-species/${finalEvolution}`);\r\n          let varieties = [];\r\n          finalSpecies.data.varieties.forEach((v, i) => {\r\n            varieties.push(finalSpecies.data.varieties[i].pokemon.name)\r\n          });                \r\n          //console.log('final evolution varieties: '+varieties);\r\n  \r\n          // Filter varieties for more balance.\r\n          varieties = varieties.filter(v => {          \r\n            return !v.split('-').some(keyword => pokemonFilter.includes(keyword))\r\n          });\r\n          //console.log('filtered varieties: '+varieties);        \r\n  \r\n          // Get the final pokemon from the varieties.\r\n          finalPokemon = varieties[Math.floor(Math.random()*varieties.length)];\r\n          //console.log('final pokemon: '+finalPokemon);\r\n  \r\n      } while (!finalPokemon || checkDuplicatedName(currentPokemons, finalPokemon))   \r\n      //console.log(finalPokemon); \r\n      newPokemon = await axios.get(`${apiUrl}pokemon/${finalPokemon}`);\r\n      return newPokemon.data\r\n    };\r\n\r\n    if(generating && generationStep === 0 && pokemonList.length > 0){      \r\n      getPokemonOptions();      \r\n    }\r\n    return () => cancel = true;\r\n  }, [generating, generationStep, pokemonList, randomRolls, pokemonFilter])\r\n\r\n  // Helper function for usability checks.\r\n  const getPokemonUsability = useCallback((pokemons) => {    \r\n    return pokemonOptions.find(p => pokemons.includes(p.name));\r\n  }, [pokemonOptions])\r\n\r\n  useEffect(() => {\r\n    let cancel = false;\r\n\r\n    // Get a set of moveset options.  \r\n    async function getMovesetOptions() {              \r\n      let movesets = [];            \r\n\r\n      for (let index = 0; index < randomRolls.movesets; index++) {\r\n        const moveset = await getNewMoveset()\r\n        movesets.push(moveset);\r\n        if(!cancel)\r\n          setMovesetOptions([...movesets]); \r\n      }  \r\n      if(!cancel)\r\n        setGenerationStep(2);\r\n    }       \r\n\r\n    // Get a new moveset option.\r\n    async function getNewMoveset() {    \r\n      let newMoveset = [];\r\n      let move = '';\r\n      let status = false;\r\n      let statusMoves = 0;  \r\n      let usable = true;  \r\n      let combo = '';\r\n      \r\n      for (let index = 0; index < randomRolls.moves; index++) {            \r\n        do{        \r\n          if(combo){\r\n            move = {name: combo};\r\n            combo = '';\r\n          }\r\n          else\r\n            move = moveList[Math.floor(Math.random()*moveList.length)];\r\n          move = await axios.get(`${apiUrl}move/${move.name}`);\r\n          status = move.data.damage_class && move.data.damage_class.name === 'status'; \r\n          usable = true;       \r\n\r\n          switch(move.data.name){            \r\n            case 'swallow':\r\n            case 'spit-up':\r\n              // Check space for combo moves.\r\n              if(!newMoveset.find(m => m.name === 'stockpile')){\r\n                usable = (randomRolls.moves - newMoveset.length) >= 2;\r\n                if(usable){\r\n                  if(move.data.name === 'swallow' && (moveStatusLimit - statusMoves) >= 2)\r\n                    combo = 'stockpile';\r\n                  else if(move.data.name === 'spit-up' && (moveStatusLimit - statusMoves) >= 1)\r\n                    combo = 'stockpile';\r\n                  else if((moveStatusLimit - statusMoves) <= 0)\r\n                    usable = false;\r\n                }                                  \r\n              }                          \r\n              //console.log(move.data.name+\": \"+usable);\r\n              break;              \r\n            case 'stockpile':\r\n              // Check space for combo moves.\r\n              if(!newMoveset.find(m => m.name === 'swallow') && !newMoveset.find(m => m.name === 'spit-up')){\r\n                usable = (randomRolls.moves - newMoveset.length) >= 2;\r\n                if(usable){\r\n                  if((moveStatusLimit - statusMoves) >= 2)\r\n                    combo = Math.random() < 0.5 ? 'swallow' : 'spit-up';\r\n                  else if((moveStatusLimit - statusMoves) >= 1)\r\n                    combo = 'spit-up';\r\n                  else if((moveStatusLimit - statusMoves) <= 0)\r\n                    usable = false;\r\n                }\r\n              }\r\n              //console.log(move.data.name+\": \"+usable);\r\n              break;            \r\n            case 'hyperspace-fury':\r\n              // Check for specific pokemon.\r\n              usable = getPokemonUsability(['hoopa-unbound']);\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n        } while (checkDuplicatedName(newMoveset, move.data.name) || FindKeywords(move.data.name, '-', moveFilter, moveAllow) ||\r\n                (status && statusMoves >= moveStatusLimit) || !usable)\r\n        move.data.selected = false;\r\n        newMoveset.push(move.data);      \r\n        if(status){\r\n          statusMoves = statusMoves + 1;\r\n          status = false;\r\n        }\r\n        //console.log(move.data.name);\r\n        //console.log(statusMoves);\r\n      }\r\n      //console.log('----- done -----');\r\n      return newMoveset;\r\n    }\r\n\r\n    if(generating && generationStep === 1 && moveList.length > 0){      \r\n      getMovesetOptions();\r\n    }\r\n    return () => cancel = true;\r\n  }, [generating, generationStep, moveList, randomRolls, moveFilter, moveAllow, moveStatusLimit,\r\n      getPokemonUsability]);\r\n\r\n  // Respond to moveset options generated completely.\r\n  useEffect (() => {  \r\n    let cancel = false;\r\n\r\n    if(generating && generationStep === 2 && movesetOptions.length >= randomRolls.movesets){\r\n      let msPerType = [];\r\n\r\n      typeList.forEach(type => {\r\n        let msInType = {name: type.name, movesets: 0};\r\n        movesetOptions.forEach(ms => {      \r\n          if(ms.find(m => m.type.name === type.name && m.damage_class.name !== 'status')){\r\n            msInType.movesets += 1;          \r\n          }\r\n        });\r\n        msPerType.push(msInType);        \r\n      });       \r\n      let uTypes = msPerType.filter(t => t.movesets !== 0).map(t => {return t.name});   \r\n\r\n      if(!cancel){\r\n        setOptionsData(s => {return {...s, movesetsPerType: msPerType, usableTypes: uTypes} });      \r\n        setGenerationStep(3);\r\n      }\r\n    }    \r\n    return () => cancel = true;\r\n  }, [generating, generationStep, movesetOptions, randomRolls, typeList]);  \r\n\r\n  // Helper functions for usability checks.\r\n  const getPokemonTypeUsability = useCallback((type) => {\r\n    return pokemonOptions.find(p => p.types.find(t => t.type.name === type));\r\n  }, [pokemonOptions])  \r\n\r\n  const getMovesetTypeUsability = useCallback((types) => {\r\n    //console.log(types);\r\n    let usable = types.find(t => optionsData.usableTypes.includes(t));\r\n    return usable;\r\n  }, [optionsData]);\r\n\r\n  const getTypeFromEffect = useCallback((effect) => {\r\n    return effect.replace(/-/g, \" \").split(\" \").find(keyword => optionsData.usableTypes.includes(keyword));\r\n  }, [optionsData]);\r\n\r\n  const getMovesetTypeUsabilityForItems = useCallback((item, currentItems) => {\r\n    let usable = false;\r\n    let type = getTypeFromEffect(item.effect_entries.find(e => e.language.name === 'en').effect.toLowerCase());\r\n    if(type){  \r\n      // Check current items.          \r\n      let itemsOfType = 0;\r\n      currentItems.forEach(ci => {\r\n        if((ci.category.name === 'type-enhancement' || ci.category.name === 'plates') && \r\n          getTypeFromEffect(ci.effect_entries.find(e => e.language.name === 'en').effect.toLowerCase()) === type)                \r\n        itemsOfType += 1;              \r\n      });    \r\n      usable = optionsData.movesetsPerType.find(mt => mt.name === type && itemsOfType < mt.movesets);\r\n    }\r\n    return usable;\r\n  }, [optionsData, getTypeFromEffect]);\r\n\r\n  const getSpecificOptionsUsabilityForItems = useCallback((moves, abilities, items, currentItems) => {\r\n    let usable = false;            \r\n    let maxOptions = 0;\r\n    let itemsOfType = 0;\r\n\r\n    // Get max options.\r\n    if(moves){      \r\n      movesetOptions.forEach(mo => {\r\n        if(mo.find(m => moves.includes(m.name)))\r\n          maxOptions += 1\r\n      });\r\n    }    \r\n    if(abilities){      \r\n      if(abilityOptions.find(a => abilities.includes(a.name)))\r\n        maxOptions += 1;\r\n    }                    \r\n    // Get current items.  \r\n    if(items){    \r\n      currentItems.forEach(ci => {                \r\n        if(ci.name.split('-').find(keyword => items.includes(keyword)))\r\n          itemsOfType += 1;\r\n      });    \r\n      usable = (itemsOfType < maxOptions);\r\n    }    \r\n    else{\r\n      // Specific case for plates.\r\n      // Get current items.\r\n      currentItems.forEach(ci => {        \r\n        if(ci.category.name === 'plates' &&\r\n          !optionsData.usableTypes.includes(getTypeFromEffect(ci.effect_entries.find(e => e.language.name === 'en').effect.toLowerCase())))\r\n          itemsOfType += 1;        \r\n      });\r\n      usable = (itemsOfType < maxOptions);\r\n    }\r\n\r\n    return usable;\r\n  }, [optionsData, movesetOptions, abilityOptions, getTypeFromEffect]);\r\n\r\n  const getMoveMechanicUsability = useCallback((mechanic, exactMoves) => {\r\n    let moveNames = movesetOptions.map(ms => { return ms.map(m => { return m.name } ) });\r\n    moveNames = [].concat.apply([], moveNames);\r\n    \r\n    if(exactMoves && exactMoves.length > 0){      \r\n      return moveNames.find(name => exactMoves.includes(name));\r\n    }\r\n    else {\r\n      switch(mechanic){\r\n        case 'charge':\r\n          return moveNames.find(name => chargeMoves.includes(name));\r\n        case 'bind':\r\n          return moveNames.find(name => bindMoves.includes(name));\r\n        case 'drain':\r\n          return moveNames.find(name => drainMoves.includes(name));\r\n        case 'terrain':\r\n          return moveNames.find(name => terrainMoves.includes(name));\r\n        case 'barrier':        \r\n          return moveNames.find(name => barrierMoves.includes(name));\r\n        case 'orb':        \r\n          return moveNames.find(name => orbMoves.includes(name));\r\n        case 'punch':        \r\n          return moveNames.find(name => punchMoves.includes(name));\r\n        case 'multistrike':        \r\n          return moveNames.find(name => multistrikeMoves.includes(name));\r\n        case 'recoil':        \r\n          return moveNames.find(name => recoilMoves.includes(name));\r\n        case 'bite':        \r\n          return moveNames.find(name => biteMoves.includes(name));\r\n        case 'pulse':        \r\n          return moveNames.find(name => pulseMoves.includes(name));\r\n        case 'sound':        \r\n          return moveNames.find(name => soundMoves.includes(name));\r\n        case 'heal':        \r\n          return moveNames.find(name => healMoves.includes(name));\r\n        case 'contact':        \r\n          return moveNames.find(name => contactMoves.includes(name));\r\n        default:\r\n          return false;\r\n      }    \r\n    }\r\n  }, [movesetOptions, chargeMoves, bindMoves, drainMoves, terrainMoves, barrierMoves, orbMoves, punchMoves, \r\n      multistrikeMoves, recoilMoves, biteMoves, pulseMoves, soundMoves, healMoves, contactMoves]);\r\n\r\n  const getAbilityMechanicUsability = useCallback((mechanic, exactAbilities) => {\r\n    let abilityNames = abilityOptions.map(a => { return a.name } );\r\n\r\n    if(exactAbilities && exactAbilities.length > 0){     \r\n      return abilityNames.find(name => exactAbilities.includes(name));\r\n    }\r\n    else {\r\n      switch(mechanic){\r\n        case 'terrain':\r\n          return abilityNames.find(name => terrainAbilities.includes(name));      \r\n        case 'orb':\r\n          return abilityNames.find(name => orbAbilities.includes(name));\r\n        default:\r\n          return false;\r\n      }    \r\n    }\r\n  }, [abilityOptions, terrainAbilities, orbAbilities])\r\n\r\n  // Helper funciton for usability checks.\r\n  const getReverseOption = useCallback((index) => {\r\n    if(optionsData.reverseOptions[index])\r\n      return optionsData.reverseOptions[index]\r\n    else\r\n      return null;      \r\n  }, [optionsData])\r\n\r\n  useEffect(() => {\r\n    let cancel = false;\r\n\r\n    // Get a set of ability options.\r\n    async function getAbilityOptions() {      \r\n      let abilities = [];            \r\n\r\n      for (let index = 0; index < randomRolls.abilities; index++) {\r\n        const ability = await getNewAbility(abilities);\r\n        abilities.push(ability);\r\n        if(!cancel)\r\n          setAbilityOptions([...abilities]); \r\n      }                 \r\n      if(!cancel)\r\n        setGenerationStep(4);\r\n    }\r\n\r\n    // Get a new ability option.\r\n    async function getNewAbility(currentAbilities) {    \r\n      let newAbility = ''; \r\n      let usable = true;      \r\n    \r\n      do{        \r\n        let ability = abilityList[Math.floor(Math.random()*abilityList.length)];      \r\n        newAbility = await axios.get(`${apiUrl}ability/${ability.name}`);     \r\n        usable = true;    \r\n                               \r\n        switch(newAbility.data.name){\r\n          case 'iron-fist':\r\n            // Check for punch moves.\r\n            usable = getMoveMechanicUsability('punch');            \r\n            break;                       \r\n          case 'skill-link':\r\n            // Check for multistrike moves.\r\n            usable = getMoveMechanicUsability('multistrike');            \r\n            break;\r\n          case 'reckless':\r\n            // Check for recoil/crash moves.\r\n            usable = getMoveMechanicUsability('recoil');            \r\n            break;\r\n          case 'strong-jaw':\r\n            // Check for bite moves.\r\n            usable = getMoveMechanicUsability('bite');            \r\n            break;\r\n          case 'mega-launcher':\r\n            // Check for pulse/aura moves.\r\n            usable = getMoveMechanicUsability('pulse');            \r\n            break;\r\n          case 'liquid-voice':\r\n            // Check for sound moves.\r\n            usable = getMoveMechanicUsability('sound');\r\n            break;\r\n          case 'punk-rock':\r\n            // Check for sound moves.\r\n            usable = (getMoveMechanicUsability('sound') || getMoveMechanicUsability('', ['sparkling-aria']));\r\n            break;\r\n          case 'triage':\r\n            // Check for heal moves.\r\n            usable = getMoveMechanicUsability('heal');\r\n            break;          \r\n          case 'flash-fire':\r\n          case 'blaze':\r\n            // Check for fire moves.\r\n            usable = getMovesetTypeUsability(['fire']);\r\n            break;\r\n          case 'overgrow':\r\n            // Check for grass moves.\r\n            usable = getMovesetTypeUsability(['grass']);\r\n            break;\r\n          case 'torrent':\r\n            // Check for water moves.\r\n            usable = getMovesetTypeUsability(['water']);\r\n            break;\r\n          case 'swarm':\r\n            // Check for bug moves.\r\n            usable = getMovesetTypeUsability(['bug']);\r\n            break;\r\n          case 'scrappy':\r\n            // Check for normal or fighting moves.\r\n            usable = getMovesetTypeUsability(['normal', 'fighting']);\r\n            break;\r\n          case 'sand-force':\r\n            // Check for rock, ground and steel moves.\r\n            usable = getMovesetTypeUsability(['rock', 'ground', 'steel']);\r\n            break;\r\n          case 'gale-wings':\r\n            // Check for flying moves.\r\n            usable = getMovesetTypeUsability(['flying']);\r\n            break;\r\n          case 'dark-aura':\r\n            // Check for dark moves.\r\n            usable = getMovesetTypeUsability(['dark']);\r\n            break;\r\n          case 'fairy-aura':\r\n            // Check for fairy moves.\r\n            usable = getMovesetTypeUsability(['fairy']);\r\n            break;\r\n          case 'steelworker':\r\n            // Check for steel moves.\r\n            usable = getMovesetTypeUsability(['steel']);\r\n            break;\r\n          case 'transistor':\r\n            // Check for electric moves.\r\n            usable = getMovesetTypeUsability(['electric']);\r\n            break;\r\n          case 'dragons-maw':\r\n            // Check for dragon moves.\r\n            usable = getMovesetTypeUsability(['dragon']);\r\n            break;            \r\n          case 'refrigerate':\r\n          case 'pixilate':\r\n          case 'galvanize':\r\n          case 'aerilate': \r\n            // Check for normal moves.\r\n            usable = getMovesetTypeUsability(['normal']);\r\n            break;\r\n          case 'tough-claws':\r\n          case 'unseen-fist':\r\n            // Check for contact moves.\r\n            usable = getMoveMechanicUsability('contact');\r\n            break; \r\n          case 'multitype':\r\n            // Check for specific pokemon.\r\n            usable = getPokemonUsability(['arceus']);\r\n            break;\r\n          case 'rks-system':\r\n            // Check for specific pokemon.\r\n            usable = getPokemonUsability(['silvally']);\r\n            break;\r\n          default:\r\n            break;\r\n        }                  \r\n      } while (checkDuplicatedName(currentAbilities, newAbility.data.name) || FindKeywords(newAbility.data.name, '-', abilityFilter, abilityAllow) || !usable)\r\n      //console.log(newAbility.data.name);\r\n\r\n      return newAbility.data;\r\n    }\r\n\r\n    if(generating && generationStep === 3 && abilityList.length > 0){      \r\n      getAbilityOptions();\r\n    }\r\n    return () => cancel = true;\r\n  }, [generating, generationStep, abilityList, randomRolls, abilityFilter, abilityAllow, \r\n      getMoveMechanicUsability, getMovesetTypeUsability, getPokemonUsability]);\r\n\r\n  // Respond to ability options generated completely.\r\n  useEffect (() => {  \r\n    let cancel = false;\r\n\r\n    if(generating && generationStep === 4 && abilityOptions.length >= randomRolls.abilities){\r\n\r\n      // Check abilities that change move types.\r\n      let msPerType = optionsData.movesetsPerType;            \r\n      msPerType.forEach(ms => {\r\n        switch(ms.name){\r\n          case 'normal':\r\n            if (abilityOptions.find(a => a.name === 'normalize'))\r\n              ms.movesets += 1;\r\n            break;\r\n          case 'ice':\r\n            if (abilityOptions.find(a => a.name === 'refrigerate'))\r\n              ms.movesets += 1;              \r\n            break;\r\n          case 'fairy':\r\n            if (abilityOptions.find(a => a.name === 'pixilate'))\r\n              ms.movesets += 1;              \r\n            break;\r\n          case 'electric':\r\n            if (abilityOptions.find(a => a.name === 'galvanize'))\r\n              ms.movesets += 1;              \r\n            break;\r\n          case 'flying':\r\n            if (abilityOptions.find(a => a.name === 'aerilate'))\r\n              ms.movesets += 1;              \r\n            break;\r\n          default:          \r\n            break;\r\n        }\r\n      })                                   \r\n      let uTypes = msPerType.filter(t => t.movesets !== 0).map(t => {return t.name});     \r\n\r\n      // Prepare options for possible reverse branch logic.\r\n      let rOptions = []; \r\n      let options =  movesetOptions.map(ms => ms.map(m => {return m.name}));\r\n      options.push(abilityOptions.map(a => {return a.name}));\r\n      options = [].concat.apply([], options);   \r\n\r\n      // Check for reverse branch logic options. \r\n      options.forEach(opt => {\r\n        if(!rOptions.includes('consumable') && [...consumableItemMoves, ...consumableItemAbilities].includes(opt))\r\n          rOptions.push('consumable');\r\n        else if(!rOptions.includes('plate') && opt === 'multitype')\r\n          rOptions.push('plate');\r\n        else if(!rOptions.includes('memory') && opt === 'rks-system')\r\n          rOptions.push('memory');\r\n      });          \r\n\r\n      if(!cancel){\r\n        setOptionsData(s => {return {...s, movesetsPerType: msPerType, usableTypes: uTypes, reverseOptions: rOptions} });     \r\n        setGenerationStep(5);\r\n      }\r\n    }    \r\n    return () => cancel = true;\r\n  }, [generating, generationStep, movesetOptions, abilityOptions, randomRolls, optionsData, \r\n      consumableItemMoves, consumableItemAbilities]);\r\n\r\n  useEffect(() => {\r\n    let cancel = false;\r\n\r\n    // Get a set of item options.\r\n    async function getItemOptions() {          \r\n      let items = [];                  \r\n      for (let index = 0; index < randomRolls.items; index++) {\r\n        let itemType = getReverseOption(index);\r\n        let item = \"\";\r\n        if(itemType)\r\n          item = await getNewItem(items, itemType);\r\n        else\r\n          item = await getNewItem(items);\r\n        items.push(item);\r\n        if(!cancel)\r\n          setItemOptions([...items]); \r\n      }                 \r\n      if(!cancel)\r\n        setGenerationStep(6); \r\n    }\r\n\r\n    // Get a new item option.\r\n    async function getNewItem(currentItems, itemType) {    \r\n      let newItem = '';    \r\n      let usable = true; \r\n            \r\n      do{        \r\n        let item = \"\";\r\n        switch(itemType){\r\n          case 'consumable':\r\n            item = {name: consumableItems[Math.floor(Math.random()*consumableItems.length)]};\r\n            break;\r\n          case 'plate':\r\n            item = {name: plateItems[Math.floor(Math.random()*plateItems.length)]};\r\n            break;\r\n          case 'memory':\r\n            item = {name: memoryItems[Math.floor(Math.random()*memoryItems.length)]};\r\n            break;\r\n          default:\r\n            item = itemList[Math.floor(Math.random()*itemList.length)];      \r\n            break;\r\n        }        \r\n        newItem = await axios.get(`${apiUrl}item/${item.name}`);   \r\n        usable = true;    \r\n                               \r\n        switch(newItem.data.category.name){\r\n          case 'held-items':\r\n            switch(newItem.data.name){\r\n              case 'power-herb': \r\n                // Check for charge moves.               \r\n                usable = getMoveMechanicUsability('charge');                \r\n                break;\r\n              case 'grip-claw':\r\n                // Check for bind moves.\r\n                usable = getMoveMechanicUsability('bind');               \r\n                break;\r\n              case 'binding-band':\r\n                // Check for bind moves.\r\n                usable = getMoveMechanicUsability('bind');\r\n                break;\r\n              case 'big-root':\r\n                // Check for drain moves.\r\n                usable = getMoveMechanicUsability('drain');                \r\n                break;\r\n              case 'terrain-extender':\r\n                // Check for terrain moves or abilities.\r\n                usable = (getMoveMechanicUsability('terrain') || getAbilityMechanicUsability('terrain'));\r\n                break;\r\n              case 'heat-rock':                \r\n                // Check for harsh sunlight weather moves or abilities.\r\n                usable = (getMoveMechanicUsability('', ['sunny-day']) || getAbilityMechanicUsability('', ['drought']));\r\n                break;\r\n              case 'damp-rock':                \r\n                // Check for rain weather moves or abilities.\r\n                usable = (getMoveMechanicUsability('', ['rain-dance']) || getAbilityMechanicUsability('', ['drizzle']));\r\n                break;\r\n              case 'icy-rock':                \r\n                // Check for hail weather moves or abilities.\r\n                usable = (getMoveMechanicUsability('', ['hail']) || getAbilityMechanicUsability('', ['snow-warning']));\r\n                break;\r\n              case 'smooth-rock':                \r\n                // Check for sandstorm weather moves or abilities.\r\n                usable = (getMoveMechanicUsability('', ['sandstorm']) || getAbilityMechanicUsability('', ['sand-stream', 'sand-spit']));\r\n                break;\r\n              case 'black-sludge':                \r\n                // Check for poison pokemons.\r\n                usable = getPokemonTypeUsability('poison');                \r\n                break;\r\n              case 'light-clay':                \r\n                // Check for barrier moves.\r\n                usable = getMoveMechanicUsability('barrier');                \r\n                break;              \r\n              default:\r\n                break;\r\n            }\r\n            break;\r\n          case 'bad-held-items':\r\n            switch(newItem.data.name){\r\n              case 'toxic-orb':                   \r\n                // Check for orb moves or abilities.\r\n                usable = (getMoveMechanicUsability('orb') || getAbilityMechanicUsability('orb') || getAbilityMechanicUsability('', ['poison-heal', 'toxic-boost']));                                          \r\n                break;\r\n              case 'flame-orb':                                               \r\n                // Check for orb moves or abilities.\r\n                usable = (getMoveMechanicUsability('orb') || getAbilityMechanicUsability('orb') || getAbilityMechanicUsability('', ['flare-boost']));                \r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n            break;\r\n          case 'plates':\r\n            // Check for movesets with that type, a specific move or a specific ability.\r\n            usable = (getMovesetTypeUsabilityForItems(newItem.data, currentItems) ||\r\n                      getSpecificOptionsUsabilityForItems(['judgment'], ['multitype'], '', currentItems));\r\n            break;\r\n          case 'memories':                        \r\n            // Check for a specific move or a specific ability.            \r\n            usable = getSpecificOptionsUsabilityForItems(['multi-attack'], ['rks-system'], ['memory'], currentItems);\r\n            break;\r\n          case 'type-enhancement':\r\n            // Check for movesets with that type.\r\n            usable = getMovesetTypeUsabilityForItems(newItem.data, currentItems);\r\n            break;            \r\n          case 'species-specific':\r\n              switch(newItem.data.name){\r\n                case 'douse-drive':                                     \r\n                case 'shock-drive':\r\n                case 'burn-drive':\r\n                case 'chill-drive':                                               \r\n                  // Check for a specific move.\r\n                  usable = getSpecificOptionsUsabilityForItems(['techno-blast'], '', ['drive'], currentItems);\r\n                  break;\r\n                case 'stick':\r\n                  // Check for a specific pokemon.\r\n                  usable = getPokemonUsability(['sirfetchd']);\r\n                  break;\r\n                case 'thick-club':\r\n                  // Check for a specific pokemon.\r\n                  usable = getPokemonUsability(['marowak', 'marowak-alola']);\r\n                  break;\r\n                case 'soul-dew':\r\n                  // Check for a specific pokemon.\r\n                  usable = getPokemonUsability(['latios', 'latias']);\r\n                  break;\r\n                default:\r\n                  break;\r\n              }\r\n            break;\r\n          default:\r\n            break;\r\n        }                      \r\n      } while (checkDuplicatedName(currentItems, newItem.data.name) || FindKeywords(newItem.data.name, '-', itemFilter, itemAllow) || !usable)\r\n      //console.log(newItem.data.name);\r\n\r\n      return newItem.data;\r\n    } \r\n\r\n    if(generating && generationStep === 5 && itemList.length > 0){      \r\n      getItemOptions();\r\n    }\r\n    return () => cancel = true;\r\n  }, [generating, generationStep, itemList, randomRolls, itemFilter, itemAllow, consumableItems, plateItems, memoryItems,\r\n      getMovesetTypeUsabilityForItems, getMoveMechanicUsability, getAbilityMechanicUsability, getPokemonTypeUsability,\r\n      getReverseOption, getSpecificOptionsUsabilityForItems, getPokemonUsability])\r\n\r\n  useEffect(() => {\r\n    let cancel = false;\r\n\r\n    if(generating && generationStep === 6){\r\n      setToast('Controls', 'Options generated, build your team!', {success: true});\r\n      if(!cancel)\r\n        setGenerating(false);   \r\n    }\r\n    return () => cancel = true;\r\n  }, [generating, generationStep])  \r\n\r\n  // ----- SELECTIONS & ASSIGNMENTS -----\r\n  // Select a pokemon.\r\n  const selectPokemon = (pokemon) => {\r\n    if(!generating){\r\n      let change = false;\r\n      let options = pokemonOptions;\r\n      options = options.map(p => {\r\n        if(p.name === pokemon.name){\r\n          if(p.selected) {      \r\n            p.selected = false;\r\n            p.moveset = null;\r\n            p.ability = null;\r\n            p.item = null;          \r\n            change = true;\r\n          }\r\n          else if(!p.selected && selectionsMade.pokemons < selectionsNeeded.pokemons) {\r\n            p.selected = true;\r\n            change = true;\r\n          }\r\n          else {\r\n            setToast('Pokemon Options', `Only ${selectionsNeeded.pokemons} pokemons can be selected.`, {warning: true});\r\n          }\r\n        }\r\n        return p;\r\n      })\r\n      if(change){\r\n        setPokemonOptions(options); \r\n      }\r\n    }\r\n    else\r\n      setToast('Team Builder', 'Your options are still being generated.', {warning: true});\r\n  }   \r\n\r\n  // Select a move.\r\n  const selectMove = (move, moveset) => {  \r\n    if(!generating){\r\n      let change = false;  \r\n      let msOptions = movesetOptions;    \r\n      msOptions[moveset] = msOptions[moveset].map(m => {\r\n        if(m.name === move.name){\r\n          if(m.selected){      \r\n            m.selected = false;\r\n            change = true;\r\n          }\r\n          else if(!m.selected && selectionsMade.moves[moveset] < selectionsNeeded.moves){\r\n            m.selected = true;\r\n            change = true;\r\n          }\r\n          else {\r\n            setToast('Moveset Options', `Only ${selectionsNeeded.moves} moves can be selected in a moveset.`, {warning: true});\r\n          }\r\n        }\r\n        return m;\r\n      });\r\n      if(change){\r\n        setMovesetOptions([...msOptions]);\r\n      }\r\n    }\r\n    else\r\n      setToast('Team Builder', 'Your options are still being generated.', {warning: true});\r\n  }\r\n\r\n  // Assign a pokemon to a moveset, ability or item.\r\n  const assignPokemon = (pokemon, assignable) => {\r\n    if(!generating){\r\n      let change = false;\r\n      let pokemons = pokemonOptions;\r\n      pokemons = pokemons.map(p => {\r\n        if(p.name === pokemon.name){\r\n          if(assignable.moveset != null){\r\n            if(p.moveset !== assignable.moveset)\r\n              p.moveset = assignable.moveset;\r\n            else\r\n              p.moveset = null;\r\n            change = true;\r\n          }\r\n          else if(assignable.ability != null){\r\n            if(p.ability !== assignable.ability)\r\n              p.ability = assignable.ability;\r\n            else\r\n              p.ability = null;\r\n            change = true;\r\n          }\r\n          else if(assignable.item != null){\r\n            if(p.item !== assignable.item)\r\n              p.item = assignable.item;\r\n            else\r\n              p.item = null;\r\n            change = true;\r\n          }\r\n        }\r\n        else{\r\n          if(assignable.moveset != null){\r\n            if(p.moveset === assignable.moveset) {\r\n              p.moveset = null;\r\n              change = true;\r\n              setToast('Moveset Options',\r\n              `Assigned ${upperCaseWords(pokemon.name)} instead of ${upperCaseWords(p.name)} to moveset ${assignable.moveset+1}.`,\r\n              {warning: true});\r\n            }\r\n          }\r\n          if(assignable.ability != null){\r\n            if(p.ability === assignable.ability) {\r\n              p.ability = null;\r\n              change = true;\r\n              setToast('Ability Options',\r\n              `Assigned ${upperCaseWords(pokemon.name)} instead of ${upperCaseWords(p.name)} to ability ${upperCaseWords(abilityOptions[assignable.ability].name)}.`,\r\n              {warning: true});\r\n            }\r\n          }\r\n          if(assignable.item != null){\r\n            if(p.item === assignable.item) {\r\n              p.item = null;\r\n              change = true;\r\n              setToast('Item Options',\r\n              `Assigned ${upperCaseWords(pokemon.name)} instead of ${upperCaseWords(p.name)} to item ${upperCaseWords(itemOptions[assignable.item].name)}.`,\r\n              {warning: true});\r\n            }\r\n          }\r\n        }\r\n        return p;\r\n      })\r\n      if(change){   \r\n        setPokemonOptions(pokemons);\r\n      }\r\n    }\r\n    else\r\n      setToast('Team Builder', 'Your options are still being generated.', {warning: true});\r\n  }    \r\n\r\n  // Clear all selections and assignments.\r\n  const clearChoices = () => {\r\n    const choicesMade = Object.values(selectionsMade).some(val => Array.isArray(val) ? val.some(i => i) : val);\r\n    if(choicesMade){\r\n      let options = pokemonOptions;\r\n      options = options.map(p => {      \r\n        p.selected = false;\r\n        p.moveset = null;\r\n        p.ability = null;\r\n        p.item = null;                  \r\n        return p;\r\n      });\r\n      setPokemonOptions(options);\r\n \r\n      let msOptions = movesetOptions;    \r\n      msOptions.forEach(ms => {\r\n        ms = ms.map(m => {   \r\n          m.selected = false;\r\n          return m;\r\n        });\r\n      });          \r\n      setMovesetOptions([...msOptions]);\r\n\r\n      setToast('Controls', 'Choices cleared, start again!', {success: true});\r\n    }\r\n    else {\r\n      setToast('Controls', 'There are no choices to clear.', {warning: true});\r\n    }\r\n  }\r\n\r\n  // ----- RESPONSES -----\r\n  // Respond to completed sections.\r\n  const checkSectionCompleted = useCallback((string, val) => {\r\n    let sCompleted = sectionsCompleted;\r\n    let change = false;\r\n    switch(string){\r\n      case 'pokemons':\r\n        if(!sCompleted.pokemons && val >= selectionsNeeded.pokemons){\r\n          sCompleted.pokemons = true;\r\n          change = true;\r\n          setToast('Pokemon Options', `All ${selectionsNeeded.pokemons} pokemons have been selected.`, {success: true});\r\n        }\r\n        else if(sCompleted.pokemons && val < selectionsNeeded.pokemons){\r\n          sCompleted.pokemons = false;\r\n          change = true;\r\n          setToast('Pokemon Options', `There must be ${selectionsNeeded.pokemons} pokemons selected.`, {warning: true});\r\n        }\r\n        break;\r\n      case 'movesets':\r\n        if(!sCompleted.movesets && val >= selectionsNeeded.movesets){\r\n          sCompleted.movesets = true;\r\n          change = true;\r\n          setToast('Moveset Options', `All ${selectionsNeeded.movesets} pokemons have been assigned to a moveset.`, {success: true});\r\n        }\r\n        else if(sCompleted.movesets && val < selectionsNeeded.movesets){\r\n          sCompleted.movesets = false;\r\n          change = true;\r\n          setToast('Moveset Options', `There must be ${selectionsNeeded.movesets} pokemons assigned to a moveset.`, {warning: true});\r\n        }\r\n        break;\r\n      case 'moves':\r\n        if(!sCompleted.moves && val >= selectionsNeeded.movesets * selectionsNeeded.moves){\r\n          sCompleted.moves = true;\r\n          change = true;\r\n          setToast('Moveset Options', `All ${selectionsNeeded.movesets * selectionsNeeded.moves} moves have been selected.`, {success: true});    \r\n        }\r\n        else if(sCompleted.moves && val < selectionsNeeded.movesets * selectionsNeeded.moves){\r\n          sCompleted.moves = false;\r\n          change = true;\r\n          setToast('Moveset Options', `There must be ${selectionsNeeded.movesets * selectionsNeeded.moves} moves selected.`, {warning: true});    \r\n        }\r\n        break;\r\n      case 'abilities':\r\n        if(!sCompleted.abilities && val >= selectionsNeeded.abilities){\r\n          sCompleted.abilities = true;\r\n          change = true;\r\n          setToast('Ability Options', `All ${selectionsNeeded.abilities} pokemons have been assigned to an ability.`, {success: true});\r\n        }\r\n        else if(sCompleted.abilities && val < selectionsNeeded.abilities){\r\n          sCompleted.abilities = false;\r\n          change = true;\r\n          setToast('Ability Options', `There must be ${selectionsNeeded.abilities} pokemons assigned to an ability.`, {warning: true});\r\n        }\r\n        break;\r\n      case 'items':\r\n        if(!sCompleted.items && val >= selectionsNeeded.items){\r\n          sCompleted.items = true;\r\n          change = true;\r\n          setToast('Item Options', `All ${selectionsNeeded.items} pokemons have been assigned to an item.`, {success: true});\r\n        }\r\n        else if(sCompleted.items && val < selectionsNeeded.items){\r\n          sCompleted.items = false;\r\n          change = true;\r\n          setToast('Item Options', `There must be ${selectionsNeeded.items} pokemons assigned to an item.`, {warning: true});\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    if(change){\r\n      setSectionsCompleted(sCompleted);\r\n      if(Object.values(sCompleted).every(val => val))\r\n        setToast('Team Builder', `Team completely built, export your team!`, {success: true});\r\n    }\r\n  }, [sectionsCompleted, selectionsNeeded]);\r\n\r\n  // Respond to changes in slections/assignments for pokemon, movesets, abilities and items.\r\n  useEffect (() => {\r\n    let pSelected = 0;\r\n    let msAssigned = 0;    \r\n    let aAssigned = 0;\r\n    let iAssigned = 0;\r\n\r\n    pokemonOptions.forEach(p => {\r\n      if(p.selected)\r\n        pSelected = pSelected + 1;\r\n      if(p.moveset != null)\r\n        msAssigned = msAssigned + 1;\r\n      if(p.ability != null)\r\n        aAssigned = aAssigned + 1;\r\n      if(p.item != null)\r\n        iAssigned = iAssigned + 1;\r\n    });    \r\n    \r\n    checkSectionCompleted('pokemons', pSelected);\r\n    checkSectionCompleted('movesets', msAssigned);\r\n    checkSectionCompleted('abilities', aAssigned);\r\n    checkSectionCompleted('items', iAssigned);\r\n\r\n    setSelectionsMade(s => { return {\r\n      ...s,\r\n      pokemons: pSelected,\r\n      movesets: msAssigned,\r\n      abilities: aAssigned,\r\n      items: iAssigned\r\n    }});\r\n  }, [pokemonOptions, checkSectionCompleted]); \r\n\r\n  // Respond to changes in selections for moves.\r\n  useEffect (() => {\r\n    let mSelected = [];\r\n    let mSelectedAmount = 0;\r\n\r\n    movesetOptions.forEach(ms => {\r\n      let msSelected = ms.filter(m => m.selected).length;\r\n      mSelected.push(msSelected);\r\n      mSelectedAmount = mSelectedAmount + msSelected;\r\n    });\r\n\r\n    checkSectionCompleted('moves', mSelectedAmount);\r\n\r\n    setSelectionsMade(s => {return {...s, moves: mSelected}});\r\n  }, [movesetOptions, checkSectionCompleted]);    \r\n\r\n  // ----- HELPER FUNCTIONS -----  \r\n  // Get total stats for a pokemon.\r\n  const getTotalStats = (stats) => {\r\n    let total = 0;\r\n    stats.forEach(s => {\r\n        total = total + s.base_stat; \r\n    });        \r\n    return total;\r\n  }   \r\n\r\n  const checkDuplicatedName = (currentObjects, newObjectName) => {\r\n    return currentObjects.find(co => co.name === newObjectName)\r\n  }\r\n\r\n  // Filter by keywords.\r\n  const FindKeywords = (string, separator, filter, allow) => {\r\n    let found = false;\r\n    found = string.split(separator).some(keyword => filter.includes(keyword))\r\n    if(found && allow)\r\n      found = !string.split(separator).some(keyword => allow.includes(keyword))\r\n    return found;\r\n  }\r\n\r\n  const capitalizeWords = (text, separator) => {\r\n    return text.split(separator).map((word) => {return word[0].toUpperCase() + word.substring(1)}).join(\" \");\r\n  }\r\n\r\n  const upperCaseWords = (string) => {\r\n    return string.replace(/\\b\\w/g, l => l.toUpperCase())\r\n  }      \r\n\r\n  // ----- OTHERS -----\r\n  // Show a toast notification.\r\n  const setToast = (title, content, type) => {    \r\n    toast.custom((t) => (\r\n      <div onClick={() => toast.dismiss(t.id)}\r\n        className={`cursor-pointer max-w-md w-full flex flex-col gap-2 bg-white p-2 rounded-md pointer-events-auto flex border-2 border-gray-200 hover:bg-gray-200 transition duration-150 ease-in-out \r\n        ${t.visible ? 'animate-enter' : 'animate-leave'}\r\n        ${type.success ? 'bg-green-100 border-green-200 ring ring-green-100' : ''}\r\n        ${type.warning ? 'bg-yellow-100 border-yellow-200 ring ring-yellow-100' : ''}\r\n        ${type.error ? 'bg-red-200 border-red-300 ring ring-red-200' : ''}`}\r\n      >\r\n        <div className=\"flex justify-between items-center w-full\">\r\n          <p className=\"text-base capitalize\">{title}</p>\r\n          {/* <HiOutlineX className=\"cursor-pointer text-2xl hover:text-gray-600\" onClick={() => toast.dismiss(t.id)}/> */}\r\n        </div>          \r\n        <div className=\"flex text-sm\">\r\n          <p>{content}</p>\r\n        </div>\r\n      </div>\r\n    ));\r\n  }\r\n\r\n  // Create an export of the team.\r\n  const exportTeam = () => {\r\n    if(Object.values(sectionsCompleted).every(val => val)) {\r\n      let exportText = \"\";         \r\n      pokemonOptions.forEach(p => {\r\n        if(p.selected){\r\n          let moveset = movesetOptions[p.moveset].filter(m => m.selected).map(m => {return m.name});\r\n          exportText += capitalizeWords(p.name, \"-\");\r\n          exportText += \" @ \" + capitalizeWords(itemOptions[p.item].name, \"-\");\r\n          exportText += \"\\r\\nAbility: \" + capitalizeWords(abilityOptions[p.ability].name, \"-\");\r\n          exportText += \"\\r\\n\" + (p.shiny ? \"Level: 60\\r\\nShiny: Yes\" : \"Level: 50\");\r\n          exportText += \"\\r\\n- \" + capitalizeWords(moveset[0], \"-\");\r\n          exportText += \"\\r\\n- \" + capitalizeWords(moveset[1], \"-\");\r\n          exportText += \"\\r\\n- \" + capitalizeWords(moveset[2], \"-\");\r\n          exportText += \"\\r\\n- \" + capitalizeWords(moveset[3], \"-\");    \r\n          exportText += \"\\r\\n\\r\\n\";                             \r\n        }\r\n      });\r\n      copyTextToClipboard(exportText);      \r\n    }\r\n    else {\r\n      setToast('Controls', 'The team is not completely built!', {warning: true});      \r\n    }\r\n  }  \r\n\r\n  // Copy the exported team to clipboard.\r\n  function fallbackCopyTextToClipboard(text) {\r\n    var textArea = document.createElement(\"textarea\");\r\n    textArea.value = text;\r\n    document.body.appendChild(textArea);\r\n    textArea.focus();\r\n    textArea.select();  \r\n    try {\r\n      var successful = document.execCommand(\"copy\");\r\n      if(successful)\r\n        setToast('Controls', 'Team copied to clipboard!', {success: true});      \r\n      else\r\n        setToast('Controls', 'Error copying the team to clipboard!', {error: true});\r\n    } catch (err) {\r\n      setToast('Controls', 'Unable to copy the team to clipboard!', {error: true});\r\n    }  \r\n    document.body.removeChild(textArea);\r\n  }\r\n  function copyTextToClipboard(text) {\r\n    if (!navigator.clipboard) {\r\n      fallbackCopyTextToClipboard(text);\r\n      return;\r\n    }\r\n    navigator.clipboard.writeText(text).then(\r\n      function() {\r\n        setToast('Controls', 'Team copied to clipboard!', {success: true});\r\n      },\r\n      function(err) {\r\n        setToast('Controls', 'Error copying the team to clipboard!', {error: true});\r\n      }\r\n    );\r\n  }\r\n\r\n  // Render.\r\n  return (        \r\n    <TeamBuilderContext.Provider value={{\r\n      pokemonOptions: pokemonOptions,\r\n      selectionsNeeded: selectionsNeeded,\r\n      selectionsMade: selectionsMade,\r\n      selectPokemon: selectPokemon,\r\n      selectMove: selectMove,\r\n      assignPokemon: assignPokemon\r\n    }}>\r\n      <div className=\"bg-gray-100 min-h-screen\">\r\n        <Router basename=\"/React-Procedural-Pokemon\">           \r\n          <div className=\"flex flex-col\">\r\n            <Navbar />             \r\n            <Switch>          \r\n              <Route path=\"/about\">\r\n                <About />\r\n              </Route>\r\n              <Route path=\"/builder\">        \r\n                <TeamBuilder\r\n                  loading={loading}\r\n                  randomRolls={randomRolls}\r\n                  pokemonOptions={pokemonOptions}\r\n                  movesetOptions={movesetOptions}\r\n                  abilityOptions={abilityOptions}\r\n                  itemOptions={itemOptions}\r\n                  generating={generating}\r\n                  generateOptions={generateOptions}                \r\n                  clearChoices={clearChoices}\r\n                  exportTeam={exportTeam}\r\n                />\r\n              </Route>\r\n              <Route path=\"/\">\r\n                <Home />\r\n              </Route>          \r\n            </Switch>\r\n          </div> \r\n        </Router>      \r\n      </div>\r\n      <Toaster\r\n        position=\"bottom-right\"\r\n        reverseOrder={false}\r\n        gutter={8}\r\n      />\r\n    </TeamBuilderContext.Provider>\r\n  );\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}